Enumerating objects: 2663, done.
Counting objects:   0% (1/2663)Counting objects:   1% (27/2663)Counting objects:   2% (54/2663)Counting objects:   3% (80/2663)Counting objects:   4% (107/2663)Counting objects:   5% (134/2663)Counting objects:   6% (160/2663)Counting objects:   7% (187/2663)Counting objects:   8% (214/2663)Counting objects:   9% (240/2663)Counting objects:  10% (267/2663)Counting objects:  11% (293/2663)Counting objects:  12% (320/2663)Counting objects:  13% (347/2663)Counting objects:  14% (373/2663)Counting objects:  15% (400/2663)Counting objects:  16% (427/2663)Counting objects:  17% (453/2663)Counting objects:  18% (480/2663)Counting objects:  19% (506/2663)Counting objects:  20% (533/2663)Counting objects:  21% (560/2663)Counting objects:  22% (586/2663)Counting objects:  23% (613/2663)Counting objects:  24% (640/2663)Counting objects:  25% (666/2663)Counting objects:  26% (693/2663)Counting objects:  27% (720/2663)Counting objects:  28% (746/2663)Counting objects:  29% (773/2663)Counting objects:  30% (799/2663)Counting objects:  31% (826/2663)Counting objects:  32% (853/2663)Counting objects:  33% (879/2663)Counting objects:  34% (906/2663)Counting objects:  35% (933/2663)Counting objects:  36% (959/2663)Counting objects:  37% (986/2663)Counting objects:  38% (1012/2663)Counting objects:  39% (1039/2663)Counting objects:  40% (1066/2663)Counting objects:  41% (1092/2663)Counting objects:  42% (1119/2663)Counting objects:  43% (1146/2663)Counting objects:  44% (1172/2663)Counting objects:  45% (1199/2663)Counting objects:  46% (1225/2663)Counting objects:  47% (1252/2663)Counting objects:  48% (1279/2663)Counting objects:  49% (1305/2663)Counting objects:  50% (1332/2663)Counting objects:  51% (1359/2663)Counting objects:  52% (1385/2663)Counting objects:  53% (1412/2663)Counting objects:  54% (1439/2663)Counting objects:  55% (1465/2663)Counting objects:  56% (1492/2663)Counting objects:  57% (1518/2663)Counting objects:  58% (1545/2663)Counting objects:  59% (1572/2663)Counting objects:  60% (1598/2663)Counting objects:  61% (1625/2663)Counting objects:  62% (1652/2663)Counting objects:  63% (1678/2663)Counting objects:  64% (1705/2663)Counting objects:  65% (1731/2663)Counting objects:  66% (1758/2663)Counting objects:  67% (1785/2663)Counting objects:  68% (1811/2663)Counting objects:  69% (1838/2663)Counting objects:  70% (1865/2663)Counting objects:  71% (1891/2663)Counting objects:  72% (1918/2663)Counting objects:  73% (1944/2663)Counting objects:  74% (1971/2663)Counting objects:  75% (1998/2663)Counting objects:  76% (2024/2663)Counting objects:  77% (2051/2663)Counting objects:  78% (2078/2663)Counting objects:  79% (2104/2663)Counting objects:  80% (2131/2663)Counting objects:  81% (2158/2663)Counting objects:  82% (2184/2663)Counting objects:  83% (2211/2663)Counting objects:  84% (2237/2663)Counting objects:  85% (2264/2663)Counting objects:  86% (2291/2663)Counting objects:  87% (2317/2663)Counting objects:  88% (2344/2663)Counting objects:  89% (2371/2663)Counting objects:  90% (2397/2663)Counting objects:  91% (2424/2663)Counting objects:  92% (2450/2663)Counting objects:  93% (2477/2663)Counting objects:  94% (2504/2663)Counting objects:  95% (2530/2663)Counting objects:  96% (2557/2663)Counting objects:  97% (2584/2663)Counting objects:  98% (2610/2663)Counting objects:  99% (2637/2663)Counting objects: 100% (2663/2663)Counting objects: 100% (2663/2663), done.
Compressing objects:   0% (1/1642)Compressing objects:   1% (17/1642)Compressing objects:   2% (33/1642)Compressing objects:   3% (50/1642)Compressing objects:   4% (66/1642)Compressing objects:   5% (83/1642)Compressing objects:   6% (99/1642)Compressing objects:   7% (115/1642)Compressing objects:   8% (132/1642)Compressing objects:   9% (148/1642)Compressing objects:  10% (165/1642)Compressing objects:  11% (181/1642)Compressing objects:  12% (198/1642)Compressing objects:  13% (214/1642)Compressing objects:  14% (230/1642)Compressing objects:  15% (247/1642)Compressing objects:  16% (263/1642)Compressing objects:  17% (280/1642)Compressing objects:  18% (296/1642)Compressing objects:  19% (312/1642)Compressing objects:  20% (329/1642)Compressing objects:  21% (345/1642)Compressing objects:  22% (362/1642)Compressing objects:  23% (378/1642)Compressing objects:  24% (395/1642)Compressing objects:  25% (411/1642)Compressing objects:  26% (427/1642)Compressing objects:  27% (444/1642)Compressing objects:  28% (460/1642)Compressing objects:  29% (477/1642)Compressing objects:  30% (493/1642)Compressing objects:  31% (510/1642)Compressing objects:  32% (526/1642)Compressing objects:  33% (542/1642)Compressing objects:  34% (559/1642)Compressing objects:  35% (575/1642)Compressing objects:  36% (592/1642)Compressing objects:  37% (608/1642)Compressing objects:  38% (624/1642)Compressing objects:  39% (641/1642)Compressing objects:  40% (657/1642)Compressing objects:  41% (674/1642)Compressing objects:  42% (690/1642)Compressing objects:  43% (707/1642)Compressing objects:  44% (723/1642)Compressing objects:  45% (739/1642)Compressing objects:  46% (756/1642)Compressing objects:  47% (772/1642)Compressing objects:  48% (789/1642)Compressing objects:  49% (805/1642)Compressing objects:  50% (821/1642)Compressing objects:  51% (838/1642)Compressing objects:  52% (854/1642)Compressing objects:  53% (871/1642)Compressing objects:  54% (887/1642)Compressing objects:  55% (904/1642)Compressing objects:  56% (920/1642)Compressing objects:  57% (936/1642)Compressing objects:  58% (953/1642)Compressing objects:  59% (969/1642)Compressing objects:  60% (986/1642)Compressing objects:  61% (1002/1642)Compressing objects:  62% (1019/1642)Compressing objects:  63% (1035/1642)Compressing objects:  64% (1051/1642)Compressing objects:  65% (1068/1642)Compressing objects:  66% (1084/1642)Compressing objects:  67% (1101/1642)Compressing objects:  68% (1117/1642)Compressing objects:  69% (1133/1642)Compressing objects:  70% (1150/1642)Compressing objects:  71% (1166/1642)Compressing objects:  72% (1183/1642)Compressing objects:  73% (1199/1642)Compressing objects:  74% (1216/1642)Compressing objects:  75% (1232/1642)Compressing objects:  76% (1248/1642)Compressing objects:  77% (1265/1642)Compressing objects:  78% (1281/1642)Compressing objects:  79% (1298/1642)Compressing objects:  80% (1314/1642)Compressing objects:  81% (1331/1642)Compressing objects:  82% (1347/1642)Compressing objects:  83% (1363/1642)Compressing objects:  84% (1380/1642)Compressing objects:  85% (1396/1642)Compressing objects:  86% (1413/1642)Compressing objects:  87% (1429/1642)Compressing objects:  88% (1445/1642)Compressing objects:  89% (1462/1642)Compressing objects:  90% (1478/1642)Compressing objects:  91% (1495/1642)Compressing objects:  92% (1511/1642)Compressing objects:  93% (1528/1642)Compressing objects:  94% (1544/1642)Compressing objects:  95% (1560/1642)Compressing objects:  96% (1577/1642)Compressing objects:  97% (1593/1642)Compressing objects:  98% (1610/1642)Compressing objects:  99% (1626/1642)Compressing objects: 100% (1642/1642)Compressing objects: 100% (1642/1642), done.
Total 2663 (delta 1330), reused 1941 (delta 838), pack-reused 0

deploy/kubernetes/Dockerfile (dockerfile)
=========================================
Tests: 24 (SUCCESSES: 21, FAILURES: 3, EXCEPTIONS: 0)
Failures: 3 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 2, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


HIGH: '--no-cache' is missed: apk add bash make
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should use 'apk add' with '--no-cache' to clean package cached data and reduce image size.

See https://avd.aquasec.com/misconfig/ds025
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/Dockerfile:3
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   3 [ RUN apk add bash make
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/autoscaling/grafana-deployment.yaml (kubernetes)
==================================================================
Tests: 141 (SUCCESSES: 129, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'grafana' of Deployment 'monitoring-grafana' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/grafana-deployment.yaml:19-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  19 ┌       - name: grafana
  20 │         image: gcr.io/google_containers/heapster-grafana-amd64:v4.0.2
  21 │         ports:
  22 │           - containerPort: 3000
  23 │             protocol: TCP
  24 │         volumeMounts:
  25 │         - mountPath: /var
  26 │           name: grafana-storage
  27 └         env:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'grafana' of Deployment 'monitoring-grafana' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/grafana-deployment.yaml:19-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  19 ┌       - name: grafana
  20 │         image: gcr.io/google_containers/heapster-grafana-amd64:v4.0.2
  21 │         ports:
  22 │           - containerPort: 3000
  23 │             protocol: TCP
  24 │         volumeMounts:
  25 │         - mountPath: /var
  26 │           name: grafana-storage
  27 └         env:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'grafana' of Deployment 'monitoring-grafana' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/grafana-deployment.yaml:19-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  19 ┌       - name: grafana
  20 │         image: gcr.io/google_containers/heapster-grafana-amd64:v4.0.2
  21 │         ports:
  22 │           - containerPort: 3000
  23 │             protocol: TCP
  24 │         volumeMounts:
  25 │         - mountPath: /var
  26 │           name: grafana-storage
  27 └         env:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'grafana' of Deployment 'monitoring-grafana' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/grafana-deployment.yaml:19-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  19 ┌       - name: grafana
  20 │         image: gcr.io/google_containers/heapster-grafana-amd64:v4.0.2
  21 │         ports:
  22 │           - containerPort: 3000
  23 │             protocol: TCP
  24 │         volumeMounts:
  25 │         - mountPath: /var
  26 │           name: grafana-storage
  27 └         env:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'grafana' of Deployment 'monitoring-grafana' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/grafana-deployment.yaml:19-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  19 ┌       - name: grafana
  20 │         image: gcr.io/google_containers/heapster-grafana-amd64:v4.0.2
  21 │         ports:
  22 │           - containerPort: 3000
  23 │             protocol: TCP
  24 │         volumeMounts:
  25 │         - mountPath: /var
  26 │           name: grafana-storage
  27 └         env:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'grafana' of Deployment 'monitoring-grafana' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/grafana-deployment.yaml:19-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  19 ┌       - name: grafana
  20 │         image: gcr.io/google_containers/heapster-grafana-amd64:v4.0.2
  21 │         ports:
  22 │           - containerPort: 3000
  23 │             protocol: TCP
  24 │         volumeMounts:
  25 │         - mountPath: /var
  26 │           name: grafana-storage
  27 └         env:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'grafana' of Deployment 'monitoring-grafana' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/grafana-deployment.yaml:19-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  19 ┌       - name: grafana
  20 │         image: gcr.io/google_containers/heapster-grafana-amd64:v4.0.2
  21 │         ports:
  22 │           - containerPort: 3000
  23 │             protocol: TCP
  24 │         volumeMounts:
  25 │         - mountPath: /var
  26 │           name: grafana-storage
  27 └         env:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'grafana' of Deployment 'monitoring-grafana' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/grafana-deployment.yaml:19-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  19 ┌       - name: grafana
  20 │         image: gcr.io/google_containers/heapster-grafana-amd64:v4.0.2
  21 │         ports:
  22 │           - containerPort: 3000
  23 │             protocol: TCP
  24 │         volumeMounts:
  25 │         - mountPath: /var
  26 │           name: grafana-storage
  27 └         env:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'grafana' of Deployment 'monitoring-grafana' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/grafana-deployment.yaml:19-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  19 ┌       - name: grafana
  20 │         image: gcr.io/google_containers/heapster-grafana-amd64:v4.0.2
  21 │         ports:
  22 │           - containerPort: 3000
  23 │             protocol: TCP
  24 │         volumeMounts:
  25 │         - mountPath: /var
  26 │           name: grafana-storage
  27 └         env:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'grafana' of Deployment 'monitoring-grafana' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/grafana-deployment.yaml:19-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  19 ┌       - name: grafana
  20 │         image: gcr.io/google_containers/heapster-grafana-amd64:v4.0.2
  21 │         ports:
  22 │           - containerPort: 3000
  23 │             protocol: TCP
  24 │         volumeMounts:
  25 │         - mountPath: /var
  26 │           name: grafana-storage
  27 └         env:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/grafana-deployment.yaml:19-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  19 ┌       - name: grafana
  20 │         image: gcr.io/google_containers/heapster-grafana-amd64:v4.0.2
  21 │         ports:
  22 │           - containerPort: 3000
  23 │             protocol: TCP
  24 │         volumeMounts:
  25 │         - mountPath: /var
  26 │           name: grafana-storage
  27 └         env:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/grafana-deployment.yaml:19-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  19 ┌       - name: grafana
  20 │         image: gcr.io/google_containers/heapster-grafana-amd64:v4.0.2
  21 │         ports:
  22 │           - containerPort: 3000
  23 │             protocol: TCP
  24 │         volumeMounts:
  25 │         - mountPath: /var
  26 │           name: grafana-storage
  27 └         env:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/autoscaling/heapster-crb.yml (kubernetes)
===========================================================
Tests: 141 (SUCCESSES: 140, FAILURES: 1, EXCEPTIONS: 0)
Failures: 1 (UNKNOWN: 1, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

UNKNOWN: apiVersion 'rbac.authorization.k8s.io/v1beta1' and kind ‘ClusterRoleBinding' should be replaced with the new API 'rbac.authorization.k8s.io.v1.ClusterRoleBinding'
See https://github.com/kubernetes/kubernetes/tree/master/staging/src/k8s.io/api/rbac/v1beta1/zz_generated.prerelease-lifecycle.go
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Rego module: data.defsec.kubernetes.KSV107
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/heapster-crb.yml:2-6
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   2 ┌ apiVersion: rbac.authorization.k8s.io/v1beta1
   3 │ kind: ClusterRoleBinding
   4 │ metadata:
   5 │   name: heapster
   6 └ roleRef:
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/autoscaling/heapster-deployment.yaml (kubernetes)
===================================================================
Tests: 141 (SUCCESSES: 133, FAILURES: 8, EXCEPTIONS: 0)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'heapster' of Deployment 'heapster' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/heapster-deployment.yaml:20-33
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: heapster
  21 │         image: gcr.io/google_containers/heapster-amd64:v1.4.0
  22 │         imagePullPolicy: IfNotPresent
  23 │         command:
  24 │         - /heapster
  25 │         - --source=kubernetes:https://kubernetes.default
  26 │         - --sink=influxdb:http://monitoring-influxdb:8086
  27 │         resources:
  28 └           limits:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'heapster' of Deployment 'heapster' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/heapster-deployment.yaml:20-33
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: heapster
  21 │         image: gcr.io/google_containers/heapster-amd64:v1.4.0
  22 │         imagePullPolicy: IfNotPresent
  23 │         command:
  24 │         - /heapster
  25 │         - --source=kubernetes:https://kubernetes.default
  26 │         - --sink=influxdb:http://monitoring-influxdb:8086
  27 │         resources:
  28 └           limits:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'heapster' of Deployment 'heapster' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/heapster-deployment.yaml:20-33
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: heapster
  21 │         image: gcr.io/google_containers/heapster-amd64:v1.4.0
  22 │         imagePullPolicy: IfNotPresent
  23 │         command:
  24 │         - /heapster
  25 │         - --source=kubernetes:https://kubernetes.default
  26 │         - --sink=influxdb:http://monitoring-influxdb:8086
  27 │         resources:
  28 └           limits:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'heapster' of Deployment 'heapster' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/heapster-deployment.yaml:20-33
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: heapster
  21 │         image: gcr.io/google_containers/heapster-amd64:v1.4.0
  22 │         imagePullPolicy: IfNotPresent
  23 │         command:
  24 │         - /heapster
  25 │         - --source=kubernetes:https://kubernetes.default
  26 │         - --sink=influxdb:http://monitoring-influxdb:8086
  27 │         resources:
  28 └           limits:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'heapster' of Deployment 'heapster' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/heapster-deployment.yaml:20-33
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: heapster
  21 │         image: gcr.io/google_containers/heapster-amd64:v1.4.0
  22 │         imagePullPolicy: IfNotPresent
  23 │         command:
  24 │         - /heapster
  25 │         - --source=kubernetes:https://kubernetes.default
  26 │         - --sink=influxdb:http://monitoring-influxdb:8086
  27 │         resources:
  28 └           limits:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'heapster' of Deployment 'heapster' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/heapster-deployment.yaml:20-33
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: heapster
  21 │         image: gcr.io/google_containers/heapster-amd64:v1.4.0
  22 │         imagePullPolicy: IfNotPresent
  23 │         command:
  24 │         - /heapster
  25 │         - --source=kubernetes:https://kubernetes.default
  26 │         - --sink=influxdb:http://monitoring-influxdb:8086
  27 │         resources:
  28 └           limits:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/heapster-deployment.yaml:20-33
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: heapster
  21 │         image: gcr.io/google_containers/heapster-amd64:v1.4.0
  22 │         imagePullPolicy: IfNotPresent
  23 │         command:
  24 │         - /heapster
  25 │         - --source=kubernetes:https://kubernetes.default
  26 │         - --sink=influxdb:http://monitoring-influxdb:8086
  27 │         resources:
  28 └           limits:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/heapster-deployment.yaml:20-33
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: heapster
  21 │         image: gcr.io/google_containers/heapster-amd64:v1.4.0
  22 │         imagePullPolicy: IfNotPresent
  23 │         command:
  24 │         - /heapster
  25 │         - --source=kubernetes:https://kubernetes.default
  26 │         - --sink=influxdb:http://monitoring-influxdb:8086
  27 │         resources:
  28 └           limits:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/autoscaling/influxdb-deployment.yaml (kubernetes)
===================================================================
Tests: 141 (SUCCESSES: 129, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/influxdb-deployment.yaml:19-23
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'influxdb' of Deployment 'monitoring-influxdb' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/influxdb-deployment.yaml:19-23
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/influxdb-deployment.yaml:19-23
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/influxdb-deployment.yaml:19-23
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/influxdb-deployment.yaml:19-23
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/influxdb-deployment.yaml:19-23
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/influxdb-deployment.yaml:19-23
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/influxdb-deployment.yaml:19-23
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/influxdb-deployment.yaml:19-23
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/influxdb-deployment.yaml:19-23
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/influxdb-deployment.yaml:19-23
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/autoscaling/influxdb-deployment.yaml:19-23
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/complete-demo.yaml (kubernetes)
=================================================
Tests: 265 (SUCCESSES: 141, FAILURES: 124, EXCEPTIONS: 0)
Failures: 124 (UNKNOWN: 0, LOW: 87, MEDIUM: 37, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'carts' of Deployment 'carts' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:25-50
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌       - name: carts
  26 │         image: weaveworksdemos/carts:0.4.8
  27 │         env:
  28 │          - name: JAVA_OPTS
  29 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  30 │         resources:
  31 │           limits:
  32 │             cpu: 300m
  33 └             memory: 500Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:93-109
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  93 ┌       - name: carts-db
  94 │         image: mongo
  95 │         ports:
  96 │         - name: mongo
  97 │           containerPort: 27017
  98 │         securityContext:
  99 │           capabilities:
 100 │             drop:
 101 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'catalogue' of Deployment 'catalogue' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:150-184
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 150 ┌       - name: catalogue
 151 │         image: weaveworksdemos/catalogue:0.3.5
 152 │         command: ["/app"]
 153 │         args:
 154 │         - -port=80
 155 │         resources:
 156 │           limits:
 157 │             cpu: 200m
 158 └             memory: 200Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:223-232
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 223 ┌       - name: catalogue-db
 224 │         image: weaveworksdemos/catalogue-db:0.3.0
 225 │         env:
 226 │           - name: MYSQL_ROOT_PASSWORD
 227 │             value: fake_password
 228 │           - name: MYSQL_DATABASE
 229 │             value: socksdb
 230 │         ports:
 231 │         - name: mysql
 232 └           containerPort: 3306
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'front-end' of Deployment 'front-end' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:267-299
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 267 ┌       - name: front-end
 268 │         image: weaveworksdemos/front-end:0.3.12
 269 │         resources:
 270 │           limits:
 271 │             cpu: 300m
 272 │             memory: 1000Mi
 273 │           requests:
 274 │             cpu: 100m
 275 └             memory: 300Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'orders' of Deployment 'orders' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:339-364
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 339 ┌       - name: orders
 340 │         image: weaveworksdemos/orders:0.4.7
 341 │         env:
 342 │          - name: JAVA_OPTS
 343 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
 344 │         resources:
 345 │           limits:
 346 │             cpu: 500m
 347 └             memory: 500Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:407-423
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 407 ┌       - name: orders-db
 408 │         image: mongo
 409 │         ports:
 410 │         - name: mongo
 411 │           containerPort: 27017
 412 │         securityContext:
 413 │           capabilities:
 414 │             drop:
 415 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'payment' of Deployment 'payment' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:464-495
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 464 ┌       - name: payment
 465 │         image: weaveworksdemos/payment:0.4.3
 466 │         resources:
 467 │           limits:
 468 │             cpu: 200m
 469 │             memory: 200Mi
 470 │           requests:
 471 │             cpu: 99m
 472 └             memory: 100Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:534-547
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 534 ┌       - name: queue-master
 535 │         image: weaveworksdemos/queue-master:0.3.1
 536 │         env:
 537 │          - name: JAVA_OPTS
 538 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
 539 │         resources:
 540 │           limits:
 541 │             cpu: 300m
 542 └             memory: 500Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:588-604
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 588 ┌       - name: rabbitmq
 589 │         image: rabbitmq:3.6.8-management
 590 │         ports:
 591 │         - containerPort: 15672
 592 │           name: management
 593 │         - containerPort: 5672
 594 │           name: rabbitmq
 595 │         securityContext:
 596 └           capabilities:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:605-609
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 605 ┌       - name: rabbitmq-exporter
 606 │         image: kbudde/rabbitmq-exporter
 607 │         ports:
 608 │         - containerPort: 9090
 609 └           name: exporter
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'session-db' of Deployment 'session-db' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:656-669
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 656 ┌       - name: session-db
 657 │         image: redis:alpine
 658 │         ports:
 659 │         - name: redis
 660 │           containerPort: 6379
 661 │         securityContext:
 662 │           capabilities:
 663 │             drop:
 664 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'shipping' of Deployment 'shipping' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:706-733
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 706 ┌       - name: shipping
 707 │         image: weaveworksdemos/shipping:0.4.8
 708 │         env:
 709 │          - name: ZIPKIN
 710 │            value: zipkin.jaeger.svc.cluster.local
 711 │          - name: JAVA_OPTS
 712 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
 713 │         resources:
 714 └           limits:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'user' of Deployment 'user' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:777-811
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 777 ┌       - name: user
 778 │         image: weaveworksdemos/user:0.4.7
 779 │         resources:
 780 │           limits:
 781 │             cpu: 300m
 782 │             memory: 200Mi
 783 │           requests:
 784 │             cpu: 100m
 785 └             memory: 100Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'user-db' of Deployment 'user-db' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:851-868
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 851 ┌       - name: user-db
 852 │         image: weaveworksdemos/user-db:0.3.0
 853 │ 
 854 │         ports:
 855 │         - name: mongo
 856 │           containerPort: 27017
 857 │         securityContext:
 858 │           capabilities:
 859 └             drop:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'catalogue-db' of Deployment 'catalogue-db' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:223-232
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 223 ┌       - name: catalogue-db
 224 │         image: weaveworksdemos/catalogue-db:0.3.0
 225 │         env:
 226 │           - name: MYSQL_ROOT_PASSWORD
 227 │             value: fake_password
 228 │           - name: MYSQL_DATABASE
 229 │             value: socksdb
 230 │         ports:
 231 │         - name: mysql
 232 └           containerPort: 3306
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'queue-master' of Deployment 'queue-master' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:534-547
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 534 ┌       - name: queue-master
 535 │         image: weaveworksdemos/queue-master:0.3.1
 536 │         env:
 537 │          - name: JAVA_OPTS
 538 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
 539 │         resources:
 540 │           limits:
 541 │             cpu: 300m
 542 └             memory: 500Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:605-609
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 605 ┌       - name: rabbitmq-exporter
 606 │         image: kbudde/rabbitmq-exporter
 607 │         ports:
 608 │         - containerPort: 9090
 609 └           name: exporter
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'carts-db' of Deployment 'carts-db' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:93-109
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  93 ┌       - name: carts-db
  94 │         image: mongo
  95 │         ports:
  96 │         - name: mongo
  97 │           containerPort: 27017
  98 │         securityContext:
  99 │           capabilities:
 100 │             drop:
 101 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:223-232
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 223 ┌       - name: catalogue-db
 224 │         image: weaveworksdemos/catalogue-db:0.3.0
 225 │         env:
 226 │           - name: MYSQL_ROOT_PASSWORD
 227 │             value: fake_password
 228 │           - name: MYSQL_DATABASE
 229 │             value: socksdb
 230 │         ports:
 231 │         - name: mysql
 232 └           containerPort: 3306
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'orders-db' of Deployment 'orders-db' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:407-423
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 407 ┌       - name: orders-db
 408 │         image: mongo
 409 │         ports:
 410 │         - name: mongo
 411 │           containerPort: 27017
 412 │         securityContext:
 413 │           capabilities:
 414 │             drop:
 415 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:588-604
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 588 ┌       - name: rabbitmq
 589 │         image: rabbitmq:3.6.8-management
 590 │         ports:
 591 │         - containerPort: 15672
 592 │           name: management
 593 │         - containerPort: 5672
 594 │           name: rabbitmq
 595 │         securityContext:
 596 └           capabilities:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:605-609
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 605 ┌       - name: rabbitmq-exporter
 606 │         image: kbudde/rabbitmq-exporter
 607 │         ports:
 608 │         - containerPort: 9090
 609 └           name: exporter
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'session-db' of Deployment 'session-db' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:656-669
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 656 ┌       - name: session-db
 657 │         image: redis:alpine
 658 │         ports:
 659 │         - name: redis
 660 │           containerPort: 6379
 661 │         securityContext:
 662 │           capabilities:
 663 │             drop:
 664 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'user-db' of Deployment 'user-db' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:851-868
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 851 ┌       - name: user-db
 852 │         image: weaveworksdemos/user-db:0.3.0
 853 │ 
 854 │         ports:
 855 │         - name: mongo
 856 │           containerPort: 27017
 857 │         securityContext:
 858 │           capabilities:
 859 └             drop:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:93-109
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  93 ┌       - name: carts-db
  94 │         image: mongo
  95 │         ports:
  96 │         - name: mongo
  97 │           containerPort: 27017
  98 │         securityContext:
  99 │           capabilities:
 100 │             drop:
 101 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:223-232
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 223 ┌       - name: catalogue-db
 224 │         image: weaveworksdemos/catalogue-db:0.3.0
 225 │         env:
 226 │           - name: MYSQL_ROOT_PASSWORD
 227 │             value: fake_password
 228 │           - name: MYSQL_DATABASE
 229 │             value: socksdb
 230 │         ports:
 231 │         - name: mysql
 232 └           containerPort: 3306
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:407-423
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 407 ┌       - name: orders-db
 408 │         image: mongo
 409 │         ports:
 410 │         - name: mongo
 411 │           containerPort: 27017
 412 │         securityContext:
 413 │           capabilities:
 414 │             drop:
 415 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:534-547
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 534 ┌       - name: queue-master
 535 │         image: weaveworksdemos/queue-master:0.3.1
 536 │         env:
 537 │          - name: JAVA_OPTS
 538 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
 539 │         resources:
 540 │           limits:
 541 │             cpu: 300m
 542 └             memory: 500Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:588-604
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 588 ┌       - name: rabbitmq
 589 │         image: rabbitmq:3.6.8-management
 590 │         ports:
 591 │         - containerPort: 15672
 592 │           name: management
 593 │         - containerPort: 5672
 594 │           name: rabbitmq
 595 │         securityContext:
 596 └           capabilities:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:605-609
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 605 ┌       - name: rabbitmq-exporter
 606 │         image: kbudde/rabbitmq-exporter
 607 │         ports:
 608 │         - containerPort: 9090
 609 └           name: exporter
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'session-db' of Deployment 'session-db' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:656-669
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 656 ┌       - name: session-db
 657 │         image: redis:alpine
 658 │         ports:
 659 │         - name: redis
 660 │           containerPort: 6379
 661 │         securityContext:
 662 │           capabilities:
 663 │             drop:
 664 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'user-db' of Deployment 'user-db' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:851-868
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 851 ┌       - name: user-db
 852 │         image: weaveworksdemos/user-db:0.3.0
 853 │ 
 854 │         ports:
 855 │         - name: mongo
 856 │           containerPort: 27017
 857 │         securityContext:
 858 │           capabilities:
 859 └             drop:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'carts-db' of Deployment 'carts-db' should specify an image tag
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:93-109
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  93 ┌       - name: carts-db
  94 │         image: mongo
  95 │         ports:
  96 │         - name: mongo
  97 │           containerPort: 27017
  98 │         securityContext:
  99 │           capabilities:
 100 │             drop:
 101 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'orders-db' of Deployment 'orders-db' should specify an image tag
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:407-423
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 407 ┌       - name: orders-db
 408 │         image: mongo
 409 │         ports:
 410 │         - name: mongo
 411 │           containerPort: 27017
 412 │         securityContext:
 413 │           capabilities:
 414 │             drop:
 415 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should specify an image tag
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:605-609
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 605 ┌       - name: rabbitmq-exporter
 606 │         image: kbudde/rabbitmq-exporter
 607 │         ports:
 608 │         - containerPort: 9090
 609 └           name: exporter
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:223-232
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 223 ┌       - name: catalogue-db
 224 │         image: weaveworksdemos/catalogue-db:0.3.0
 225 │         env:
 226 │           - name: MYSQL_ROOT_PASSWORD
 227 │             value: fake_password
 228 │           - name: MYSQL_DATABASE
 229 │             value: socksdb
 230 │         ports:
 231 │         - name: mysql
 232 └           containerPort: 3306
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:534-547
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 534 ┌       - name: queue-master
 535 │         image: weaveworksdemos/queue-master:0.3.1
 536 │         env:
 537 │          - name: JAVA_OPTS
 538 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
 539 │         resources:
 540 │           limits:
 541 │             cpu: 300m
 542 └             memory: 500Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:605-609
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 605 ┌       - name: rabbitmq-exporter
 606 │         image: kbudde/rabbitmq-exporter
 607 │         ports:
 608 │         - containerPort: 9090
 609 └           name: exporter
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'carts-db' of Deployment 'carts-db' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:93-109
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  93 ┌       - name: carts-db
  94 │         image: mongo
  95 │         ports:
  96 │         - name: mongo
  97 │           containerPort: 27017
  98 │         securityContext:
  99 │           capabilities:
 100 │             drop:
 101 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:223-232
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 223 ┌       - name: catalogue-db
 224 │         image: weaveworksdemos/catalogue-db:0.3.0
 225 │         env:
 226 │           - name: MYSQL_ROOT_PASSWORD
 227 │             value: fake_password
 228 │           - name: MYSQL_DATABASE
 229 │             value: socksdb
 230 │         ports:
 231 │         - name: mysql
 232 └           containerPort: 3306
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'orders-db' of Deployment 'orders-db' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:407-423
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 407 ┌       - name: orders-db
 408 │         image: mongo
 409 │         ports:
 410 │         - name: mongo
 411 │           containerPort: 27017
 412 │         securityContext:
 413 │           capabilities:
 414 │             drop:
 415 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:588-604
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 588 ┌       - name: rabbitmq
 589 │         image: rabbitmq:3.6.8-management
 590 │         ports:
 591 │         - containerPort: 15672
 592 │           name: management
 593 │         - containerPort: 5672
 594 │           name: rabbitmq
 595 │         securityContext:
 596 └           capabilities:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:605-609
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 605 ┌       - name: rabbitmq-exporter
 606 │         image: kbudde/rabbitmq-exporter
 607 │         ports:
 608 │         - containerPort: 9090
 609 └           name: exporter
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'session-db' of Deployment 'session-db' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:656-669
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 656 ┌       - name: session-db
 657 │         image: redis:alpine
 658 │         ports:
 659 │         - name: redis
 660 │           containerPort: 6379
 661 │         securityContext:
 662 │           capabilities:
 663 │             drop:
 664 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'user-db' of Deployment 'user-db' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:851-868
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 851 ┌       - name: user-db
 852 │         image: weaveworksdemos/user-db:0.3.0
 853 │ 
 854 │         ports:
 855 │         - name: mongo
 856 │           containerPort: 27017
 857 │         securityContext:
 858 │           capabilities:
 859 └             drop:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'carts-db' of Deployment 'carts-db' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:93-109
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  93 ┌       - name: carts-db
  94 │         image: mongo
  95 │         ports:
  96 │         - name: mongo
  97 │           containerPort: 27017
  98 │         securityContext:
  99 │           capabilities:
 100 │             drop:
 101 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:223-232
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 223 ┌       - name: catalogue-db
 224 │         image: weaveworksdemos/catalogue-db:0.3.0
 225 │         env:
 226 │           - name: MYSQL_ROOT_PASSWORD
 227 │             value: fake_password
 228 │           - name: MYSQL_DATABASE
 229 │             value: socksdb
 230 │         ports:
 231 │         - name: mysql
 232 └           containerPort: 3306
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'orders-db' of Deployment 'orders-db' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:407-423
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 407 ┌       - name: orders-db
 408 │         image: mongo
 409 │         ports:
 410 │         - name: mongo
 411 │           containerPort: 27017
 412 │         securityContext:
 413 │           capabilities:
 414 │             drop:
 415 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:588-604
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 588 ┌       - name: rabbitmq
 589 │         image: rabbitmq:3.6.8-management
 590 │         ports:
 591 │         - containerPort: 15672
 592 │           name: management
 593 │         - containerPort: 5672
 594 │           name: rabbitmq
 595 │         securityContext:
 596 └           capabilities:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:605-609
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 605 ┌       - name: rabbitmq-exporter
 606 │         image: kbudde/rabbitmq-exporter
 607 │         ports:
 608 │         - containerPort: 9090
 609 └           name: exporter
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'session-db' of Deployment 'session-db' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:656-669
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 656 ┌       - name: session-db
 657 │         image: redis:alpine
 658 │         ports:
 659 │         - name: redis
 660 │           containerPort: 6379
 661 │         securityContext:
 662 │           capabilities:
 663 │             drop:
 664 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'user-db' of Deployment 'user-db' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:851-868
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 851 ┌       - name: user-db
 852 │         image: weaveworksdemos/user-db:0.3.0
 853 │ 
 854 │         ports:
 855 │         - name: mongo
 856 │           containerPort: 27017
 857 │         securityContext:
 858 │           capabilities:
 859 └             drop:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'carts-db' of Deployment 'carts-db' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:93-109
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  93 ┌       - name: carts-db
  94 │         image: mongo
  95 │         ports:
  96 │         - name: mongo
  97 │           containerPort: 27017
  98 │         securityContext:
  99 │           capabilities:
 100 │             drop:
 101 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:223-232
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 223 ┌       - name: catalogue-db
 224 │         image: weaveworksdemos/catalogue-db:0.3.0
 225 │         env:
 226 │           - name: MYSQL_ROOT_PASSWORD
 227 │             value: fake_password
 228 │           - name: MYSQL_DATABASE
 229 │             value: socksdb
 230 │         ports:
 231 │         - name: mysql
 232 └           containerPort: 3306
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'orders-db' of Deployment 'orders-db' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:407-423
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 407 ┌       - name: orders-db
 408 │         image: mongo
 409 │         ports:
 410 │         - name: mongo
 411 │           containerPort: 27017
 412 │         securityContext:
 413 │           capabilities:
 414 │             drop:
 415 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:588-604
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 588 ┌       - name: rabbitmq
 589 │         image: rabbitmq:3.6.8-management
 590 │         ports:
 591 │         - containerPort: 15672
 592 │           name: management
 593 │         - containerPort: 5672
 594 │           name: rabbitmq
 595 │         securityContext:
 596 └           capabilities:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:605-609
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 605 ┌       - name: rabbitmq-exporter
 606 │         image: kbudde/rabbitmq-exporter
 607 │         ports:
 608 │         - containerPort: 9090
 609 └           name: exporter
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'session-db' of Deployment 'session-db' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:656-669
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 656 ┌       - name: session-db
 657 │         image: redis:alpine
 658 │         ports:
 659 │         - name: redis
 660 │           containerPort: 6379
 661 │         securityContext:
 662 │           capabilities:
 663 │             drop:
 664 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'user-db' of Deployment 'user-db' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:851-868
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 851 ┌       - name: user-db
 852 │         image: weaveworksdemos/user-db:0.3.0
 853 │ 
 854 │         ports:
 855 │         - name: mongo
 856 │           containerPort: 27017
 857 │         securityContext:
 858 │           capabilities:
 859 └             drop:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:93-109
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  93 ┌       - name: carts-db
  94 │         image: mongo
  95 │         ports:
  96 │         - name: mongo
  97 │           containerPort: 27017
  98 │         securityContext:
  99 │           capabilities:
 100 │             drop:
 101 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:223-232
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 223 ┌       - name: catalogue-db
 224 │         image: weaveworksdemos/catalogue-db:0.3.0
 225 │         env:
 226 │           - name: MYSQL_ROOT_PASSWORD
 227 │             value: fake_password
 228 │           - name: MYSQL_DATABASE
 229 │             value: socksdb
 230 │         ports:
 231 │         - name: mysql
 232 └           containerPort: 3306
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:407-423
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 407 ┌       - name: orders-db
 408 │         image: mongo
 409 │         ports:
 410 │         - name: mongo
 411 │           containerPort: 27017
 412 │         securityContext:
 413 │           capabilities:
 414 │             drop:
 415 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:534-547
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 534 ┌       - name: queue-master
 535 │         image: weaveworksdemos/queue-master:0.3.1
 536 │         env:
 537 │          - name: JAVA_OPTS
 538 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
 539 │         resources:
 540 │           limits:
 541 │             cpu: 300m
 542 └             memory: 500Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:588-604
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 588 ┌       - name: rabbitmq
 589 │         image: rabbitmq:3.6.8-management
 590 │         ports:
 591 │         - containerPort: 15672
 592 │           name: management
 593 │         - containerPort: 5672
 594 │           name: rabbitmq
 595 │         securityContext:
 596 └           capabilities:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:605-609
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 605 ┌       - name: rabbitmq-exporter
 606 │         image: kbudde/rabbitmq-exporter
 607 │         ports:
 608 │         - containerPort: 9090
 609 └           name: exporter
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'session-db' of Deployment 'session-db' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:656-669
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 656 ┌       - name: session-db
 657 │         image: redis:alpine
 658 │         ports:
 659 │         - name: redis
 660 │           containerPort: 6379
 661 │         securityContext:
 662 │           capabilities:
 663 │             drop:
 664 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'user-db' of Deployment 'user-db' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:851-868
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 851 ┌       - name: user-db
 852 │         image: weaveworksdemos/user-db:0.3.0
 853 │ 
 854 │         ports:
 855 │         - name: mongo
 856 │           containerPort: 27017
 857 │         securityContext:
 858 │           capabilities:
 859 └             drop:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'carts' of Deployment 'carts' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:25-50
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌       - name: carts
  26 │         image: weaveworksdemos/carts:0.4.8
  27 │         env:
  28 │          - name: JAVA_OPTS
  29 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  30 │         resources:
  31 │           limits:
  32 │             cpu: 300m
  33 └             memory: 500Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:93-109
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  93 ┌       - name: carts-db
  94 │         image: mongo
  95 │         ports:
  96 │         - name: mongo
  97 │           containerPort: 27017
  98 │         securityContext:
  99 │           capabilities:
 100 │             drop:
 101 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'catalogue' of Deployment 'catalogue' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:150-184
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 150 ┌       - name: catalogue
 151 │         image: weaveworksdemos/catalogue:0.3.5
 152 │         command: ["/app"]
 153 │         args:
 154 │         - -port=80
 155 │         resources:
 156 │           limits:
 157 │             cpu: 200m
 158 └             memory: 200Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:223-232
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 223 ┌       - name: catalogue-db
 224 │         image: weaveworksdemos/catalogue-db:0.3.0
 225 │         env:
 226 │           - name: MYSQL_ROOT_PASSWORD
 227 │             value: fake_password
 228 │           - name: MYSQL_DATABASE
 229 │             value: socksdb
 230 │         ports:
 231 │         - name: mysql
 232 └           containerPort: 3306
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'front-end' of Deployment 'front-end' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:267-299
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 267 ┌       - name: front-end
 268 │         image: weaveworksdemos/front-end:0.3.12
 269 │         resources:
 270 │           limits:
 271 │             cpu: 300m
 272 │             memory: 1000Mi
 273 │           requests:
 274 │             cpu: 100m
 275 └             memory: 300Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'orders' of Deployment 'orders' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:339-364
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 339 ┌       - name: orders
 340 │         image: weaveworksdemos/orders:0.4.7
 341 │         env:
 342 │          - name: JAVA_OPTS
 343 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
 344 │         resources:
 345 │           limits:
 346 │             cpu: 500m
 347 └             memory: 500Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:407-423
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 407 ┌       - name: orders-db
 408 │         image: mongo
 409 │         ports:
 410 │         - name: mongo
 411 │           containerPort: 27017
 412 │         securityContext:
 413 │           capabilities:
 414 │             drop:
 415 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'payment' of Deployment 'payment' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:464-495
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 464 ┌       - name: payment
 465 │         image: weaveworksdemos/payment:0.4.3
 466 │         resources:
 467 │           limits:
 468 │             cpu: 200m
 469 │             memory: 200Mi
 470 │           requests:
 471 │             cpu: 99m
 472 └             memory: 100Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:534-547
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 534 ┌       - name: queue-master
 535 │         image: weaveworksdemos/queue-master:0.3.1
 536 │         env:
 537 │          - name: JAVA_OPTS
 538 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
 539 │         resources:
 540 │           limits:
 541 │             cpu: 300m
 542 └             memory: 500Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:588-604
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 588 ┌       - name: rabbitmq
 589 │         image: rabbitmq:3.6.8-management
 590 │         ports:
 591 │         - containerPort: 15672
 592 │           name: management
 593 │         - containerPort: 5672
 594 │           name: rabbitmq
 595 │         securityContext:
 596 └           capabilities:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:605-609
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 605 ┌       - name: rabbitmq-exporter
 606 │         image: kbudde/rabbitmq-exporter
 607 │         ports:
 608 │         - containerPort: 9090
 609 └           name: exporter
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'session-db' of Deployment 'session-db' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:656-669
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 656 ┌       - name: session-db
 657 │         image: redis:alpine
 658 │         ports:
 659 │         - name: redis
 660 │           containerPort: 6379
 661 │         securityContext:
 662 │           capabilities:
 663 │             drop:
 664 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'shipping' of Deployment 'shipping' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:706-733
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 706 ┌       - name: shipping
 707 │         image: weaveworksdemos/shipping:0.4.8
 708 │         env:
 709 │          - name: ZIPKIN
 710 │            value: zipkin.jaeger.svc.cluster.local
 711 │          - name: JAVA_OPTS
 712 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
 713 │         resources:
 714 └           limits:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'user' of Deployment 'user' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:777-811
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 777 ┌       - name: user
 778 │         image: weaveworksdemos/user:0.4.7
 779 │         resources:
 780 │           limits:
 781 │             cpu: 300m
 782 │             memory: 200Mi
 783 │           requests:
 784 │             cpu: 100m
 785 └             memory: 100Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'user-db' of Deployment 'user-db' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:851-868
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 851 ┌       - name: user-db
 852 │         image: weaveworksdemos/user-db:0.3.0
 853 │ 
 854 │         ports:
 855 │         - name: mongo
 856 │           containerPort: 27017
 857 │         securityContext:
 858 │           capabilities:
 859 └             drop:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'carts' of Deployment 'carts' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Adding NET_RAW or capabilities beyond the default set must be disallowed.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:25-50
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌       - name: carts
  26 │         image: weaveworksdemos/carts:0.4.8
  27 │         env:
  28 │          - name: JAVA_OPTS
  29 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  30 │         resources:
  31 │           limits:
  32 │             cpu: 300m
  33 └             memory: 500Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'carts-db' of Deployment 'carts-db' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Adding NET_RAW or capabilities beyond the default set must be disallowed.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:93-109
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  93 ┌       - name: carts-db
  94 │         image: mongo
  95 │         ports:
  96 │         - name: mongo
  97 │           containerPort: 27017
  98 │         securityContext:
  99 │           capabilities:
 100 │             drop:
 101 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'catalogue' of Deployment 'catalogue' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Adding NET_RAW or capabilities beyond the default set must be disallowed.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:150-184
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 150 ┌       - name: catalogue
 151 │         image: weaveworksdemos/catalogue:0.3.5
 152 │         command: ["/app"]
 153 │         args:
 154 │         - -port=80
 155 │         resources:
 156 │           limits:
 157 │             cpu: 200m
 158 └             memory: 200Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'orders' of Deployment 'orders' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Adding NET_RAW or capabilities beyond the default set must be disallowed.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:339-364
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 339 ┌       - name: orders
 340 │         image: weaveworksdemos/orders:0.4.7
 341 │         env:
 342 │          - name: JAVA_OPTS
 343 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
 344 │         resources:
 345 │           limits:
 346 │             cpu: 500m
 347 └             memory: 500Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'orders-db' of Deployment 'orders-db' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Adding NET_RAW or capabilities beyond the default set must be disallowed.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:407-423
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 407 ┌       - name: orders-db
 408 │         image: mongo
 409 │         ports:
 410 │         - name: mongo
 411 │           containerPort: 27017
 412 │         securityContext:
 413 │           capabilities:
 414 │             drop:
 415 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'payment' of Deployment 'payment' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Adding NET_RAW or capabilities beyond the default set must be disallowed.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:464-495
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 464 ┌       - name: payment
 465 │         image: weaveworksdemos/payment:0.4.3
 466 │         resources:
 467 │           limits:
 468 │             cpu: 200m
 469 │             memory: 200Mi
 470 │           requests:
 471 │             cpu: 99m
 472 └             memory: 100Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'rabbitmq' of Deployment 'rabbitmq' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Adding NET_RAW or capabilities beyond the default set must be disallowed.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:588-604
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 588 ┌       - name: rabbitmq
 589 │         image: rabbitmq:3.6.8-management
 590 │         ports:
 591 │         - containerPort: 15672
 592 │           name: management
 593 │         - containerPort: 5672
 594 │           name: rabbitmq
 595 │         securityContext:
 596 └           capabilities:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'session-db' of Deployment 'session-db' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Adding NET_RAW or capabilities beyond the default set must be disallowed.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:656-669
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 656 ┌       - name: session-db
 657 │         image: redis:alpine
 658 │         ports:
 659 │         - name: redis
 660 │           containerPort: 6379
 661 │         securityContext:
 662 │           capabilities:
 663 │             drop:
 664 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'shipping' of Deployment 'shipping' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Adding NET_RAW or capabilities beyond the default set must be disallowed.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:706-733
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 706 ┌       - name: shipping
 707 │         image: weaveworksdemos/shipping:0.4.8
 708 │         env:
 709 │          - name: ZIPKIN
 710 │            value: zipkin.jaeger.svc.cluster.local
 711 │          - name: JAVA_OPTS
 712 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
 713 │         resources:
 714 └           limits:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'user' of Deployment 'user' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Adding NET_RAW or capabilities beyond the default set must be disallowed.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:777-811
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 777 ┌       - name: user
 778 │         image: weaveworksdemos/user:0.4.7
 779 │         resources:
 780 │           limits:
 781 │             cpu: 300m
 782 │             memory: 200Mi
 783 │           requests:
 784 │             cpu: 100m
 785 └             memory: 100Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'user-db' of Deployment 'user-db' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Adding NET_RAW or capabilities beyond the default set must be disallowed.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:851-868
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 851 ┌       - name: user-db
 852 │         image: weaveworksdemos/user-db:0.3.0
 853 │ 
 854 │         ports:
 855 │         - name: mongo
 856 │           containerPort: 27017
 857 │         securityContext:
 858 │           capabilities:
 859 └             drop:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:25-50
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌       - name: carts
  26 │         image: weaveworksdemos/carts:0.4.8
  27 │         env:
  28 │          - name: JAVA_OPTS
  29 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  30 │         resources:
  31 │           limits:
  32 │             cpu: 300m
  33 └             memory: 500Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:93-109
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  93 ┌       - name: carts-db
  94 │         image: mongo
  95 │         ports:
  96 │         - name: mongo
  97 │           containerPort: 27017
  98 │         securityContext:
  99 │           capabilities:
 100 │             drop:
 101 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:150-184
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 150 ┌       - name: catalogue
 151 │         image: weaveworksdemos/catalogue:0.3.5
 152 │         command: ["/app"]
 153 │         args:
 154 │         - -port=80
 155 │         resources:
 156 │           limits:
 157 │             cpu: 200m
 158 └             memory: 200Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:223-232
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 223 ┌       - name: catalogue-db
 224 │         image: weaveworksdemos/catalogue-db:0.3.0
 225 │         env:
 226 │           - name: MYSQL_ROOT_PASSWORD
 227 │             value: fake_password
 228 │           - name: MYSQL_DATABASE
 229 │             value: socksdb
 230 │         ports:
 231 │         - name: mysql
 232 └           containerPort: 3306
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:267-299
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 267 ┌       - name: front-end
 268 │         image: weaveworksdemos/front-end:0.3.12
 269 │         resources:
 270 │           limits:
 271 │             cpu: 300m
 272 │             memory: 1000Mi
 273 │           requests:
 274 │             cpu: 100m
 275 └             memory: 300Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:339-364
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 339 ┌       - name: orders
 340 │         image: weaveworksdemos/orders:0.4.7
 341 │         env:
 342 │          - name: JAVA_OPTS
 343 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
 344 │         resources:
 345 │           limits:
 346 │             cpu: 500m
 347 └             memory: 500Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:407-423
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 407 ┌       - name: orders-db
 408 │         image: mongo
 409 │         ports:
 410 │         - name: mongo
 411 │           containerPort: 27017
 412 │         securityContext:
 413 │           capabilities:
 414 │             drop:
 415 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:464-495
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 464 ┌       - name: payment
 465 │         image: weaveworksdemos/payment:0.4.3
 466 │         resources:
 467 │           limits:
 468 │             cpu: 200m
 469 │             memory: 200Mi
 470 │           requests:
 471 │             cpu: 99m
 472 └             memory: 100Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:534-547
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 534 ┌       - name: queue-master
 535 │         image: weaveworksdemos/queue-master:0.3.1
 536 │         env:
 537 │          - name: JAVA_OPTS
 538 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
 539 │         resources:
 540 │           limits:
 541 │             cpu: 300m
 542 └             memory: 500Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:588-604
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 588 ┌       - name: rabbitmq
 589 │         image: rabbitmq:3.6.8-management
 590 │         ports:
 591 │         - containerPort: 15672
 592 │           name: management
 593 │         - containerPort: 5672
 594 │           name: rabbitmq
 595 │         securityContext:
 596 └           capabilities:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:605-609
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 605 ┌       - name: rabbitmq-exporter
 606 │         image: kbudde/rabbitmq-exporter
 607 │         ports:
 608 │         - containerPort: 9090
 609 └           name: exporter
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:656-669
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 656 ┌       - name: session-db
 657 │         image: redis:alpine
 658 │         ports:
 659 │         - name: redis
 660 │           containerPort: 6379
 661 │         securityContext:
 662 │           capabilities:
 663 │             drop:
 664 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:706-733
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 706 ┌       - name: shipping
 707 │         image: weaveworksdemos/shipping:0.4.8
 708 │         env:
 709 │          - name: ZIPKIN
 710 │            value: zipkin.jaeger.svc.cluster.local
 711 │          - name: JAVA_OPTS
 712 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
 713 │         resources:
 714 └           limits:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:777-811
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 777 ┌       - name: user
 778 │         image: weaveworksdemos/user:0.4.7
 779 │         resources:
 780 │           limits:
 781 │             cpu: 300m
 782 │             memory: 200Mi
 783 │           requests:
 784 │             cpu: 100m
 785 └             memory: 100Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:851-868
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 851 ┌       - name: user-db
 852 │         image: weaveworksdemos/user-db:0.3.0
 853 │ 
 854 │         ports:
 855 │         - name: mongo
 856 │           containerPort: 27017
 857 │         securityContext:
 858 │           capabilities:
 859 └             drop:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:25-50
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌       - name: carts
  26 │         image: weaveworksdemos/carts:0.4.8
  27 │         env:
  28 │          - name: JAVA_OPTS
  29 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  30 │         resources:
  31 │           limits:
  32 │             cpu: 300m
  33 └             memory: 500Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:93-109
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  93 ┌       - name: carts-db
  94 │         image: mongo
  95 │         ports:
  96 │         - name: mongo
  97 │           containerPort: 27017
  98 │         securityContext:
  99 │           capabilities:
 100 │             drop:
 101 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:150-184
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 150 ┌       - name: catalogue
 151 │         image: weaveworksdemos/catalogue:0.3.5
 152 │         command: ["/app"]
 153 │         args:
 154 │         - -port=80
 155 │         resources:
 156 │           limits:
 157 │             cpu: 200m
 158 └             memory: 200Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:223-232
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 223 ┌       - name: catalogue-db
 224 │         image: weaveworksdemos/catalogue-db:0.3.0
 225 │         env:
 226 │           - name: MYSQL_ROOT_PASSWORD
 227 │             value: fake_password
 228 │           - name: MYSQL_DATABASE
 229 │             value: socksdb
 230 │         ports:
 231 │         - name: mysql
 232 └           containerPort: 3306
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:267-299
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 267 ┌       - name: front-end
 268 │         image: weaveworksdemos/front-end:0.3.12
 269 │         resources:
 270 │           limits:
 271 │             cpu: 300m
 272 │             memory: 1000Mi
 273 │           requests:
 274 │             cpu: 100m
 275 └             memory: 300Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:339-364
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 339 ┌       - name: orders
 340 │         image: weaveworksdemos/orders:0.4.7
 341 │         env:
 342 │          - name: JAVA_OPTS
 343 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
 344 │         resources:
 345 │           limits:
 346 │             cpu: 500m
 347 └             memory: 500Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:407-423
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 407 ┌       - name: orders-db
 408 │         image: mongo
 409 │         ports:
 410 │         - name: mongo
 411 │           containerPort: 27017
 412 │         securityContext:
 413 │           capabilities:
 414 │             drop:
 415 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:464-495
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 464 ┌       - name: payment
 465 │         image: weaveworksdemos/payment:0.4.3
 466 │         resources:
 467 │           limits:
 468 │             cpu: 200m
 469 │             memory: 200Mi
 470 │           requests:
 471 │             cpu: 99m
 472 └             memory: 100Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:534-547
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 534 ┌       - name: queue-master
 535 │         image: weaveworksdemos/queue-master:0.3.1
 536 │         env:
 537 │          - name: JAVA_OPTS
 538 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
 539 │         resources:
 540 │           limits:
 541 │             cpu: 300m
 542 └             memory: 500Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:588-604
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 588 ┌       - name: rabbitmq
 589 │         image: rabbitmq:3.6.8-management
 590 │         ports:
 591 │         - containerPort: 15672
 592 │           name: management
 593 │         - containerPort: 5672
 594 │           name: rabbitmq
 595 │         securityContext:
 596 └           capabilities:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:605-609
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 605 ┌       - name: rabbitmq-exporter
 606 │         image: kbudde/rabbitmq-exporter
 607 │         ports:
 608 │         - containerPort: 9090
 609 └           name: exporter
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:656-669
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 656 ┌       - name: session-db
 657 │         image: redis:alpine
 658 │         ports:
 659 │         - name: redis
 660 │           containerPort: 6379
 661 │         securityContext:
 662 │           capabilities:
 663 │             drop:
 664 └               - all
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:706-733
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 706 ┌       - name: shipping
 707 │         image: weaveworksdemos/shipping:0.4.8
 708 │         env:
 709 │          - name: ZIPKIN
 710 │            value: zipkin.jaeger.svc.cluster.local
 711 │          - name: JAVA_OPTS
 712 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
 713 │         resources:
 714 └           limits:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:777-811
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 777 ┌       - name: user
 778 │         image: weaveworksdemos/user:0.4.7
 779 │         resources:
 780 │           limits:
 781 │             cpu: 300m
 782 │             memory: 200Mi
 783 │           requests:
 784 │             cpu: 100m
 785 └             memory: 100Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/complete-demo.yaml:851-868
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 851 ┌       - name: user-db
 852 │         image: weaveworksdemos/user-db:0.3.0
 853 │ 
 854 │         ports:
 855 │         - name: mongo
 856 │           containerPort: 27017
 857 │         securityContext:
 858 │           capabilities:
 859 └             drop:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests-alerting/alertmanager-configmap.yaml (kubernetes)
=============================================================================
Tests: 141 (SUCCESSES: 140, FAILURES: 1, EXCEPTIONS: 0)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: ConfigMap 'alertmanager' in 'default' namespace stores secrets in key(s) or value(s) '{"configure_secret.sh"}'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests-alerting/alertmanager-dep.yaml (kubernetes)
=======================================================================
Tests: 141 (SUCCESSES: 128, FAILURES: 13, EXCEPTIONS: 0)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-alerting/alertmanager-dep.yaml:17-34
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'alertmanager' of Deployment 'alertmanager' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-alerting/alertmanager-dep.yaml:17-34
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'alertmanager' of Deployment 'alertmanager' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-alerting/alertmanager-dep.yaml:17-34
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-alerting/alertmanager-dep.yaml:17-34
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'alertmanager' of Deployment 'alertmanager' should specify an image tag
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-alerting/alertmanager-dep.yaml:17-34
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-alerting/alertmanager-dep.yaml:17-34
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'alertmanager' of Deployment 'alertmanager' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-alerting/alertmanager-dep.yaml:17-34
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'alertmanager' of Deployment 'alertmanager' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-alerting/alertmanager-dep.yaml:17-34
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'alertmanager' of Deployment 'alertmanager' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-alerting/alertmanager-dep.yaml:17-34
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-alerting/alertmanager-dep.yaml:17-34
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-alerting/alertmanager-dep.yaml:17-34
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-alerting/alertmanager-dep.yaml:17-34
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-alerting/alertmanager-dep.yaml:17-34
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests-jaeger/catalogue-dep.yaml (kubernetes)
==================================================================
Tests: 141 (SUCCESSES: 136, FAILURES: 5, EXCEPTIONS: 0)
Failures: 5 (UNKNOWN: 0, LOW: 3, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'catalogue' of Deployment 'catalogue' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-jaeger/catalogue-dep.yaml:20-54
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         env:
  23 │          - name: ZIPKIN
  24 │            value: http://zipkin.jaeger.svc.cluster.local:9411/api/v1/spans
  25 │         resources:
  26 │           limits:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'catalogue' of Deployment 'catalogue' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-jaeger/catalogue-dep.yaml:20-54
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         env:
  23 │          - name: ZIPKIN
  24 │            value: http://zipkin.jaeger.svc.cluster.local:9411/api/v1/spans
  25 │         resources:
  26 │           limits:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'catalogue' of Deployment 'catalogue' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Adding NET_RAW or capabilities beyond the default set must be disallowed.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-jaeger/catalogue-dep.yaml:20-54
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         env:
  23 │          - name: ZIPKIN
  24 │            value: http://zipkin.jaeger.svc.cluster.local:9411/api/v1/spans
  25 │         resources:
  26 │           limits:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-jaeger/catalogue-dep.yaml:20-54
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         env:
  23 │          - name: ZIPKIN
  24 │            value: http://zipkin.jaeger.svc.cluster.local:9411/api/v1/spans
  25 │         resources:
  26 │           limits:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-jaeger/catalogue-dep.yaml:20-54
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         env:
  23 │          - name: ZIPKIN
  24 │            value: http://zipkin.jaeger.svc.cluster.local:9411/api/v1/spans
  25 │         resources:
  26 │           limits:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests-jaeger/payment-dep.yaml (kubernetes)
================================================================
Tests: 141 (SUCCESSES: 136, FAILURES: 5, EXCEPTIONS: 0)
Failures: 5 (UNKNOWN: 0, LOW: 3, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'payment' of Deployment 'payment' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-jaeger/payment-dep.yaml:20-54
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 │             memory: 100Mi
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'payment' of Deployment 'payment' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-jaeger/payment-dep.yaml:20-54
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 │             memory: 100Mi
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'payment' of Deployment 'payment' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Adding NET_RAW or capabilities beyond the default set must be disallowed.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-jaeger/payment-dep.yaml:20-54
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 │             memory: 100Mi
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-jaeger/payment-dep.yaml:20-54
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 │             memory: 100Mi
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-jaeger/payment-dep.yaml:20-54
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 │             memory: 100Mi
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests-jaeger/user-dep.yaml (kubernetes)
=============================================================
Tests: 141 (SUCCESSES: 136, FAILURES: 5, EXCEPTIONS: 0)
Failures: 5 (UNKNOWN: 0, LOW: 3, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'user' of Deployment 'user' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-jaeger/user-dep.yaml:20-56
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: user
  21 │         image: weaveworksdemos/user:0.4.7
  22 │         resources:
  23 │           limits:
  24 │             cpu: 300m
  25 │             memory: 100Mi
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'user' of Deployment 'user' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-jaeger/user-dep.yaml:20-56
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: user
  21 │         image: weaveworksdemos/user:0.4.7
  22 │         resources:
  23 │           limits:
  24 │             cpu: 300m
  25 │             memory: 100Mi
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'user' of Deployment 'user' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Adding NET_RAW or capabilities beyond the default set must be disallowed.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-jaeger/user-dep.yaml:20-56
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: user
  21 │         image: weaveworksdemos/user:0.4.7
  22 │         resources:
  23 │           limits:
  24 │             cpu: 300m
  25 │             memory: 100Mi
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-jaeger/user-dep.yaml:20-56
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: user
  21 │         image: weaveworksdemos/user:0.4.7
  22 │         resources:
  23 │           limits:
  24 │             cpu: 300m
  25 │             memory: 100Mi
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-jaeger/user-dep.yaml:20-56
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: user
  21 │         image: weaveworksdemos/user:0.4.7
  22 │         resources:
  23 │           limits:
  24 │             cpu: 300m
  25 │             memory: 100Mi
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests-loadtest/loadtest-dep.yaml (kubernetes)
===================================================================
Tests: 153 (SUCCESSES: 141, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'load-test' of Deployment 'load-test' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-loadtest/loadtest-dep.yaml:25-28
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌       - name: load-test
  26 │         image: weaveworksdemos/load-test:0.1.1
  27 │         command: ["/bin/sh"]
  28 └         args: ["-c", "while true; do locust --host http://front-end.sock-shop.svc.cluster.local -f /config/locustfile.py --clients 5 --hatch-rate 5 --num-request 100 --no-web; done"]
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'load-test' of Deployment 'load-test' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-loadtest/loadtest-dep.yaml:25-28
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌       - name: load-test
  26 │         image: weaveworksdemos/load-test:0.1.1
  27 │         command: ["/bin/sh"]
  28 └         args: ["-c", "while true; do locust --host http://front-end.sock-shop.svc.cluster.local -f /config/locustfile.py --clients 5 --hatch-rate 5 --num-request 100 --no-web; done"]
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'load-test' of Deployment 'load-test' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-loadtest/loadtest-dep.yaml:25-28
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌       - name: load-test
  26 │         image: weaveworksdemos/load-test:0.1.1
  27 │         command: ["/bin/sh"]
  28 └         args: ["-c", "while true; do locust --host http://front-end.sock-shop.svc.cluster.local -f /config/locustfile.py --clients 5 --hatch-rate 5 --num-request 100 --no-web; done"]
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'load-test' of Deployment 'load-test' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-loadtest/loadtest-dep.yaml:25-28
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌       - name: load-test
  26 │         image: weaveworksdemos/load-test:0.1.1
  27 │         command: ["/bin/sh"]
  28 └         args: ["-c", "while true; do locust --host http://front-end.sock-shop.svc.cluster.local -f /config/locustfile.py --clients 5 --hatch-rate 5 --num-request 100 --no-web; done"]
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'load-test' of Deployment 'load-test' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-loadtest/loadtest-dep.yaml:25-28
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌       - name: load-test
  26 │         image: weaveworksdemos/load-test:0.1.1
  27 │         command: ["/bin/sh"]
  28 └         args: ["-c", "while true; do locust --host http://front-end.sock-shop.svc.cluster.local -f /config/locustfile.py --clients 5 --hatch-rate 5 --num-request 100 --no-web; done"]
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'load-test' of Deployment 'load-test' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-loadtest/loadtest-dep.yaml:25-28
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌       - name: load-test
  26 │         image: weaveworksdemos/load-test:0.1.1
  27 │         command: ["/bin/sh"]
  28 └         args: ["-c", "while true; do locust --host http://front-end.sock-shop.svc.cluster.local -f /config/locustfile.py --clients 5 --hatch-rate 5 --num-request 100 --no-web; done"]
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'load-test' of Deployment 'load-test' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-loadtest/loadtest-dep.yaml:25-28
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌       - name: load-test
  26 │         image: weaveworksdemos/load-test:0.1.1
  27 │         command: ["/bin/sh"]
  28 └         args: ["-c", "while true; do locust --host http://front-end.sock-shop.svc.cluster.local -f /config/locustfile.py --clients 5 --hatch-rate 5 --num-request 100 --no-web; done"]
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'load-test' of Deployment 'load-test' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-loadtest/loadtest-dep.yaml:25-28
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌       - name: load-test
  26 │         image: weaveworksdemos/load-test:0.1.1
  27 │         command: ["/bin/sh"]
  28 └         args: ["-c", "while true; do locust --host http://front-end.sock-shop.svc.cluster.local -f /config/locustfile.py --clients 5 --hatch-rate 5 --num-request 100 --no-web; done"]
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'load-test' of Deployment 'load-test' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-loadtest/loadtest-dep.yaml:25-28
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌       - name: load-test
  26 │         image: weaveworksdemos/load-test:0.1.1
  27 │         command: ["/bin/sh"]
  28 └         args: ["-c", "while true; do locust --host http://front-end.sock-shop.svc.cluster.local -f /config/locustfile.py --clients 5 --hatch-rate 5 --num-request 100 --no-web; done"]
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'load-test' of Deployment 'load-test' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-loadtest/loadtest-dep.yaml:25-28
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌       - name: load-test
  26 │         image: weaveworksdemos/load-test:0.1.1
  27 │         command: ["/bin/sh"]
  28 └         args: ["-c", "while true; do locust --host http://front-end.sock-shop.svc.cluster.local -f /config/locustfile.py --clients 5 --hatch-rate 5 --num-request 100 --no-web; done"]
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-loadtest/loadtest-dep.yaml:25-28
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌       - name: load-test
  26 │         image: weaveworksdemos/load-test:0.1.1
  27 │         command: ["/bin/sh"]
  28 └         args: ["-c", "while true; do locust --host http://front-end.sock-shop.svc.cluster.local -f /config/locustfile.py --clients 5 --hatch-rate 5 --num-request 100 --no-web; done"]
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-loadtest/loadtest-dep.yaml:25-28
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌       - name: load-test
  26 │         image: weaveworksdemos/load-test:0.1.1
  27 │         command: ["/bin/sh"]
  28 └         args: ["-c", "while true; do locust --host http://front-end.sock-shop.svc.cluster.local -f /config/locustfile.py --clients 5 --hatch-rate 5 --num-request 100 --no-web; done"]
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests-logging/elasticsearch.yml (kubernetes)
==================================================================
Tests: 154 (SUCCESSES: 141, FAILURES: 13, EXCEPTIONS: 0)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'elasticsearch' of Deployment 'elasticsearch' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/elasticsearch.yml:20-24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌        - image: elasticsearch
  21 │          name: elasticsearch
  22 │          ports:
  23 │           - name: elasticsearch
  24 └             containerPort: 9200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'elasticsearch' of Deployment 'elasticsearch' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/elasticsearch.yml:20-24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌        - image: elasticsearch
  21 │          name: elasticsearch
  22 │          ports:
  23 │           - name: elasticsearch
  24 └             containerPort: 9200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'elasticsearch' of Deployment 'elasticsearch' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/elasticsearch.yml:20-24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌        - image: elasticsearch
  21 │          name: elasticsearch
  22 │          ports:
  23 │           - name: elasticsearch
  24 └             containerPort: 9200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'elasticsearch' of Deployment 'elasticsearch' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/elasticsearch.yml:20-24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌        - image: elasticsearch
  21 │          name: elasticsearch
  22 │          ports:
  23 │           - name: elasticsearch
  24 └             containerPort: 9200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'elasticsearch' of Deployment 'elasticsearch' should specify an image tag
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/elasticsearch.yml:20-24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌        - image: elasticsearch
  21 │          name: elasticsearch
  22 │          ports:
  23 │           - name: elasticsearch
  24 └             containerPort: 9200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'elasticsearch' of Deployment 'elasticsearch' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/elasticsearch.yml:20-24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌        - image: elasticsearch
  21 │          name: elasticsearch
  22 │          ports:
  23 │           - name: elasticsearch
  24 └             containerPort: 9200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'elasticsearch' of Deployment 'elasticsearch' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/elasticsearch.yml:20-24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌        - image: elasticsearch
  21 │          name: elasticsearch
  22 │          ports:
  23 │           - name: elasticsearch
  24 └             containerPort: 9200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'elasticsearch' of Deployment 'elasticsearch' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/elasticsearch.yml:20-24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌        - image: elasticsearch
  21 │          name: elasticsearch
  22 │          ports:
  23 │           - name: elasticsearch
  24 └             containerPort: 9200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'elasticsearch' of Deployment 'elasticsearch' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/elasticsearch.yml:20-24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌        - image: elasticsearch
  21 │          name: elasticsearch
  22 │          ports:
  23 │           - name: elasticsearch
  24 └             containerPort: 9200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'elasticsearch' of Deployment 'elasticsearch' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/elasticsearch.yml:20-24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌        - image: elasticsearch
  21 │          name: elasticsearch
  22 │          ports:
  23 │           - name: elasticsearch
  24 └             containerPort: 9200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'elasticsearch' of Deployment 'elasticsearch' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/elasticsearch.yml:20-24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌        - image: elasticsearch
  21 │          name: elasticsearch
  22 │          ports:
  23 │           - name: elasticsearch
  24 └             containerPort: 9200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/elasticsearch.yml:20-24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌        - image: elasticsearch
  21 │          name: elasticsearch
  22 │          ports:
  23 │           - name: elasticsearch
  24 └             containerPort: 9200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/elasticsearch.yml:20-24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌        - image: elasticsearch
  21 │          name: elasticsearch
  22 │          ports:
  23 │           - name: elasticsearch
  24 └             containerPort: 9200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests-logging/fluentd-cr.yml (kubernetes)
===============================================================
Tests: 141 (SUCCESSES: 140, FAILURES: 1, EXCEPTIONS: 0)
Failures: 1 (UNKNOWN: 1, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

UNKNOWN: apiVersion 'rbac.authorization.k8s.io/v1beta1' and kind ‘ClusterRole' should be replaced with the new API 'rbac.authorization.k8s.io.v1.ClusterRole'
See https://github.com/kubernetes/kubernetes/tree/master/staging/src/k8s.io/api/rbac/v1beta1/zz_generated.prerelease-lifecycle.go
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Rego module: data.defsec.kubernetes.KSV107
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/fluentd-cr.yml:2-6
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   2 ┌ apiVersion: rbac.authorization.k8s.io/v1beta1
   3 │ kind: ClusterRole
   4 │ metadata:
   5 │   name: fluentd
   6 └ rules:
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests-logging/fluentd-crb.yml (kubernetes)
================================================================
Tests: 141 (SUCCESSES: 140, FAILURES: 1, EXCEPTIONS: 0)
Failures: 1 (UNKNOWN: 1, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

UNKNOWN: apiVersion 'rbac.authorization.k8s.io/v1beta1' and kind ‘ClusterRoleBinding' should be replaced with the new API 'rbac.authorization.k8s.io.v1.ClusterRoleBinding'
See https://github.com/kubernetes/kubernetes/tree/master/staging/src/k8s.io/api/rbac/v1beta1/zz_generated.prerelease-lifecycle.go
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Rego module: data.defsec.kubernetes.KSV107
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/fluentd-crb.yml:2-6
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   2 ┌ apiVersion: rbac.authorization.k8s.io/v1beta1
   3 │ kind: ClusterRoleBinding
   4 │ metadata:
   5 │   name: fluentd
   6 └ roleRef:
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests-logging/fluentd-daemon.yml (kubernetes)
===================================================================
Tests: 141 (SUCCESSES: 127, FAILURES: 14, EXCEPTIONS: 0)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'fluentd' of DaemonSet 'fluentd' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/fluentd-daemon.yml:21-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌        - image: weaveworksdemos/log-server
  22 │          name: fluentd
  23 │          env:
  24 │          - name: FLUENTD_CONF
  25 │            value: elk.conf
  26 │          volumeMounts:
  27 │          - name: varlibdockercontainers
  28 │            mountPath: /var/lib/docker/containers
  29 └            readOnly: true
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'fluentd' of DaemonSet 'fluentd' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/fluentd-daemon.yml:21-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌        - image: weaveworksdemos/log-server
  22 │          name: fluentd
  23 │          env:
  24 │          - name: FLUENTD_CONF
  25 │            value: elk.conf
  26 │          volumeMounts:
  27 │          - name: varlibdockercontainers
  28 │            mountPath: /var/lib/docker/containers
  29 └            readOnly: true
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'fluentd' of DaemonSet 'fluentd' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/fluentd-daemon.yml:21-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌        - image: weaveworksdemos/log-server
  22 │          name: fluentd
  23 │          env:
  24 │          - name: FLUENTD_CONF
  25 │            value: elk.conf
  26 │          volumeMounts:
  27 │          - name: varlibdockercontainers
  28 │            mountPath: /var/lib/docker/containers
  29 └            readOnly: true
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'fluentd' of DaemonSet 'fluentd' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/fluentd-daemon.yml:21-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌        - image: weaveworksdemos/log-server
  22 │          name: fluentd
  23 │          env:
  24 │          - name: FLUENTD_CONF
  25 │            value: elk.conf
  26 │          volumeMounts:
  27 │          - name: varlibdockercontainers
  28 │            mountPath: /var/lib/docker/containers
  29 └            readOnly: true
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'fluentd' of DaemonSet 'fluentd' should specify an image tag
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/fluentd-daemon.yml:21-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌        - image: weaveworksdemos/log-server
  22 │          name: fluentd
  23 │          env:
  24 │          - name: FLUENTD_CONF
  25 │            value: elk.conf
  26 │          volumeMounts:
  27 │          - name: varlibdockercontainers
  28 │            mountPath: /var/lib/docker/containers
  29 └            readOnly: true
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'fluentd' of DaemonSet 'fluentd' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/fluentd-daemon.yml:21-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌        - image: weaveworksdemos/log-server
  22 │          name: fluentd
  23 │          env:
  24 │          - name: FLUENTD_CONF
  25 │            value: elk.conf
  26 │          volumeMounts:
  27 │          - name: varlibdockercontainers
  28 │            mountPath: /var/lib/docker/containers
  29 └            readOnly: true
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'fluentd' of DaemonSet 'fluentd' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/fluentd-daemon.yml:21-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌        - image: weaveworksdemos/log-server
  22 │          name: fluentd
  23 │          env:
  24 │          - name: FLUENTD_CONF
  25 │            value: elk.conf
  26 │          volumeMounts:
  27 │          - name: varlibdockercontainers
  28 │            mountPath: /var/lib/docker/containers
  29 └            readOnly: true
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'fluentd' of DaemonSet 'fluentd' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/fluentd-daemon.yml:21-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌        - image: weaveworksdemos/log-server
  22 │          name: fluentd
  23 │          env:
  24 │          - name: FLUENTD_CONF
  25 │            value: elk.conf
  26 │          volumeMounts:
  27 │          - name: varlibdockercontainers
  28 │            mountPath: /var/lib/docker/containers
  29 └            readOnly: true
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'fluentd' of DaemonSet 'fluentd' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/fluentd-daemon.yml:21-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌        - image: weaveworksdemos/log-server
  22 │          name: fluentd
  23 │          env:
  24 │          - name: FLUENTD_CONF
  25 │            value: elk.conf
  26 │          volumeMounts:
  27 │          - name: varlibdockercontainers
  28 │            mountPath: /var/lib/docker/containers
  29 └            readOnly: true
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'fluentd' of DaemonSet 'fluentd' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/fluentd-daemon.yml:21-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌        - image: weaveworksdemos/log-server
  22 │          name: fluentd
  23 │          env:
  24 │          - name: FLUENTD_CONF
  25 │            value: elk.conf
  26 │          volumeMounts:
  27 │          - name: varlibdockercontainers
  28 │            mountPath: /var/lib/docker/containers
  29 └            readOnly: true
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'fluentd' of DaemonSet 'fluentd' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/fluentd-daemon.yml:21-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌        - image: weaveworksdemos/log-server
  22 │          name: fluentd
  23 │          env:
  24 │          - name: FLUENTD_CONF
  25 │            value: elk.conf
  26 │          volumeMounts:
  27 │          - name: varlibdockercontainers
  28 │            mountPath: /var/lib/docker/containers
  29 └            readOnly: true
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: DaemonSet 'fluentd' should not set 'spec.template.volumes.hostPath'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/fluentd-daemon.yml:11-35
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  11 ┌   selector:
  12 │     matchLabels:
  13 │       name: fluentd
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │         name: fluentd
  18 │     spec:
  19 └       serviceAccountName: fluentd
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/fluentd-daemon.yml:21-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌        - image: weaveworksdemos/log-server
  22 │          name: fluentd
  23 │          env:
  24 │          - name: FLUENTD_CONF
  25 │            value: elk.conf
  26 │          volumeMounts:
  27 │          - name: varlibdockercontainers
  28 │            mountPath: /var/lib/docker/containers
  29 └            readOnly: true
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/fluentd-daemon.yml:21-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌        - image: weaveworksdemos/log-server
  22 │          name: fluentd
  23 │          env:
  24 │          - name: FLUENTD_CONF
  25 │            value: elk.conf
  26 │          volumeMounts:
  27 │          - name: varlibdockercontainers
  28 │            mountPath: /var/lib/docker/containers
  29 └            readOnly: true
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests-logging/kibana.yml (kubernetes)
===========================================================
Tests: 154 (SUCCESSES: 141, FAILURES: 13, EXCEPTIONS: 0)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'kibana' of Deployment 'kibana' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/kibana.yml:20-24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌        - image: kibana
  21 │          name: kibana
  22 │          ports:
  23 │           - name: kibana
  24 └             containerPort: 5601
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'kibana' of Deployment 'kibana' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/kibana.yml:20-24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌        - image: kibana
  21 │          name: kibana
  22 │          ports:
  23 │           - name: kibana
  24 └             containerPort: 5601
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'kibana' of Deployment 'kibana' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/kibana.yml:20-24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌        - image: kibana
  21 │          name: kibana
  22 │          ports:
  23 │           - name: kibana
  24 └             containerPort: 5601
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'kibana' of Deployment 'kibana' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/kibana.yml:20-24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌        - image: kibana
  21 │          name: kibana
  22 │          ports:
  23 │           - name: kibana
  24 └             containerPort: 5601
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'kibana' of Deployment 'kibana' should specify an image tag
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/kibana.yml:20-24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌        - image: kibana
  21 │          name: kibana
  22 │          ports:
  23 │           - name: kibana
  24 └             containerPort: 5601
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'kibana' of Deployment 'kibana' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/kibana.yml:20-24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌        - image: kibana
  21 │          name: kibana
  22 │          ports:
  23 │           - name: kibana
  24 └             containerPort: 5601
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'kibana' of Deployment 'kibana' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/kibana.yml:20-24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌        - image: kibana
  21 │          name: kibana
  22 │          ports:
  23 │           - name: kibana
  24 └             containerPort: 5601
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'kibana' of Deployment 'kibana' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/kibana.yml:20-24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌        - image: kibana
  21 │          name: kibana
  22 │          ports:
  23 │           - name: kibana
  24 └             containerPort: 5601
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'kibana' of Deployment 'kibana' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/kibana.yml:20-24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌        - image: kibana
  21 │          name: kibana
  22 │          ports:
  23 │           - name: kibana
  24 └             containerPort: 5601
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'kibana' of Deployment 'kibana' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/kibana.yml:20-24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌        - image: kibana
  21 │          name: kibana
  22 │          ports:
  23 │           - name: kibana
  24 └             containerPort: 5601
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'kibana' of Deployment 'kibana' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/kibana.yml:20-24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌        - image: kibana
  21 │          name: kibana
  22 │          ports:
  23 │           - name: kibana
  24 └             containerPort: 5601
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/kibana.yml:20-24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌        - image: kibana
  21 │          name: kibana
  22 │          ports:
  23 │           - name: kibana
  24 └             containerPort: 5601
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-logging/kibana.yml:20-24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌        - image: kibana
  21 │          name: kibana
  22 │          ports:
  23 │           - name: kibana
  24 └             containerPort: 5601
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests-monitoring/02-prometheus-cr.yaml (kubernetes)
=========================================================================
Tests: 141 (SUCCESSES: 140, FAILURES: 1, EXCEPTIONS: 0)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Role permits privilege escalation from node proxy
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/02-prometheus-cr.yaml:17-28
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  17 ┌ - apiGroups: [""] # "" indicates the core API group
  18 │   resources:
  19 │   - nodes
  20 │   - nodes/metrics
  21 │   - nodes/proxy
  22 │   - services
  23 │   - endpoints
  24 │   - pods
  25 └   verbs:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests-monitoring/06-prometheus-dep.yaml (kubernetes)
==========================================================================
Tests: 141 (SUCCESSES: 129, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/06-prometheus-dep.yaml:24-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - name: prometheus
  25 │         image: prom/prometheus:v2.26.0
  26 │         args:
  27 │         - '--storage.tsdb.retention=360h'
  28 │         - '--config.file=/etc/prometheus/prometheus.yml'
  29 │         ports:
  30 │         - name: web
  31 │           containerPort: 9090
  32 └         volumeMounts:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'prometheus' of Deployment 'prometheus-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/06-prometheus-dep.yaml:24-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - name: prometheus
  25 │         image: prom/prometheus:v2.26.0
  26 │         args:
  27 │         - '--storage.tsdb.retention=360h'
  28 │         - '--config.file=/etc/prometheus/prometheus.yml'
  29 │         ports:
  30 │         - name: web
  31 │           containerPort: 9090
  32 └         volumeMounts:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/06-prometheus-dep.yaml:24-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - name: prometheus
  25 │         image: prom/prometheus:v2.26.0
  26 │         args:
  27 │         - '--storage.tsdb.retention=360h'
  28 │         - '--config.file=/etc/prometheus/prometheus.yml'
  29 │         ports:
  30 │         - name: web
  31 │           containerPort: 9090
  32 └         volumeMounts:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/06-prometheus-dep.yaml:24-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - name: prometheus
  25 │         image: prom/prometheus:v2.26.0
  26 │         args:
  27 │         - '--storage.tsdb.retention=360h'
  28 │         - '--config.file=/etc/prometheus/prometheus.yml'
  29 │         ports:
  30 │         - name: web
  31 │           containerPort: 9090
  32 └         volumeMounts:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/06-prometheus-dep.yaml:24-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - name: prometheus
  25 │         image: prom/prometheus:v2.26.0
  26 │         args:
  27 │         - '--storage.tsdb.retention=360h'
  28 │         - '--config.file=/etc/prometheus/prometheus.yml'
  29 │         ports:
  30 │         - name: web
  31 │           containerPort: 9090
  32 └         volumeMounts:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/06-prometheus-dep.yaml:24-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - name: prometheus
  25 │         image: prom/prometheus:v2.26.0
  26 │         args:
  27 │         - '--storage.tsdb.retention=360h'
  28 │         - '--config.file=/etc/prometheus/prometheus.yml'
  29 │         ports:
  30 │         - name: web
  31 │           containerPort: 9090
  32 └         volumeMounts:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/06-prometheus-dep.yaml:24-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - name: prometheus
  25 │         image: prom/prometheus:v2.26.0
  26 │         args:
  27 │         - '--storage.tsdb.retention=360h'
  28 │         - '--config.file=/etc/prometheus/prometheus.yml'
  29 │         ports:
  30 │         - name: web
  31 │           containerPort: 9090
  32 └         volumeMounts:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'prometheus' of Deployment 'prometheus-deployment' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/06-prometheus-dep.yaml:24-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - name: prometheus
  25 │         image: prom/prometheus:v2.26.0
  26 │         args:
  27 │         - '--storage.tsdb.retention=360h'
  28 │         - '--config.file=/etc/prometheus/prometheus.yml'
  29 │         ports:
  30 │         - name: web
  31 │           containerPort: 9090
  32 └         volumeMounts:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/06-prometheus-dep.yaml:24-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - name: prometheus
  25 │         image: prom/prometheus:v2.26.0
  26 │         args:
  27 │         - '--storage.tsdb.retention=360h'
  28 │         - '--config.file=/etc/prometheus/prometheus.yml'
  29 │         ports:
  30 │         - name: web
  31 │           containerPort: 9090
  32 └         volumeMounts:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'prometheus' of Deployment 'prometheus-deployment' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/06-prometheus-dep.yaml:24-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - name: prometheus
  25 │         image: prom/prometheus:v2.26.0
  26 │         args:
  27 │         - '--storage.tsdb.retention=360h'
  28 │         - '--config.file=/etc/prometheus/prometheus.yml'
  29 │         ports:
  30 │         - name: web
  31 │           containerPort: 9090
  32 └         volumeMounts:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/06-prometheus-dep.yaml:24-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - name: prometheus
  25 │         image: prom/prometheus:v2.26.0
  26 │         args:
  27 │         - '--storage.tsdb.retention=360h'
  28 │         - '--config.file=/etc/prometheus/prometheus.yml'
  29 │         ports:
  30 │         - name: web
  31 │           containerPort: 9090
  32 └         volumeMounts:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/06-prometheus-dep.yaml:24-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - name: prometheus
  25 │         image: prom/prometheus:v2.26.0
  26 │         args:
  27 │         - '--storage.tsdb.retention=360h'
  28 │         - '--config.file=/etc/prometheus/prometheus.yml'
  29 │         ports:
  30 │         - name: web
  31 │           containerPort: 9090
  32 └         volumeMounts:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests-monitoring/08-prometheus-exporter-disk-usage-ds.yaml (kubernetes)
=============================================================================================
Tests: 153 (SUCCESSES: 127, FAILURES: 26, EXCEPTIONS: 0)
Failures: 26 (UNKNOWN: 0, LOW: 20, MEDIUM: 6, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'read-du' of DaemonSet 'node-directory-size-metrics' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/08-prometheus-exporter-disk-usage-ds.yaml:32-55
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  32 ┌       - name: read-du
  33 │         image: giantswarm/tiny-tools
  34 │         imagePullPolicy: Always
  35 │         # FIXME threshold via env var
  36 │         # The
  37 │         command:
  38 │         - fish
  39 │         - --command
  40 └         - |
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'caddy' of DaemonSet 'node-directory-size-metrics' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/08-prometheus-exporter-disk-usage-ds.yaml:56-66
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  56 ┌       - name: caddy
  57 │         image: dockermuenster/caddy:0.9.3
  58 │         command:
  59 │         - "caddy"
  60 │         - "-port=9102"
  61 │         - "-root=/var/www"
  62 │         ports:
  63 │         - containerPort: 9102
  64 └         volumeMounts:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'read-du' of DaemonSet 'node-directory-size-metrics' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/08-prometheus-exporter-disk-usage-ds.yaml:32-55
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  32 ┌       - name: read-du
  33 │         image: giantswarm/tiny-tools
  34 │         imagePullPolicy: Always
  35 │         # FIXME threshold via env var
  36 │         # The
  37 │         command:
  38 │         - fish
  39 │         - --command
  40 └         - |
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'caddy' of DaemonSet 'node-directory-size-metrics' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/08-prometheus-exporter-disk-usage-ds.yaml:56-66
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  56 ┌       - name: caddy
  57 │         image: dockermuenster/caddy:0.9.3
  58 │         command:
  59 │         - "caddy"
  60 │         - "-port=9102"
  61 │         - "-root=/var/www"
  62 │         ports:
  63 │         - containerPort: 9102
  64 └         volumeMounts:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'read-du' of DaemonSet 'node-directory-size-metrics' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/08-prometheus-exporter-disk-usage-ds.yaml:32-55
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  32 ┌       - name: read-du
  33 │         image: giantswarm/tiny-tools
  34 │         imagePullPolicy: Always
  35 │         # FIXME threshold via env var
  36 │         # The
  37 │         command:
  38 │         - fish
  39 │         - --command
  40 └         - |
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'caddy' of DaemonSet 'node-directory-size-metrics' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/08-prometheus-exporter-disk-usage-ds.yaml:56-66
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  56 ┌       - name: caddy
  57 │         image: dockermuenster/caddy:0.9.3
  58 │         command:
  59 │         - "caddy"
  60 │         - "-port=9102"
  61 │         - "-root=/var/www"
  62 │         ports:
  63 │         - containerPort: 9102
  64 └         volumeMounts:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'read-du' of DaemonSet 'node-directory-size-metrics' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/08-prometheus-exporter-disk-usage-ds.yaml:32-55
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  32 ┌       - name: read-du
  33 │         image: giantswarm/tiny-tools
  34 │         imagePullPolicy: Always
  35 │         # FIXME threshold via env var
  36 │         # The
  37 │         command:
  38 │         - fish
  39 │         - --command
  40 └         - |
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'caddy' of DaemonSet 'node-directory-size-metrics' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/08-prometheus-exporter-disk-usage-ds.yaml:56-66
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  56 ┌       - name: caddy
  57 │         image: dockermuenster/caddy:0.9.3
  58 │         command:
  59 │         - "caddy"
  60 │         - "-port=9102"
  61 │         - "-root=/var/www"
  62 │         ports:
  63 │         - containerPort: 9102
  64 └         volumeMounts:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'read-du' of DaemonSet 'node-directory-size-metrics' should specify an image tag
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/08-prometheus-exporter-disk-usage-ds.yaml:32-55
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  32 ┌       - name: read-du
  33 │         image: giantswarm/tiny-tools
  34 │         imagePullPolicy: Always
  35 │         # FIXME threshold via env var
  36 │         # The
  37 │         command:
  38 │         - fish
  39 │         - --command
  40 └         - |
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'read-du' of DaemonSet 'node-directory-size-metrics' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/08-prometheus-exporter-disk-usage-ds.yaml:32-55
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  32 ┌       - name: read-du
  33 │         image: giantswarm/tiny-tools
  34 │         imagePullPolicy: Always
  35 │         # FIXME threshold via env var
  36 │         # The
  37 │         command:
  38 │         - fish
  39 │         - --command
  40 └         - |
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'caddy' of DaemonSet 'node-directory-size-metrics' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/08-prometheus-exporter-disk-usage-ds.yaml:56-66
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  56 ┌       - name: caddy
  57 │         image: dockermuenster/caddy:0.9.3
  58 │         command:
  59 │         - "caddy"
  60 │         - "-port=9102"
  61 │         - "-root=/var/www"
  62 │         ports:
  63 │         - containerPort: 9102
  64 └         volumeMounts:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'read-du' of DaemonSet 'node-directory-size-metrics' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/08-prometheus-exporter-disk-usage-ds.yaml:32-55
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  32 ┌       - name: read-du
  33 │         image: giantswarm/tiny-tools
  34 │         imagePullPolicy: Always
  35 │         # FIXME threshold via env var
  36 │         # The
  37 │         command:
  38 │         - fish
  39 │         - --command
  40 └         - |
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'caddy' of DaemonSet 'node-directory-size-metrics' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/08-prometheus-exporter-disk-usage-ds.yaml:56-66
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  56 ┌       - name: caddy
  57 │         image: dockermuenster/caddy:0.9.3
  58 │         command:
  59 │         - "caddy"
  60 │         - "-port=9102"
  61 │         - "-root=/var/www"
  62 │         ports:
  63 │         - containerPort: 9102
  64 └         volumeMounts:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'read-du' of DaemonSet 'node-directory-size-metrics' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/08-prometheus-exporter-disk-usage-ds.yaml:32-55
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  32 ┌       - name: read-du
  33 │         image: giantswarm/tiny-tools
  34 │         imagePullPolicy: Always
  35 │         # FIXME threshold via env var
  36 │         # The
  37 │         command:
  38 │         - fish
  39 │         - --command
  40 └         - |
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'caddy' of DaemonSet 'node-directory-size-metrics' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/08-prometheus-exporter-disk-usage-ds.yaml:56-66
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  56 ┌       - name: caddy
  57 │         image: dockermuenster/caddy:0.9.3
  58 │         command:
  59 │         - "caddy"
  60 │         - "-port=9102"
  61 │         - "-root=/var/www"
  62 │         ports:
  63 │         - containerPort: 9102
  64 └         volumeMounts:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'read-du' of DaemonSet 'node-directory-size-metrics' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/08-prometheus-exporter-disk-usage-ds.yaml:32-55
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  32 ┌       - name: read-du
  33 │         image: giantswarm/tiny-tools
  34 │         imagePullPolicy: Always
  35 │         # FIXME threshold via env var
  36 │         # The
  37 │         command:
  38 │         - fish
  39 │         - --command
  40 └         - |
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'caddy' of DaemonSet 'node-directory-size-metrics' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/08-prometheus-exporter-disk-usage-ds.yaml:56-66
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  56 ┌       - name: caddy
  57 │         image: dockermuenster/caddy:0.9.3
  58 │         command:
  59 │         - "caddy"
  60 │         - "-port=9102"
  61 │         - "-root=/var/www"
  62 │         ports:
  63 │         - containerPort: 9102
  64 └         volumeMounts:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'read-du' of DaemonSet 'node-directory-size-metrics' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/08-prometheus-exporter-disk-usage-ds.yaml:32-55
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  32 ┌       - name: read-du
  33 │         image: giantswarm/tiny-tools
  34 │         imagePullPolicy: Always
  35 │         # FIXME threshold via env var
  36 │         # The
  37 │         command:
  38 │         - fish
  39 │         - --command
  40 └         - |
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'caddy' of DaemonSet 'node-directory-size-metrics' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/08-prometheus-exporter-disk-usage-ds.yaml:56-66
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  56 ┌       - name: caddy
  57 │         image: dockermuenster/caddy:0.9.3
  58 │         command:
  59 │         - "caddy"
  60 │         - "-port=9102"
  61 │         - "-root=/var/www"
  62 │         ports:
  63 │         - containerPort: 9102
  64 └         volumeMounts:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'read-du' of DaemonSet 'node-directory-size-metrics' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/08-prometheus-exporter-disk-usage-ds.yaml:32-55
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  32 ┌       - name: read-du
  33 │         image: giantswarm/tiny-tools
  34 │         imagePullPolicy: Always
  35 │         # FIXME threshold via env var
  36 │         # The
  37 │         command:
  38 │         - fish
  39 │         - --command
  40 └         - |
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'caddy' of DaemonSet 'node-directory-size-metrics' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/08-prometheus-exporter-disk-usage-ds.yaml:56-66
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  56 ┌       - name: caddy
  57 │         image: dockermuenster/caddy:0.9.3
  58 │         command:
  59 │         - "caddy"
  60 │         - "-port=9102"
  61 │         - "-root=/var/www"
  62 │         ports:
  63 │         - containerPort: 9102
  64 └         volumeMounts:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: DaemonSet 'node-directory-size-metrics' should not set 'spec.template.volumes.hostPath'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/08-prometheus-exporter-disk-usage-ds.yaml:14-73
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  14 ┌   selector:
  15 │     matchLabels:
  16 │       app: node-directory-size-metrics
  17 │   template:
  18 │     metadata:
  19 │       labels:
  20 │         app: node-directory-size-metrics
  21 │       annotations:
  22 └         prometheus.io/scrape: 'true'
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/08-prometheus-exporter-disk-usage-ds.yaml:32-55
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  32 ┌       - name: read-du
  33 │         image: giantswarm/tiny-tools
  34 │         imagePullPolicy: Always
  35 │         # FIXME threshold via env var
  36 │         # The
  37 │         command:
  38 │         - fish
  39 │         - --command
  40 └         - |
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/08-prometheus-exporter-disk-usage-ds.yaml:56-66
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  56 ┌       - name: caddy
  57 │         image: dockermuenster/caddy:0.9.3
  58 │         command:
  59 │         - "caddy"
  60 │         - "-port=9102"
  61 │         - "-root=/var/www"
  62 │         ports:
  63 │         - containerPort: 9102
  64 └         volumeMounts:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/08-prometheus-exporter-disk-usage-ds.yaml:32-55
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  32 ┌       - name: read-du
  33 │         image: giantswarm/tiny-tools
  34 │         imagePullPolicy: Always
  35 │         # FIXME threshold via env var
  36 │         # The
  37 │         command:
  38 │         - fish
  39 │         - --command
  40 └         - |
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/08-prometheus-exporter-disk-usage-ds.yaml:56-66
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  56 ┌       - name: caddy
  57 │         image: dockermuenster/caddy:0.9.3
  58 │         command:
  59 │         - "caddy"
  60 │         - "-port=9102"
  61 │         - "-root=/var/www"
  62 │         ports:
  63 │         - containerPort: 9102
  64 └         volumeMounts:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests-monitoring/11-kube-state-cr.yaml (kubernetes)
=========================================================================
Tests: 141 (SUCCESSES: 140, FAILURES: 1, EXCEPTIONS: 0)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

CRITICAL: Role permits management of secret(s)
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Check whether role permits managing secrets

See https://avd.aquasec.com/misconfig/ksv041
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/11-kube-state-cr.yaml:9-26
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ""
  11 │   resources:
  12 │   - configmaps
  13 │   - secrets
  14 │   - nodes
  15 │   - pods
  16 │   - services
  17 └   - resourcequotas
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests-monitoring/13-kube-state-dep.yaml (kubernetes)
==========================================================================
Tests: 141 (SUCCESSES: 130, FAILURES: 11, EXCEPTIONS: 0)
Failures: 11 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/13-kube-state-dep.yaml:21-41
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.1.0
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 8080
  26 │           initialDelaySeconds: 5
  27 │           timeoutSeconds: 5
  28 │         name: kube-state-metrics
  29 └         ports:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/13-kube-state-dep.yaml:21-41
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.1.0
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 8080
  26 │           initialDelaySeconds: 5
  27 │           timeoutSeconds: 5
  28 │         name: kube-state-metrics
  29 └         ports:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/13-kube-state-dep.yaml:21-41
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.1.0
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 8080
  26 │           initialDelaySeconds: 5
  27 │           timeoutSeconds: 5
  28 │         name: kube-state-metrics
  29 └         ports:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/13-kube-state-dep.yaml:21-41
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.1.0
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 8080
  26 │           initialDelaySeconds: 5
  27 │           timeoutSeconds: 5
  28 │         name: kube-state-metrics
  29 └         ports:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/13-kube-state-dep.yaml:21-41
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.1.0
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 8080
  26 │           initialDelaySeconds: 5
  27 │           timeoutSeconds: 5
  28 │         name: kube-state-metrics
  29 └         ports:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/13-kube-state-dep.yaml:21-41
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.1.0
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 8080
  26 │           initialDelaySeconds: 5
  27 │           timeoutSeconds: 5
  28 │         name: kube-state-metrics
  29 └         ports:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/13-kube-state-dep.yaml:21-41
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.1.0
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 8080
  26 │           initialDelaySeconds: 5
  27 │           timeoutSeconds: 5
  28 │         name: kube-state-metrics
  29 └         ports:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/13-kube-state-dep.yaml:21-41
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.1.0
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 8080
  26 │           initialDelaySeconds: 5
  27 │           timeoutSeconds: 5
  28 │         name: kube-state-metrics
  29 └         ports:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'kube-state-metrics' of Deployment 'kube-state-metrics' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/13-kube-state-dep.yaml:21-41
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.1.0
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 8080
  26 │           initialDelaySeconds: 5
  27 │           timeoutSeconds: 5
  28 │         name: kube-state-metrics
  29 └         ports:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/13-kube-state-dep.yaml:21-41
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.1.0
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 8080
  26 │           initialDelaySeconds: 5
  27 │           timeoutSeconds: 5
  28 │         name: kube-state-metrics
  29 └         ports:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/13-kube-state-dep.yaml:21-41
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.1.0
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /healthz
  25 │             port: 8080
  26 │           initialDelaySeconds: 5
  27 │           timeoutSeconds: 5
  28 │         name: kube-state-metrics
  29 └         ports:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests-monitoring/21-grafana-dep.yaml (kubernetes)
=======================================================================
Tests: 141 (SUCCESSES: 133, FAILURES: 8, EXCEPTIONS: 0)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'grafana-core' of Deployment 'grafana-core' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/21-grafana-dep.yaml:22-48
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - image: grafana/grafana:7.5.5
  23 │         name: grafana-core
  24 │         imagePullPolicy: IfNotPresent
  25 │         # env:
  26 │         resources:
  27 │           # keep request = limit to keep this container in guaranteed class
  28 │           limits:
  29 │             cpu: 100m
  30 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'grafana-core' of Deployment 'grafana-core' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/21-grafana-dep.yaml:22-48
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - image: grafana/grafana:7.5.5
  23 │         name: grafana-core
  24 │         imagePullPolicy: IfNotPresent
  25 │         # env:
  26 │         resources:
  27 │           # keep request = limit to keep this container in guaranteed class
  28 │           limits:
  29 │             cpu: 100m
  30 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'grafana-core' of Deployment 'grafana-core' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/21-grafana-dep.yaml:22-48
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - image: grafana/grafana:7.5.5
  23 │         name: grafana-core
  24 │         imagePullPolicy: IfNotPresent
  25 │         # env:
  26 │         resources:
  27 │           # keep request = limit to keep this container in guaranteed class
  28 │           limits:
  29 │             cpu: 100m
  30 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'grafana-core' of Deployment 'grafana-core' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/21-grafana-dep.yaml:22-48
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - image: grafana/grafana:7.5.5
  23 │         name: grafana-core
  24 │         imagePullPolicy: IfNotPresent
  25 │         # env:
  26 │         resources:
  27 │           # keep request = limit to keep this container in guaranteed class
  28 │           limits:
  29 │             cpu: 100m
  30 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'grafana-core' of Deployment 'grafana-core' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/21-grafana-dep.yaml:22-48
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - image: grafana/grafana:7.5.5
  23 │         name: grafana-core
  24 │         imagePullPolicy: IfNotPresent
  25 │         # env:
  26 │         resources:
  27 │           # keep request = limit to keep this container in guaranteed class
  28 │           limits:
  29 │             cpu: 100m
  30 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'grafana-core' of Deployment 'grafana-core' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/21-grafana-dep.yaml:22-48
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - image: grafana/grafana:7.5.5
  23 │         name: grafana-core
  24 │         imagePullPolicy: IfNotPresent
  25 │         # env:
  26 │         resources:
  27 │           # keep request = limit to keep this container in guaranteed class
  28 │           limits:
  29 │             cpu: 100m
  30 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/21-grafana-dep.yaml:22-48
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - image: grafana/grafana:7.5.5
  23 │         name: grafana-core
  24 │         imagePullPolicy: IfNotPresent
  25 │         # env:
  26 │         resources:
  27 │           # keep request = limit to keep this container in guaranteed class
  28 │           limits:
  29 │             cpu: 100m
  30 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/21-grafana-dep.yaml:22-48
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - image: grafana/grafana:7.5.5
  23 │         name: grafana-core
  24 │         imagePullPolicy: IfNotPresent
  25 │         # env:
  26 │         resources:
  27 │           # keep request = limit to keep this container in guaranteed class
  28 │           limits:
  29 │             cpu: 100m
  30 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests-monitoring/23-grafana-import-dash-batch.yaml (kubernetes)
=====================================================================================
Tests: 141 (SUCCESSES: 128, FAILURES: 13, EXCEPTIONS: 0)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'grafana-import-dashboards' of Job 'grafana-import-dashboards' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/23-grafana-import-dash-batch.yaml:28-58
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  28 ┌       - name: grafana-import-dashboards
  29 │         image: giantswarm/tiny-tools
  30 │         command: ["/bin/sh", "-c"]
  31 │         workingDir: /opt/grafana-import-dashboards
  32 │         args:
  33 │           - >
  34 │             for file in *-datasource.json ; do
  35 │               if [ -e "$file" ] ; then
  36 └                 echo "importing $file" &&
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'grafana-import-dashboards' of Job 'grafana-import-dashboards' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/23-grafana-import-dash-batch.yaml:28-58
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  28 ┌       - name: grafana-import-dashboards
  29 │         image: giantswarm/tiny-tools
  30 │         command: ["/bin/sh", "-c"]
  31 │         workingDir: /opt/grafana-import-dashboards
  32 │         args:
  33 │           - >
  34 │             for file in *-datasource.json ; do
  35 │               if [ -e "$file" ] ; then
  36 └                 echo "importing $file" &&
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'grafana-import-dashboards' of Job 'grafana-import-dashboards' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/23-grafana-import-dash-batch.yaml:28-58
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  28 ┌       - name: grafana-import-dashboards
  29 │         image: giantswarm/tiny-tools
  30 │         command: ["/bin/sh", "-c"]
  31 │         workingDir: /opt/grafana-import-dashboards
  32 │         args:
  33 │           - >
  34 │             for file in *-datasource.json ; do
  35 │               if [ -e "$file" ] ; then
  36 └                 echo "importing $file" &&
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'grafana-import-dashboards' of Job 'grafana-import-dashboards' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/23-grafana-import-dash-batch.yaml:28-58
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  28 ┌       - name: grafana-import-dashboards
  29 │         image: giantswarm/tiny-tools
  30 │         command: ["/bin/sh", "-c"]
  31 │         workingDir: /opt/grafana-import-dashboards
  32 │         args:
  33 │           - >
  34 │             for file in *-datasource.json ; do
  35 │               if [ -e "$file" ] ; then
  36 └                 echo "importing $file" &&
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'grafana-import-dashboards' of Job 'grafana-import-dashboards' should specify an image tag
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/23-grafana-import-dash-batch.yaml:28-58
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  28 ┌       - name: grafana-import-dashboards
  29 │         image: giantswarm/tiny-tools
  30 │         command: ["/bin/sh", "-c"]
  31 │         workingDir: /opt/grafana-import-dashboards
  32 │         args:
  33 │           - >
  34 │             for file in *-datasource.json ; do
  35 │               if [ -e "$file" ] ; then
  36 └                 echo "importing $file" &&
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'grafana-import-dashboards' of Job 'grafana-import-dashboards' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/23-grafana-import-dash-batch.yaml:28-58
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  28 ┌       - name: grafana-import-dashboards
  29 │         image: giantswarm/tiny-tools
  30 │         command: ["/bin/sh", "-c"]
  31 │         workingDir: /opt/grafana-import-dashboards
  32 │         args:
  33 │           - >
  34 │             for file in *-datasource.json ; do
  35 │               if [ -e "$file" ] ; then
  36 └                 echo "importing $file" &&
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'grafana-import-dashboards' of Job 'grafana-import-dashboards' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/23-grafana-import-dash-batch.yaml:28-58
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  28 ┌       - name: grafana-import-dashboards
  29 │         image: giantswarm/tiny-tools
  30 │         command: ["/bin/sh", "-c"]
  31 │         workingDir: /opt/grafana-import-dashboards
  32 │         args:
  33 │           - >
  34 │             for file in *-datasource.json ; do
  35 │               if [ -e "$file" ] ; then
  36 └                 echo "importing $file" &&
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'grafana-import-dashboards' of Job 'grafana-import-dashboards' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/23-grafana-import-dash-batch.yaml:28-58
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  28 ┌       - name: grafana-import-dashboards
  29 │         image: giantswarm/tiny-tools
  30 │         command: ["/bin/sh", "-c"]
  31 │         workingDir: /opt/grafana-import-dashboards
  32 │         args:
  33 │           - >
  34 │             for file in *-datasource.json ; do
  35 │               if [ -e "$file" ] ; then
  36 └                 echo "importing $file" &&
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'grafana-import-dashboards' of Job 'grafana-import-dashboards' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/23-grafana-import-dash-batch.yaml:28-58
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  28 ┌       - name: grafana-import-dashboards
  29 │         image: giantswarm/tiny-tools
  30 │         command: ["/bin/sh", "-c"]
  31 │         workingDir: /opt/grafana-import-dashboards
  32 │         args:
  33 │           - >
  34 │             for file in *-datasource.json ; do
  35 │               if [ -e "$file" ] ; then
  36 └                 echo "importing $file" &&
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'grafana-import-dashboards' of Job 'grafana-import-dashboards' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/23-grafana-import-dash-batch.yaml:28-58
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  28 ┌       - name: grafana-import-dashboards
  29 │         image: giantswarm/tiny-tools
  30 │         command: ["/bin/sh", "-c"]
  31 │         workingDir: /opt/grafana-import-dashboards
  32 │         args:
  33 │           - >
  34 │             for file in *-datasource.json ; do
  35 │               if [ -e "$file" ] ; then
  36 └                 echo "importing $file" &&
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'grafana-import-dashboards' of Job 'grafana-import-dashboards' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/23-grafana-import-dash-batch.yaml:28-58
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  28 ┌       - name: grafana-import-dashboards
  29 │         image: giantswarm/tiny-tools
  30 │         command: ["/bin/sh", "-c"]
  31 │         workingDir: /opt/grafana-import-dashboards
  32 │         args:
  33 │           - >
  34 │             for file in *-datasource.json ; do
  35 │               if [ -e "$file" ] ; then
  36 └                 echo "importing $file" &&
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/23-grafana-import-dash-batch.yaml:28-58
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  28 ┌       - name: grafana-import-dashboards
  29 │         image: giantswarm/tiny-tools
  30 │         command: ["/bin/sh", "-c"]
  31 │         workingDir: /opt/grafana-import-dashboards
  32 │         args:
  33 │           - >
  34 │             for file in *-datasource.json ; do
  35 │               if [ -e "$file" ] ; then
  36 └                 echo "importing $file" &&
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/23-grafana-import-dash-batch.yaml:28-58
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  28 ┌       - name: grafana-import-dashboards
  29 │         image: giantswarm/tiny-tools
  30 │         command: ["/bin/sh", "-c"]
  31 │         workingDir: /opt/grafana-import-dashboards
  32 │         args:
  33 │           - >
  34 │             for file in *-datasource.json ; do
  35 │               if [ -e "$file" ] ; then
  36 └                 echo "importing $file" &&
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests-monitoring/25-prometheus-node-exporter-daemonset.yaml (kubernetes)
==============================================================================================
Tests: 141 (SUCCESSES: 130, FAILURES: 11, EXCEPTIONS: 0)
Failures: 11 (UNKNOWN: 0, LOW: 6, MEDIUM: 2, HIGH: 3, CRITICAL: 0)

MEDIUM: Container 'node-exporter' of DaemonSet 'node-exporter' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/25-prometheus-node-exporter-daemonset.yaml:21-51
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - args:
  22 │         - --web.listen-address=0.0.0.0:9100
  23 │         - --path.sysfs=/host/sys
  24 │         - --path.rootfs=/host/root
  25 │         - --no-collector.wifi
  26 │         - --no-collector.hwmon
  27 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  28 │         - --collector.netclass.ignored-devices=^(veth.*)$
  29 └         - --collector.netdev.device-exclude=^(veth.*)$
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'node-exporter' of DaemonSet 'node-exporter' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/25-prometheus-node-exporter-daemonset.yaml:21-51
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - args:
  22 │         - --web.listen-address=0.0.0.0:9100
  23 │         - --path.sysfs=/host/sys
  24 │         - --path.rootfs=/host/root
  25 │         - --no-collector.wifi
  26 │         - --no-collector.hwmon
  27 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  28 │         - --collector.netclass.ignored-devices=^(veth.*)$
  29 └         - --collector.netdev.device-exclude=^(veth.*)$
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


HIGH: DaemonSet 'node-exporter' should not set 'spec.template.spec.hostNetwork' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/25-prometheus-node-exporter-daemonset.yaml:10-72
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app.kubernetes.io/component: exporter
  13 │       app.kubernetes.io/name: node-exporter
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │         app.kubernetes.io/component: exporter
  18 └         app.kubernetes.io/name: node-exporter
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


HIGH: DaemonSet 'node-exporter' should not set 'spec.template.spec.hostPID' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Sharing the host’s PID namespace allows visibility on host processes, potentially leaking information such as environment variables and configuration.

See https://avd.aquasec.com/misconfig/ksv010
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/25-prometheus-node-exporter-daemonset.yaml:10-72
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app.kubernetes.io/component: exporter
  13 │       app.kubernetes.io/name: node-exporter
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │         app.kubernetes.io/component: exporter
  18 └         app.kubernetes.io/name: node-exporter
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'node-exporter' of DaemonSet 'node-exporter' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/25-prometheus-node-exporter-daemonset.yaml:21-51
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - args:
  22 │         - --web.listen-address=0.0.0.0:9100
  23 │         - --path.sysfs=/host/sys
  24 │         - --path.rootfs=/host/root
  25 │         - --no-collector.wifi
  26 │         - --no-collector.hwmon
  27 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  28 │         - --collector.netclass.ignored-devices=^(veth.*)$
  29 └         - --collector.netdev.device-exclude=^(veth.*)$
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'node-exporter' of DaemonSet 'node-exporter' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/25-prometheus-node-exporter-daemonset.yaml:21-51
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - args:
  22 │         - --web.listen-address=0.0.0.0:9100
  23 │         - --path.sysfs=/host/sys
  24 │         - --path.rootfs=/host/root
  25 │         - --no-collector.wifi
  26 │         - --no-collector.hwmon
  27 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  28 │         - --collector.netclass.ignored-devices=^(veth.*)$
  29 └         - --collector.netdev.device-exclude=^(veth.*)$
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'node-exporter' of DaemonSet 'node-exporter' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/25-prometheus-node-exporter-daemonset.yaml:21-51
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - args:
  22 │         - --web.listen-address=0.0.0.0:9100
  23 │         - --path.sysfs=/host/sys
  24 │         - --path.rootfs=/host/root
  25 │         - --no-collector.wifi
  26 │         - --no-collector.hwmon
  27 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  28 │         - --collector.netclass.ignored-devices=^(veth.*)$
  29 └         - --collector.netdev.device-exclude=^(veth.*)$
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: DaemonSet 'node-exporter' should not set 'spec.template.volumes.hostPath'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/25-prometheus-node-exporter-daemonset.yaml:10-72
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app.kubernetes.io/component: exporter
  13 │       app.kubernetes.io/name: node-exporter
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 │         app.kubernetes.io/component: exporter
  18 └         app.kubernetes.io/name: node-exporter
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


HIGH: Container 'node-exporter' of DaemonSet 'node-exporter' should not set host ports, 'ports[*].hostPort'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
HostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/25-prometheus-node-exporter-daemonset.yaml:21-51
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - args:
  22 │         - --web.listen-address=0.0.0.0:9100
  23 │         - --path.sysfs=/host/sys
  24 │         - --path.rootfs=/host/root
  25 │         - --no-collector.wifi
  26 │         - --no-collector.hwmon
  27 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  28 │         - --collector.netclass.ignored-devices=^(veth.*)$
  29 └         - --collector.netdev.device-exclude=^(veth.*)$
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/25-prometheus-node-exporter-daemonset.yaml:21-51
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - args:
  22 │         - --web.listen-address=0.0.0.0:9100
  23 │         - --path.sysfs=/host/sys
  24 │         - --path.rootfs=/host/root
  25 │         - --no-collector.wifi
  26 │         - --no-collector.hwmon
  27 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  28 │         - --collector.netclass.ignored-devices=^(veth.*)$
  29 └         - --collector.netdev.device-exclude=^(veth.*)$
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests-monitoring/25-prometheus-node-exporter-daemonset.yaml:21-51
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - args:
  22 │         - --web.listen-address=0.0.0.0:9100
  23 │         - --path.sysfs=/host/sys
  24 │         - --path.rootfs=/host/root
  25 │         - --no-collector.wifi
  26 │         - --no-collector.hwmon
  27 │         - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
  28 │         - --collector.netclass.ignored-devices=^(veth.*)$
  29 └         - --collector.netdev.device-exclude=^(veth.*)$
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests/01-carts-dep.yaml (kubernetes)
==========================================================
Tests: 141 (SUCCESSES: 136, FAILURES: 5, EXCEPTIONS: 0)
Failures: 5 (UNKNOWN: 0, LOW: 3, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'carts' of Deployment 'carts' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/01-carts-dep.yaml:20-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: carts
  21 │         image: weaveworksdemos/carts:0.4.8
  22 │         env:
  23 │          - name: JAVA_OPTS
  24 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 │             cpu: 300m
  28 └             memory: 500Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'carts' of Deployment 'carts' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/01-carts-dep.yaml:20-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: carts
  21 │         image: weaveworksdemos/carts:0.4.8
  22 │         env:
  23 │          - name: JAVA_OPTS
  24 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 │             cpu: 300m
  28 └             memory: 500Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'carts' of Deployment 'carts' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Adding NET_RAW or capabilities beyond the default set must be disallowed.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/01-carts-dep.yaml:20-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: carts
  21 │         image: weaveworksdemos/carts:0.4.8
  22 │         env:
  23 │          - name: JAVA_OPTS
  24 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 │             cpu: 300m
  28 └             memory: 500Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/01-carts-dep.yaml:20-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: carts
  21 │         image: weaveworksdemos/carts:0.4.8
  22 │         env:
  23 │          - name: JAVA_OPTS
  24 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 │             cpu: 300m
  28 └             memory: 500Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/01-carts-dep.yaml:20-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: carts
  21 │         image: weaveworksdemos/carts:0.4.8
  22 │         env:
  23 │          - name: JAVA_OPTS
  24 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 │             cpu: 300m
  28 └             memory: 500Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests/03-carts-db-dep.yaml (kubernetes)
=============================================================
Tests: 141 (SUCCESSES: 129, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/03-carts-db-dep.yaml:20-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: carts-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'carts-db' of Deployment 'carts-db' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/03-carts-db-dep.yaml:20-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: carts-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/03-carts-db-dep.yaml:20-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: carts-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'carts-db' of Deployment 'carts-db' should specify an image tag
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/03-carts-db-dep.yaml:20-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: carts-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'carts-db' of Deployment 'carts-db' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/03-carts-db-dep.yaml:20-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: carts-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'carts-db' of Deployment 'carts-db' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/03-carts-db-dep.yaml:20-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: carts-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'carts-db' of Deployment 'carts-db' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/03-carts-db-dep.yaml:20-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: carts-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/03-carts-db-dep.yaml:20-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: carts-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/03-carts-db-dep.yaml:20-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: carts-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'carts-db' of Deployment 'carts-db' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Adding NET_RAW or capabilities beyond the default set must be disallowed.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/03-carts-db-dep.yaml:20-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: carts-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/03-carts-db-dep.yaml:20-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: carts-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/03-carts-db-dep.yaml:20-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: carts-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests/05-catalogue-dep.yaml (kubernetes)
==============================================================
Tests: 141 (SUCCESSES: 136, FAILURES: 5, EXCEPTIONS: 0)
Failures: 5 (UNKNOWN: 0, LOW: 3, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'catalogue' of Deployment 'catalogue' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/05-catalogue-dep.yaml:20-54
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         command: ["/app"]
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 │             cpu: 200m
  28 └             memory: 200Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'catalogue' of Deployment 'catalogue' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/05-catalogue-dep.yaml:20-54
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         command: ["/app"]
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 │             cpu: 200m
  28 └             memory: 200Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'catalogue' of Deployment 'catalogue' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Adding NET_RAW or capabilities beyond the default set must be disallowed.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/05-catalogue-dep.yaml:20-54
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         command: ["/app"]
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 │             cpu: 200m
  28 └             memory: 200Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/05-catalogue-dep.yaml:20-54
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         command: ["/app"]
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 │             cpu: 200m
  28 └             memory: 200Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/05-catalogue-dep.yaml:20-54
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: catalogue
  21 │         image: weaveworksdemos/catalogue:0.3.5
  22 │         command: ["/app"]
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 │             cpu: 200m
  28 └             memory: 200Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests/07-catalogue-db-dep.yaml (kubernetes)
=================================================================
Tests: 141 (SUCCESSES: 129, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/07-catalogue-db-dep.yaml:20-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'catalogue-db' of Deployment 'catalogue-db' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/07-catalogue-db-dep.yaml:20-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/07-catalogue-db-dep.yaml:20-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/07-catalogue-db-dep.yaml:20-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/07-catalogue-db-dep.yaml:20-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/07-catalogue-db-dep.yaml:20-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/07-catalogue-db-dep.yaml:20-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/07-catalogue-db-dep.yaml:20-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/07-catalogue-db-dep.yaml:20-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/07-catalogue-db-dep.yaml:20-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/07-catalogue-db-dep.yaml:20-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/07-catalogue-db-dep.yaml:20-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: catalogue-db
  21 │         image: weaveworksdemos/catalogue-db:0.3.0
  22 │         env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 │             value: fake_password
  25 │           - name: MYSQL_DATABASE
  26 │             value: socksdb
  27 │         ports:
  28 │         - name: mysql
  29 └           containerPort: 3306
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests/09-front-end-dep.yaml (kubernetes)
==============================================================
Tests: 141 (SUCCESSES: 137, FAILURES: 4, EXCEPTIONS: 0)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'front-end' of Deployment 'front-end' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/09-front-end-dep.yaml:18-50
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  18 ┌       - name: front-end
  19 │         image: weaveworksdemos/front-end:0.3.12
  20 │         resources:
  21 │           limits:
  22 │             cpu: 300m
  23 │             memory: 1000Mi
  24 │           requests:
  25 │             cpu: 100m
  26 └             memory: 300Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'front-end' of Deployment 'front-end' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/09-front-end-dep.yaml:18-50
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  18 ┌       - name: front-end
  19 │         image: weaveworksdemos/front-end:0.3.12
  20 │         resources:
  21 │           limits:
  22 │             cpu: 300m
  23 │             memory: 1000Mi
  24 │           requests:
  25 │             cpu: 100m
  26 └             memory: 300Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/09-front-end-dep.yaml:18-50
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  18 ┌       - name: front-end
  19 │         image: weaveworksdemos/front-end:0.3.12
  20 │         resources:
  21 │           limits:
  22 │             cpu: 300m
  23 │             memory: 1000Mi
  24 │           requests:
  25 │             cpu: 100m
  26 └             memory: 300Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/09-front-end-dep.yaml:18-50
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  18 ┌       - name: front-end
  19 │         image: weaveworksdemos/front-end:0.3.12
  20 │         resources:
  21 │           limits:
  22 │             cpu: 300m
  23 │             memory: 1000Mi
  24 │           requests:
  25 │             cpu: 100m
  26 └             memory: 300Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests/11-orders-dep.yaml (kubernetes)
===========================================================
Tests: 141 (SUCCESSES: 136, FAILURES: 5, EXCEPTIONS: 0)
Failures: 5 (UNKNOWN: 0, LOW: 3, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'orders' of Deployment 'orders' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/11-orders-dep.yaml:20-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: orders
  21 │         image: weaveworksdemos/orders:0.4.7
  22 │         env:
  23 │          - name: JAVA_OPTS
  24 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 │             cpu: 500m
  28 └             memory: 500Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'orders' of Deployment 'orders' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/11-orders-dep.yaml:20-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: orders
  21 │         image: weaveworksdemos/orders:0.4.7
  22 │         env:
  23 │          - name: JAVA_OPTS
  24 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 │             cpu: 500m
  28 └             memory: 500Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'orders' of Deployment 'orders' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Adding NET_RAW or capabilities beyond the default set must be disallowed.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/11-orders-dep.yaml:20-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: orders
  21 │         image: weaveworksdemos/orders:0.4.7
  22 │         env:
  23 │          - name: JAVA_OPTS
  24 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 │             cpu: 500m
  28 └             memory: 500Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/11-orders-dep.yaml:20-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: orders
  21 │         image: weaveworksdemos/orders:0.4.7
  22 │         env:
  23 │          - name: JAVA_OPTS
  24 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 │             cpu: 500m
  28 └             memory: 500Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/11-orders-dep.yaml:20-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: orders
  21 │         image: weaveworksdemos/orders:0.4.7
  22 │         env:
  23 │          - name: JAVA_OPTS
  24 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 │             cpu: 500m
  28 └             memory: 500Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests/13-orders-db-dep.yaml (kubernetes)
==============================================================
Tests: 141 (SUCCESSES: 129, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/13-orders-db-dep.yaml:20-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: orders-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'orders-db' of Deployment 'orders-db' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/13-orders-db-dep.yaml:20-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: orders-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/13-orders-db-dep.yaml:20-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: orders-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'orders-db' of Deployment 'orders-db' should specify an image tag
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/13-orders-db-dep.yaml:20-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: orders-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'orders-db' of Deployment 'orders-db' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/13-orders-db-dep.yaml:20-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: orders-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'orders-db' of Deployment 'orders-db' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/13-orders-db-dep.yaml:20-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: orders-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'orders-db' of Deployment 'orders-db' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/13-orders-db-dep.yaml:20-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: orders-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/13-orders-db-dep.yaml:20-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: orders-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/13-orders-db-dep.yaml:20-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: orders-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'orders-db' of Deployment 'orders-db' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Adding NET_RAW or capabilities beyond the default set must be disallowed.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/13-orders-db-dep.yaml:20-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: orders-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/13-orders-db-dep.yaml:20-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: orders-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/13-orders-db-dep.yaml:20-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: orders-db
  21 │         image: mongo
  22 │         ports:
  23 │         - name: mongo
  24 │           containerPort: 27017
  25 │         securityContext:
  26 │           capabilities:
  27 │             drop:
  28 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests/15-payment-dep.yaml (kubernetes)
============================================================
Tests: 141 (SUCCESSES: 136, FAILURES: 5, EXCEPTIONS: 0)
Failures: 5 (UNKNOWN: 0, LOW: 3, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'payment' of Deployment 'payment' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/15-payment-dep.yaml:20-51
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 200m
  25 │             memory: 200Mi
  26 │           requests:
  27 │             cpu: 99m
  28 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'payment' of Deployment 'payment' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/15-payment-dep.yaml:20-51
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 200m
  25 │             memory: 200Mi
  26 │           requests:
  27 │             cpu: 99m
  28 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'payment' of Deployment 'payment' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Adding NET_RAW or capabilities beyond the default set must be disallowed.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/15-payment-dep.yaml:20-51
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 200m
  25 │             memory: 200Mi
  26 │           requests:
  27 │             cpu: 99m
  28 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/15-payment-dep.yaml:20-51
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 200m
  25 │             memory: 200Mi
  26 │           requests:
  27 │             cpu: 99m
  28 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/15-payment-dep.yaml:20-51
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: payment
  21 │         image: weaveworksdemos/payment:0.4.3
  22 │         resources:
  23 │           limits:
  24 │             cpu: 200m
  25 │             memory: 200Mi
  26 │           requests:
  27 │             cpu: 99m
  28 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests/17-queue-master-dep.yaml (kubernetes)
=================================================================
Tests: 141 (SUCCESSES: 133, FAILURES: 8, EXCEPTIONS: 0)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/17-queue-master-dep.yaml:20-33
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: queue-master
  21 │         image: weaveworksdemos/queue-master:0.3.1
  22 │         env:
  23 │          - name: JAVA_OPTS
  24 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 │             cpu: 300m
  28 └             memory: 500Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'queue-master' of Deployment 'queue-master' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/17-queue-master-dep.yaml:20-33
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: queue-master
  21 │         image: weaveworksdemos/queue-master:0.3.1
  22 │         env:
  23 │          - name: JAVA_OPTS
  24 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 │             cpu: 300m
  28 └             memory: 500Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/17-queue-master-dep.yaml:20-33
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: queue-master
  21 │         image: weaveworksdemos/queue-master:0.3.1
  22 │         env:
  23 │          - name: JAVA_OPTS
  24 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 │             cpu: 300m
  28 └             memory: 500Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/17-queue-master-dep.yaml:20-33
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: queue-master
  21 │         image: weaveworksdemos/queue-master:0.3.1
  22 │         env:
  23 │          - name: JAVA_OPTS
  24 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 │             cpu: 300m
  28 └             memory: 500Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/17-queue-master-dep.yaml:20-33
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: queue-master
  21 │         image: weaveworksdemos/queue-master:0.3.1
  22 │         env:
  23 │          - name: JAVA_OPTS
  24 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 │             cpu: 300m
  28 └             memory: 500Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/17-queue-master-dep.yaml:20-33
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: queue-master
  21 │         image: weaveworksdemos/queue-master:0.3.1
  22 │         env:
  23 │          - name: JAVA_OPTS
  24 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 │             cpu: 300m
  28 └             memory: 500Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/17-queue-master-dep.yaml:20-33
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: queue-master
  21 │         image: weaveworksdemos/queue-master:0.3.1
  22 │         env:
  23 │          - name: JAVA_OPTS
  24 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 │             cpu: 300m
  28 └             memory: 500Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/17-queue-master-dep.yaml:20-33
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: queue-master
  21 │         image: weaveworksdemos/queue-master:0.3.1
  22 │         env:
  23 │          - name: JAVA_OPTS
  24 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 │             cpu: 300m
  28 └             memory: 500Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests/19-rabbitmq-dep.yaml (kubernetes)
=============================================================
Tests: 151 (SUCCESSES: 127, FAILURES: 24, EXCEPTIONS: 0)
Failures: 24 (UNKNOWN: 0, LOW: 18, MEDIUM: 6, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/19-rabbitmq-dep.yaml:22-38
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - name: rabbitmq
  23 │         image: rabbitmq:3.6.8-management
  24 │         ports:
  25 │         - containerPort: 15672
  26 │           name: management
  27 │         - containerPort: 5672
  28 │           name: rabbitmq
  29 │         securityContext:
  30 └           capabilities:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/19-rabbitmq-dep.yaml:39-43
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌       - name: rabbitmq-exporter
  40 │         image: kbudde/rabbitmq-exporter
  41 │         ports:
  42 │         - containerPort: 9090
  43 └           name: exporter
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/19-rabbitmq-dep.yaml:39-43
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌       - name: rabbitmq-exporter
  40 │         image: kbudde/rabbitmq-exporter
  41 │         ports:
  42 │         - containerPort: 9090
  43 └           name: exporter
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/19-rabbitmq-dep.yaml:22-38
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - name: rabbitmq
  23 │         image: rabbitmq:3.6.8-management
  24 │         ports:
  25 │         - containerPort: 15672
  26 │           name: management
  27 │         - containerPort: 5672
  28 │           name: rabbitmq
  29 │         securityContext:
  30 └           capabilities:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/19-rabbitmq-dep.yaml:39-43
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌       - name: rabbitmq-exporter
  40 │         image: kbudde/rabbitmq-exporter
  41 │         ports:
  42 │         - containerPort: 9090
  43 └           name: exporter
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/19-rabbitmq-dep.yaml:22-38
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - name: rabbitmq
  23 │         image: rabbitmq:3.6.8-management
  24 │         ports:
  25 │         - containerPort: 15672
  26 │           name: management
  27 │         - containerPort: 5672
  28 │           name: rabbitmq
  29 │         securityContext:
  30 └           capabilities:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/19-rabbitmq-dep.yaml:39-43
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌       - name: rabbitmq-exporter
  40 │         image: kbudde/rabbitmq-exporter
  41 │         ports:
  42 │         - containerPort: 9090
  43 └           name: exporter
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should specify an image tag
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/19-rabbitmq-dep.yaml:39-43
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌       - name: rabbitmq-exporter
  40 │         image: kbudde/rabbitmq-exporter
  41 │         ports:
  42 │         - containerPort: 9090
  43 └           name: exporter
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/19-rabbitmq-dep.yaml:39-43
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌       - name: rabbitmq-exporter
  40 │         image: kbudde/rabbitmq-exporter
  41 │         ports:
  42 │         - containerPort: 9090
  43 └           name: exporter
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/19-rabbitmq-dep.yaml:22-38
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - name: rabbitmq
  23 │         image: rabbitmq:3.6.8-management
  24 │         ports:
  25 │         - containerPort: 15672
  26 │           name: management
  27 │         - containerPort: 5672
  28 │           name: rabbitmq
  29 │         securityContext:
  30 └           capabilities:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/19-rabbitmq-dep.yaml:39-43
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌       - name: rabbitmq-exporter
  40 │         image: kbudde/rabbitmq-exporter
  41 │         ports:
  42 │         - containerPort: 9090
  43 └           name: exporter
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/19-rabbitmq-dep.yaml:22-38
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - name: rabbitmq
  23 │         image: rabbitmq:3.6.8-management
  24 │         ports:
  25 │         - containerPort: 15672
  26 │           name: management
  27 │         - containerPort: 5672
  28 │           name: rabbitmq
  29 │         securityContext:
  30 └           capabilities:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/19-rabbitmq-dep.yaml:39-43
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌       - name: rabbitmq-exporter
  40 │         image: kbudde/rabbitmq-exporter
  41 │         ports:
  42 │         - containerPort: 9090
  43 └           name: exporter
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/19-rabbitmq-dep.yaml:22-38
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - name: rabbitmq
  23 │         image: rabbitmq:3.6.8-management
  24 │         ports:
  25 │         - containerPort: 15672
  26 │           name: management
  27 │         - containerPort: 5672
  28 │           name: rabbitmq
  29 │         securityContext:
  30 └           capabilities:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/19-rabbitmq-dep.yaml:39-43
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌       - name: rabbitmq-exporter
  40 │         image: kbudde/rabbitmq-exporter
  41 │         ports:
  42 │         - containerPort: 9090
  43 └           name: exporter
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/19-rabbitmq-dep.yaml:22-38
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - name: rabbitmq
  23 │         image: rabbitmq:3.6.8-management
  24 │         ports:
  25 │         - containerPort: 15672
  26 │           name: management
  27 │         - containerPort: 5672
  28 │           name: rabbitmq
  29 │         securityContext:
  30 └           capabilities:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/19-rabbitmq-dep.yaml:39-43
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌       - name: rabbitmq-exporter
  40 │         image: kbudde/rabbitmq-exporter
  41 │         ports:
  42 │         - containerPort: 9090
  43 └           name: exporter
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/19-rabbitmq-dep.yaml:22-38
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - name: rabbitmq
  23 │         image: rabbitmq:3.6.8-management
  24 │         ports:
  25 │         - containerPort: 15672
  26 │           name: management
  27 │         - containerPort: 5672
  28 │           name: rabbitmq
  29 │         securityContext:
  30 └           capabilities:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/19-rabbitmq-dep.yaml:39-43
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌       - name: rabbitmq-exporter
  40 │         image: kbudde/rabbitmq-exporter
  41 │         ports:
  42 │         - containerPort: 9090
  43 └           name: exporter
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'rabbitmq' of Deployment 'rabbitmq' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Adding NET_RAW or capabilities beyond the default set must be disallowed.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/19-rabbitmq-dep.yaml:22-38
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - name: rabbitmq
  23 │         image: rabbitmq:3.6.8-management
  24 │         ports:
  25 │         - containerPort: 15672
  26 │           name: management
  27 │         - containerPort: 5672
  28 │           name: rabbitmq
  29 │         securityContext:
  30 └           capabilities:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/19-rabbitmq-dep.yaml:22-38
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - name: rabbitmq
  23 │         image: rabbitmq:3.6.8-management
  24 │         ports:
  25 │         - containerPort: 15672
  26 │           name: management
  27 │         - containerPort: 5672
  28 │           name: rabbitmq
  29 │         securityContext:
  30 └           capabilities:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/19-rabbitmq-dep.yaml:39-43
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌       - name: rabbitmq-exporter
  40 │         image: kbudde/rabbitmq-exporter
  41 │         ports:
  42 │         - containerPort: 9090
  43 └           name: exporter
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/19-rabbitmq-dep.yaml:22-38
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - name: rabbitmq
  23 │         image: rabbitmq:3.6.8-management
  24 │         ports:
  25 │         - containerPort: 15672
  26 │           name: management
  27 │         - containerPort: 5672
  28 │           name: rabbitmq
  29 │         securityContext:
  30 └           capabilities:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/19-rabbitmq-dep.yaml:39-43
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌       - name: rabbitmq-exporter
  40 │         image: kbudde/rabbitmq-exporter
  41 │         ports:
  42 │         - containerPort: 9090
  43 └           name: exporter
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests/21-session-db-dep.yaml (kubernetes)
===============================================================
Tests: 141 (SUCCESSES: 130, FAILURES: 11, EXCEPTIONS: 0)
Failures: 11 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'session-db' of Deployment 'session-db' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/21-session-db-dep.yaml:22-35
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - name: session-db
  23 │         image: redis:alpine
  24 │         ports:
  25 │         - name: redis
  26 │           containerPort: 6379
  27 │         securityContext:
  28 │           capabilities:
  29 │             drop:
  30 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'session-db' of Deployment 'session-db' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/21-session-db-dep.yaml:22-35
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - name: session-db
  23 │         image: redis:alpine
  24 │         ports:
  25 │         - name: redis
  26 │           containerPort: 6379
  27 │         securityContext:
  28 │           capabilities:
  29 │             drop:
  30 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'session-db' of Deployment 'session-db' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/21-session-db-dep.yaml:22-35
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - name: session-db
  23 │         image: redis:alpine
  24 │         ports:
  25 │         - name: redis
  26 │           containerPort: 6379
  27 │         securityContext:
  28 │           capabilities:
  29 │             drop:
  30 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'session-db' of Deployment 'session-db' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/21-session-db-dep.yaml:22-35
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - name: session-db
  23 │         image: redis:alpine
  24 │         ports:
  25 │         - name: redis
  26 │           containerPort: 6379
  27 │         securityContext:
  28 │           capabilities:
  29 │             drop:
  30 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'session-db' of Deployment 'session-db' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/21-session-db-dep.yaml:22-35
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - name: session-db
  23 │         image: redis:alpine
  24 │         ports:
  25 │         - name: redis
  26 │           containerPort: 6379
  27 │         securityContext:
  28 │           capabilities:
  29 │             drop:
  30 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'session-db' of Deployment 'session-db' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/21-session-db-dep.yaml:22-35
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - name: session-db
  23 │         image: redis:alpine
  24 │         ports:
  25 │         - name: redis
  26 │           containerPort: 6379
  27 │         securityContext:
  28 │           capabilities:
  29 │             drop:
  30 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'session-db' of Deployment 'session-db' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/21-session-db-dep.yaml:22-35
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - name: session-db
  23 │         image: redis:alpine
  24 │         ports:
  25 │         - name: redis
  26 │           containerPort: 6379
  27 │         securityContext:
  28 │           capabilities:
  29 │             drop:
  30 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'session-db' of Deployment 'session-db' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/21-session-db-dep.yaml:22-35
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - name: session-db
  23 │         image: redis:alpine
  24 │         ports:
  25 │         - name: redis
  26 │           containerPort: 6379
  27 │         securityContext:
  28 │           capabilities:
  29 │             drop:
  30 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'session-db' of Deployment 'session-db' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Adding NET_RAW or capabilities beyond the default set must be disallowed.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/21-session-db-dep.yaml:22-35
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - name: session-db
  23 │         image: redis:alpine
  24 │         ports:
  25 │         - name: redis
  26 │           containerPort: 6379
  27 │         securityContext:
  28 │           capabilities:
  29 │             drop:
  30 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/21-session-db-dep.yaml:22-35
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - name: session-db
  23 │         image: redis:alpine
  24 │         ports:
  25 │         - name: redis
  26 │           containerPort: 6379
  27 │         securityContext:
  28 │           capabilities:
  29 │             drop:
  30 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/21-session-db-dep.yaml:22-35
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - name: session-db
  23 │         image: redis:alpine
  24 │         ports:
  25 │         - name: redis
  26 │           containerPort: 6379
  27 │         securityContext:
  28 │           capabilities:
  29 │             drop:
  30 └               - all
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests/23-shipping-dep.yaml (kubernetes)
=============================================================
Tests: 141 (SUCCESSES: 136, FAILURES: 5, EXCEPTIONS: 0)
Failures: 5 (UNKNOWN: 0, LOW: 3, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'shipping' of Deployment 'shipping' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/23-shipping-dep.yaml:20-47
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: shipping
  21 │         image: weaveworksdemos/shipping:0.4.8
  22 │         env:
  23 │          - name: ZIPKIN
  24 │            value: zipkin.jaeger.svc.cluster.local
  25 │          - name: JAVA_OPTS
  26 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  27 │         resources:
  28 └           limits:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'shipping' of Deployment 'shipping' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/23-shipping-dep.yaml:20-47
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: shipping
  21 │         image: weaveworksdemos/shipping:0.4.8
  22 │         env:
  23 │          - name: ZIPKIN
  24 │            value: zipkin.jaeger.svc.cluster.local
  25 │          - name: JAVA_OPTS
  26 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  27 │         resources:
  28 └           limits:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'shipping' of Deployment 'shipping' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Adding NET_RAW or capabilities beyond the default set must be disallowed.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/23-shipping-dep.yaml:20-47
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: shipping
  21 │         image: weaveworksdemos/shipping:0.4.8
  22 │         env:
  23 │          - name: ZIPKIN
  24 │            value: zipkin.jaeger.svc.cluster.local
  25 │          - name: JAVA_OPTS
  26 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  27 │         resources:
  28 └           limits:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/23-shipping-dep.yaml:20-47
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: shipping
  21 │         image: weaveworksdemos/shipping:0.4.8
  22 │         env:
  23 │          - name: ZIPKIN
  24 │            value: zipkin.jaeger.svc.cluster.local
  25 │          - name: JAVA_OPTS
  26 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  27 │         resources:
  28 └           limits:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/23-shipping-dep.yaml:20-47
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: shipping
  21 │         image: weaveworksdemos/shipping:0.4.8
  22 │         env:
  23 │          - name: ZIPKIN
  24 │            value: zipkin.jaeger.svc.cluster.local
  25 │          - name: JAVA_OPTS
  26 │            value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom -Dspring.zipkin.enabled=false
  27 │         resources:
  28 └           limits:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests/25-user-dep.yaml (kubernetes)
=========================================================
Tests: 141 (SUCCESSES: 136, FAILURES: 5, EXCEPTIONS: 0)
Failures: 5 (UNKNOWN: 0, LOW: 3, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'user' of Deployment 'user' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/25-user-dep.yaml:20-54
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: user
  21 │         image: weaveworksdemos/user:0.4.7
  22 │         resources:
  23 │           limits:
  24 │             cpu: 300m
  25 │             memory: 200Mi
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'user' of Deployment 'user' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/25-user-dep.yaml:20-54
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: user
  21 │         image: weaveworksdemos/user:0.4.7
  22 │         resources:
  23 │           limits:
  24 │             cpu: 300m
  25 │             memory: 200Mi
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'user' of Deployment 'user' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Adding NET_RAW or capabilities beyond the default set must be disallowed.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/25-user-dep.yaml:20-54
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: user
  21 │         image: weaveworksdemos/user:0.4.7
  22 │         resources:
  23 │           limits:
  24 │             cpu: 300m
  25 │             memory: 200Mi
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/25-user-dep.yaml:20-54
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: user
  21 │         image: weaveworksdemos/user:0.4.7
  22 │         resources:
  23 │           limits:
  24 │             cpu: 300m
  25 │             memory: 200Mi
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/25-user-dep.yaml:20-54
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: user
  21 │         image: weaveworksdemos/user:0.4.7
  22 │         resources:
  23 │           limits:
  24 │             cpu: 300m
  25 │             memory: 200Mi
  26 │           requests:
  27 │             cpu: 100m
  28 └             memory: 100Mi
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/kubernetes/manifests/27-user-db-dep.yaml (kubernetes)
============================================================
Tests: 141 (SUCCESSES: 130, FAILURES: 11, EXCEPTIONS: 0)
Failures: 11 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'user-db' of Deployment 'user-db' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/27-user-db-dep.yaml:20-37
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: user-db
  21 │         image: weaveworksdemos/user-db:0.3.0
  22 │ 
  23 │         ports:
  24 │         - name: mongo
  25 │           containerPort: 27017
  26 │         securityContext:
  27 │           capabilities:
  28 └             drop:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'user-db' of Deployment 'user-db' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/27-user-db-dep.yaml:20-37
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: user-db
  21 │         image: weaveworksdemos/user-db:0.3.0
  22 │ 
  23 │         ports:
  24 │         - name: mongo
  25 │           containerPort: 27017
  26 │         securityContext:
  27 │           capabilities:
  28 └             drop:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'user-db' of Deployment 'user-db' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/27-user-db-dep.yaml:20-37
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: user-db
  21 │         image: weaveworksdemos/user-db:0.3.0
  22 │ 
  23 │         ports:
  24 │         - name: mongo
  25 │           containerPort: 27017
  26 │         securityContext:
  27 │           capabilities:
  28 └             drop:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'user-db' of Deployment 'user-db' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/27-user-db-dep.yaml:20-37
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: user-db
  21 │         image: weaveworksdemos/user-db:0.3.0
  22 │ 
  23 │         ports:
  24 │         - name: mongo
  25 │           containerPort: 27017
  26 │         securityContext:
  27 │           capabilities:
  28 └             drop:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'user-db' of Deployment 'user-db' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/27-user-db-dep.yaml:20-37
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: user-db
  21 │         image: weaveworksdemos/user-db:0.3.0
  22 │ 
  23 │         ports:
  24 │         - name: mongo
  25 │           containerPort: 27017
  26 │         securityContext:
  27 │           capabilities:
  28 └             drop:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'user-db' of Deployment 'user-db' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/27-user-db-dep.yaml:20-37
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: user-db
  21 │         image: weaveworksdemos/user-db:0.3.0
  22 │ 
  23 │         ports:
  24 │         - name: mongo
  25 │           containerPort: 27017
  26 │         securityContext:
  27 │           capabilities:
  28 └             drop:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'user-db' of Deployment 'user-db' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/27-user-db-dep.yaml:20-37
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: user-db
  21 │         image: weaveworksdemos/user-db:0.3.0
  22 │ 
  23 │         ports:
  24 │         - name: mongo
  25 │           containerPort: 27017
  26 │         securityContext:
  27 │           capabilities:
  28 └             drop:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'user-db' of Deployment 'user-db' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/27-user-db-dep.yaml:20-37
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: user-db
  21 │         image: weaveworksdemos/user-db:0.3.0
  22 │ 
  23 │         ports:
  24 │         - name: mongo
  25 │           containerPort: 27017
  26 │         securityContext:
  27 │           capabilities:
  28 └             drop:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'user-db' of Deployment 'user-db' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Adding NET_RAW or capabilities beyond the default set must be disallowed.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/27-user-db-dep.yaml:20-37
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: user-db
  21 │         image: weaveworksdemos/user-db:0.3.0
  22 │ 
  23 │         ports:
  24 │         - name: mongo
  25 │           containerPort: 27017
  26 │         securityContext:
  27 │           capabilities:
  28 └             drop:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/27-user-db-dep.yaml:20-37
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: user-db
  21 │         image: weaveworksdemos/user-db:0.3.0
  22 │ 
  23 │         ports:
  24 │         - name: mongo
  25 │           containerPort: 27017
  26 │         securityContext:
  27 │           capabilities:
  28 └             drop:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/kubernetes/manifests/27-user-db-dep.yaml:20-37
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌       - name: user-db
  21 │         image: weaveworksdemos/user-db:0.3.0
  22 │ 
  23 │         ports:
  24 │         - name: mongo
  25 │           containerPort: 27017
  26 │         securityContext:
  27 │           capabilities:
  28 └             drop:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



graphs/Dockerfile (dockerfile)
==============================
Tests: 24 (SUCCESSES: 20, FAILURES: 4, EXCEPTIONS: 0)
Failures: 4 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 3, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


HIGH: MAINTAINER should not be used: 'MAINTAINER Container Solutions info@container-solutions.com'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
MAINTAINER has been deprecated since Docker 1.13.0.

See https://avd.aquasec.com/misconfig/ds022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 graphs/Dockerfile:3
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   3 [ MAINTAINER Container Solutions info@container-solutions.com
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


HIGH: '--no-cache' is missed: apk add -U curl git parallel
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should use 'apk add' with '--no-cache' to clean package cached data and reduce image size.

See https://avd.aquasec.com/misconfig/ds025
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 graphs/Dockerfile:6
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   6 [ RUN apk add -U curl git parallel
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



healthcheck/Dockerfile (dockerfile)
===================================
Tests: 24 (SUCCESSES: 21, FAILURES: 3, EXCEPTIONS: 0)
Failures: 3 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 2, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


HIGH: '--no-cache' is missed: apk update &&     apk add ruby ruby-json ruby-rdoc ruby-irb
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should use 'apk add' with '--no-cache' to clean package cached data and reduce image size.

See https://avd.aquasec.com/misconfig/ds025
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 healthcheck/Dockerfile:3-4
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   3 ┌ RUN apk update && \
   4 └     apk add ruby ruby-json ruby-rdoc ruby-irb
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



openapi/Dockerfile (dockerfile)
===============================
Tests: 24 (SUCCESSES: 20, FAILURES: 4, EXCEPTIONS: 0)
Failures: 4 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 3, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


HIGH: The instruction 'RUN <package-manager> update' should always be followed by '<package-manager> install' in the same RUN statement.
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The instruction 'RUN <package-manager> update' should always be followed by '<package-manager> install' in the same RUN statement.

See https://avd.aquasec.com/misconfig/ds017
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 openapi/Dockerfile:7
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   7 [ RUN apk update
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


HIGH: '--no-cache' is missed: apk add git python
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should use 'apk add' with '--no-cache' to clean package cached data and reduce image size.

See https://avd.aquasec.com/misconfig/ds025
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 openapi/Dockerfile:8
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   8 [ RUN apk add git python
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



staging/main.tf (terraform)
===========================
Tests: 14 (SUCCESSES: 3, FAILURES: 11, EXCEPTIONS: 0)
Failures: 11 (UNKNOWN: 0, LOW: 4, MEDIUM: 0, HIGH: 5, CRITICAL: 2)

HIGH: Instance does not require IMDS access to require a token
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

IMDS v2 (Instance Metadata Service) introduced session authentication tokens which improve security when talking to IMDS.
By default <code>aws_instance</code> resource sets IMDS session auth tokens to be optional. 
To fully protect IMDS you need to enable session tokens by using <code>metadata_options</code> block and its <code>http_tokens</code> variable set to <code>required</code>.


See https://avd.aquasec.com/misconfig/avd-aws-0028
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 staging/main.tf:34-69
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  34 ┌ resource "aws_instance" "k8s-node" {
  35 │   depends_on      = [ "aws_instance.k8s-master" ] 
  36 │   count           = "${var.nodecount}"
  37 │   instance_type   = "${var.node_instance_type}"
  38 │   ami             = "${lookup(var.aws_amis, var.aws_region)}"
  39 │   key_name        = "${var.key_name}"
  40 │   security_groups = ["${aws_security_group.microservices-demo-staging-k8s.name}"]
  41 │   tags {
  42 └     Name = "microservices-demo-staging-node"
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


HIGH: Instance does not require IMDS access to require a token
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

IMDS v2 (Instance Metadata Service) introduced session authentication tokens which improve security when talking to IMDS.
By default <code>aws_instance</code> resource sets IMDS session auth tokens to be optional. 
To fully protect IMDS you need to enable session tokens by using <code>metadata_options</code> block and its <code>http_tokens</code> variable set to <code>required</code>.


See https://avd.aquasec.com/misconfig/avd-aws-0028
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 staging/main.tf:71-115
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  71 ┌ resource "aws_instance" "k8s-master" {
  72 │   instance_type   = "${var.master_instance_type}"
  73 │   ami             = "${lookup(var.aws_amis, var.aws_region)}"
  74 │   key_name        = "${var.key_name}"
  75 │   security_groups = ["${aws_security_group.microservices-demo-staging-k8s.name}"]
  76 │   tags {
  77 │     Name = "microservices-demo-staging-master"
  78 │   }
  79 └ 
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


HIGH: Load balancer is exposed publicly.
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
There are many scenarios in which you would want to expose a load balancer to the wider internet, but this check exists as a warning to prevent accidental exposure of internal assets. You should ensure that this resource should be exposed publicly.

See https://avd.aquasec.com/misconfig/avd-aws-0053
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 staging/main.tf:124-137
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 124 ┌ resource "aws_elb" "microservices-demo-staging-k8s" {
 125 │   depends_on = [ "aws_instance.k8s-node" ]
 126 │   name = "microservices-demo-staging-k8s"
 127 │   instances = ["${aws_instance.k8s-node.*.id}"]
 128 │   availability_zones = ["eu-west-1a", "eu-west-1b", "eu-west-1c"]
 129 │   security_groups = ["${aws_security_group.microservices-demo-staging-k8s.id}"]
 130 │ 
 131 │   listener {
 132 └     lb_port = 80
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


CRITICAL: Security group rule allows egress to multiple public internet addresses.
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Opening up ports to connect out to the public internet is generally to be avoided. You should restrict access to IP addresses or ranges that are explicitly required where possible.

See https://avd.aquasec.com/misconfig/avd-aws-0104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 staging/main.tf:30
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   5   resource "aws_security_group" "microservices-demo-staging-k8s" {
   .   
  30 [     cidr_blocks = ["0.0.0.0/0"]
  ..   
  32   }
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


CRITICAL: Security group rule allows ingress from public internet.
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Opening up ports to the public internet is generally to be avoided. You should restrict access to IP addresses or ranges that explicitly require it where possible.

See https://avd.aquasec.com/misconfig/avd-aws-0107
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 staging/main.tf:24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   5   resource "aws_security_group" "microservices-demo-staging-k8s" {
   .   
  24 [     cidr_blocks = ["0.0.0.0/0"]
  ..   
  32   }
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Security group rule does not have a description.
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Security group rules should include a description for auditing purposes.

Simplifies auditing, debugging, and managing security groups.

See https://avd.aquasec.com/misconfig/avd-aws-0124
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 staging/main.tf:8-13
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   5   resource "aws_security_group" "microservices-demo-staging-k8s" {
   .   
   8 ┌   ingress {
   9 │     from_port   = 0
  10 │     to_port     = 0
  11 │     protocol    = "-1"
  12 │     self        = "true"
  13 └   }
  ..   
  32   }
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Security group rule does not have a description.
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Security group rules should include a description for auditing purposes.

Simplifies auditing, debugging, and managing security groups.

See https://avd.aquasec.com/misconfig/avd-aws-0124
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 staging/main.tf:14-19
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   5   resource "aws_security_group" "microservices-demo-staging-k8s" {
   .   
  14 ┌   ingress {
  15 │     from_port       = 0
  16 │     to_port         = 0
  17 │     protocol        = "-1"
  18 │     security_groups = ["${var.bastion_security_group}"]
  19 └   }
  ..   
  32   }
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Security group rule does not have a description.
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Security group rules should include a description for auditing purposes.

Simplifies auditing, debugging, and managing security groups.

See https://avd.aquasec.com/misconfig/avd-aws-0124
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 staging/main.tf:20-25
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   5   resource "aws_security_group" "microservices-demo-staging-k8s" {
   .   
  20 ┌   ingress {
  21 │     from_port   = 80
  22 │     to_port     = 80
  23 │     protocol    = "tcp"
  24 │     cidr_blocks = ["0.0.0.0/0"]
  25 └   }
  ..   
  32   }
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Security group rule does not have a description.
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Security group rules should include a description for auditing purposes.

Simplifies auditing, debugging, and managing security groups.

See https://avd.aquasec.com/misconfig/avd-aws-0124
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 staging/main.tf:26-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   5   resource "aws_security_group" "microservices-demo-staging-k8s" {
   .   
  26 ┌   egress {
  27 │     from_port   = 0
  28 │     to_port     = 0
  29 │     protocol    = "-1"
  30 │     cidr_blocks = ["0.0.0.0/0"]
  31 └   }
  32   }
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


HIGH: Root block device is not encrypted.
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Block devices should be encrypted to ensure sensitive data is held securely at rest.

See https://avd.aquasec.com/misconfig/avd-aws-0131
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 staging/main.tf:34-69
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  34 ┌ resource "aws_instance" "k8s-node" {
  35 │   depends_on      = [ "aws_instance.k8s-master" ] 
  36 │   count           = "${var.nodecount}"
  37 │   instance_type   = "${var.node_instance_type}"
  38 │   ami             = "${lookup(var.aws_amis, var.aws_region)}"
  39 │   key_name        = "${var.key_name}"
  40 │   security_groups = ["${aws_security_group.microservices-demo-staging-k8s.name}"]
  41 │   tags {
  42 └     Name = "microservices-demo-staging-node"
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


HIGH: Root block device is not encrypted.
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Block devices should be encrypted to ensure sensitive data is held securely at rest.

See https://avd.aquasec.com/misconfig/avd-aws-0131
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 staging/main.tf:71-115
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  71 ┌ resource "aws_instance" "k8s-master" {
  72 │   instance_type   = "${var.master_instance_type}"
  73 │   ami             = "${lookup(var.aws_amis, var.aws_region)}"
  74 │   key_name        = "${var.key_name}"
  75 │   security_groups = ["${aws_security_group.microservices-demo-staging-k8s.name}"]
  76 │   tags {
  77 │     Name = "microservices-demo-staging-master"
  78 │   }
  79 └ 
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


