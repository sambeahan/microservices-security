Enumerating objects: 3499, done.
Counting objects:   0% (1/3499)
Counting objects:   1% (35/3499)
Counting objects:   2% (70/3499)
Counting objects:   3% (105/3499)
Counting objects:   4% (140/3499)
Counting objects:   5% (175/3499)
Counting objects:   6% (210/3499)
Counting objects:   7% (245/3499)
Counting objects:   8% (280/3499)
Counting objects:   9% (315/3499)
Counting objects:  10% (350/3499)
Counting objects:  11% (385/3499)
Counting objects:  12% (420/3499)
Counting objects:  13% (455/3499)
Counting objects:  14% (490/3499)
Counting objects:  15% (525/3499)
Counting objects:  16% (560/3499)
Counting objects:  17% (595/3499)
Counting objects:  18% (630/3499)
Counting objects:  19% (665/3499)
Counting objects:  20% (700/3499)
Counting objects:  21% (735/3499)
Counting objects:  22% (770/3499)
Counting objects:  23% (805/3499)
Counting objects:  24% (840/3499)
Counting objects:  25% (875/3499)
Counting objects:  26% (910/3499)
Counting objects:  27% (945/3499)
Counting objects:  28% (980/3499)
Counting objects:  29% (1015/3499)
Counting objects:  30% (1050/3499)
Counting objects:  31% (1085/3499)
Counting objects:  32% (1120/3499)
Counting objects:  33% (1155/3499)
Counting objects:  34% (1190/3499)
Counting objects:  35% (1225/3499)
Counting objects:  36% (1260/3499)
Counting objects:  37% (1295/3499)
Counting objects:  38% (1330/3499)
Counting objects:  39% (1365/3499)
Counting objects:  40% (1400/3499)
Counting objects:  41% (1435/3499)
Counting objects:  42% (1470/3499)
Counting objects:  43% (1505/3499)
Counting objects:  44% (1540/3499)
Counting objects:  45% (1575/3499)
Counting objects:  46% (1610/3499)
Counting objects:  47% (1645/3499)
Counting objects:  48% (1680/3499)
Counting objects:  49% (1715/3499)
Counting objects:  50% (1750/3499)
Counting objects:  51% (1785/3499)
Counting objects:  52% (1820/3499)
Counting objects:  53% (1855/3499)
Counting objects:  54% (1890/3499)
Counting objects:  55% (1925/3499)
Counting objects:  56% (1960/3499)
Counting objects:  57% (1995/3499)
Counting objects:  58% (2030/3499)
Counting objects:  59% (2065/3499)
Counting objects:  60% (2100/3499)
Counting objects:  61% (2135/3499)
Counting objects:  62% (2170/3499)
Counting objects:  63% (2205/3499)
Counting objects:  64% (2240/3499)
Counting objects:  65% (2275/3499)
Counting objects:  66% (2310/3499)
Counting objects:  67% (2345/3499)
Counting objects:  68% (2380/3499)
Counting objects:  69% (2415/3499)
Counting objects:  70% (2450/3499)
Counting objects:  71% (2485/3499)
Counting objects:  72% (2520/3499)
Counting objects:  73% (2555/3499)
Counting objects:  74% (2590/3499)
Counting objects:  75% (2625/3499)
Counting objects:  76% (2660/3499)
Counting objects:  77% (2695/3499)
Counting objects:  78% (2730/3499)
Counting objects:  79% (2765/3499)
Counting objects:  80% (2800/3499)
Counting objects:  81% (2835/3499)
Counting objects:  82% (2870/3499)
Counting objects:  83% (2905/3499)
Counting objects:  84% (2940/3499)
Counting objects:  85% (2975/3499)
Counting objects:  86% (3010/3499)
Counting objects:  87% (3045/3499)
Counting objects:  88% (3080/3499)
Counting objects:  89% (3115/3499)
Counting objects:  90% (3150/3499)
Counting objects:  91% (3185/3499)
Counting objects:  92% (3220/3499)
Counting objects:  93% (3255/3499)
Counting objects:  94% (3290/3499)
Counting objects:  95% (3325/3499)
Counting objects:  96% (3360/3499)
Counting objects:  97% (3395/3499)
Counting objects:  98% (3430/3499)
Counting objects:  99% (3465/3499)
Counting objects: 100% (3499/3499)
Counting objects: 100% (3499/3499), done.
Compressing objects:   0% (1/2047)
Compressing objects:   1% (21/2047)
Compressing objects:   2% (41/2047)
Compressing objects:   3% (62/2047)
Compressing objects:   4% (82/2047)
Compressing objects:   5% (103/2047)
Compressing objects:   6% (123/2047)
Compressing objects:   7% (144/2047)
Compressing objects:   8% (164/2047)
Compressing objects:   9% (185/2047)
Compressing objects:  10% (205/2047)
Compressing objects:  11% (226/2047)
Compressing objects:  12% (246/2047)
Compressing objects:  13% (267/2047)
Compressing objects:  14% (287/2047)
Compressing objects:  15% (308/2047)
Compressing objects:  16% (328/2047)
Compressing objects:  17% (348/2047)
Compressing objects:  18% (369/2047)
Compressing objects:  19% (389/2047)
Compressing objects:  20% (410/2047)
Compressing objects:  21% (430/2047)
Compressing objects:  22% (451/2047)
Compressing objects:  23% (471/2047)
Compressing objects:  24% (492/2047)
Compressing objects:  25% (512/2047)
Compressing objects:  26% (533/2047)
Compressing objects:  27% (553/2047)
Compressing objects:  28% (574/2047)
Compressing objects:  29% (594/2047)
Compressing objects:  30% (615/2047)
Compressing objects:  31% (635/2047)
Compressing objects:  32% (656/2047)
Compressing objects:  33% (676/2047)
Compressing objects:  34% (696/2047)
Compressing objects:  35% (717/2047)
Compressing objects:  36% (737/2047)
Compressing objects:  37% (758/2047)
Compressing objects:  38% (778/2047)
Compressing objects:  39% (799/2047)
Compressing objects:  40% (819/2047)
Compressing objects:  41% (840/2047)
Compressing objects:  42% (860/2047)
Compressing objects:  43% (881/2047)
Compressing objects:  44% (901/2047)
Compressing objects:  45% (922/2047)
Compressing objects:  46% (942/2047)
Compressing objects:  47% (963/2047)
Compressing objects:  48% (983/2047)
Compressing objects:  49% (1004/2047)
Compressing objects:  50% (1024/2047)
Compressing objects:  51% (1044/2047)
Compressing objects:  52% (1065/2047)
Compressing objects:  53% (1085/2047)
Compressing objects:  54% (1106/2047)
Compressing objects:  55% (1126/2047)
Compressing objects:  56% (1147/2047)
Compressing objects:  57% (1167/2047)
Compressing objects:  58% (1188/2047)
Compressing objects:  59% (1208/2047)
Compressing objects:  60% (1229/2047)
Compressing objects:  61% (1249/2047)
Compressing objects:  62% (1270/2047)
Compressing objects:  63% (1290/2047)
Compressing objects:  64% (1311/2047)
Compressing objects:  65% (1331/2047)
Compressing objects:  66% (1352/2047)
Compressing objects:  67% (1372/2047)
Compressing objects:  68% (1392/2047)
Compressing objects:  69% (1413/2047)
Compressing objects:  70% (1433/2047)
Compressing objects:  71% (1454/2047)
Compressing objects:  72% (1474/2047)
Compressing objects:  73% (1495/2047)
Compressing objects:  74% (1515/2047)
Compressing objects:  75% (1536/2047)
Compressing objects:  76% (1556/2047)
Compressing objects:  77% (1577/2047)
Compressing objects:  78% (1597/2047)
Compressing objects:  79% (1618/2047)
Compressing objects:  80% (1638/2047)
Compressing objects:  81% (1659/2047)
Compressing objects:  82% (1679/2047)
Compressing objects:  83% (1700/2047)
Compressing objects:  84% (1720/2047)
Compressing objects:  85% (1740/2047)
Compressing objects:  86% (1761/2047)
Compressing objects:  87% (1781/2047)
Compressing objects:  88% (1802/2047)
Compressing objects:  89% (1822/2047)
Compressing objects:  90% (1843/2047)
Compressing objects:  91% (1863/2047)
Compressing objects:  92% (1884/2047)
Compressing objects:  93% (1904/2047)
Compressing objects:  94% (1925/2047)
Compressing objects:  95% (1945/2047)
Compressing objects:  96% (1966/2047)
Compressing objects:  97% (1986/2047)
Compressing objects:  98% (2007/2047)
Compressing objects:  99% (2027/2047)
Compressing objects: 100% (2047/2047)
Compressing objects: 100% (2047/2047), done.
Total 3499 (delta 1973), reused 2570 (delta 1283), pack-reused 0

codelabs/cicd-k8s-best-practice/app/manifests/demo/templates/deployment.yaml (helm)
===================================================================================
Tests: 141 (SUCCESSES: 128, FAILURES: 13, EXCEPTIONS: 0)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'demo' of Deployment 'demo' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/cicd-k8s-best-practice/app/manifests/demo/templates/deployment.yaml:26-40
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌       - name: demo
  27 │         image: "gcr.io/spinnaker-playground/demo"
  28 │         ports:
  29 │         - name: http
  30 │           containerPort: 80
  31 │           protocol: TCP
  32 │         readinessProbe:
  33 │           httpGet:
  34 └             path: /
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'demo' of Deployment 'demo' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/cicd-k8s-best-practice/app/manifests/demo/templates/deployment.yaml:26-40
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌       - name: demo
  27 │         image: "gcr.io/spinnaker-playground/demo"
  28 │         ports:
  29 │         - name: http
  30 │           containerPort: 80
  31 │           protocol: TCP
  32 │         readinessProbe:
  33 │           httpGet:
  34 └             path: /
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'demo' of Deployment 'demo' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/cicd-k8s-best-practice/app/manifests/demo/templates/deployment.yaml:26-40
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌       - name: demo
  27 │         image: "gcr.io/spinnaker-playground/demo"
  28 │         ports:
  29 │         - name: http
  30 │           containerPort: 80
  31 │           protocol: TCP
  32 │         readinessProbe:
  33 │           httpGet:
  34 └             path: /
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'demo' of Deployment 'demo' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/cicd-k8s-best-practice/app/manifests/demo/templates/deployment.yaml:26-40
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌       - name: demo
  27 │         image: "gcr.io/spinnaker-playground/demo"
  28 │         ports:
  29 │         - name: http
  30 │           containerPort: 80
  31 │           protocol: TCP
  32 │         readinessProbe:
  33 │           httpGet:
  34 └             path: /
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'demo' of Deployment 'demo' should specify an image tag
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/cicd-k8s-best-practice/app/manifests/demo/templates/deployment.yaml:26-40
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌       - name: demo
  27 │         image: "gcr.io/spinnaker-playground/demo"
  28 │         ports:
  29 │         - name: http
  30 │           containerPort: 80
  31 │           protocol: TCP
  32 │         readinessProbe:
  33 │           httpGet:
  34 └             path: /
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'demo' of Deployment 'demo' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/cicd-k8s-best-practice/app/manifests/demo/templates/deployment.yaml:26-40
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌       - name: demo
  27 │         image: "gcr.io/spinnaker-playground/demo"
  28 │         ports:
  29 │         - name: http
  30 │           containerPort: 80
  31 │           protocol: TCP
  32 │         readinessProbe:
  33 │           httpGet:
  34 └             path: /
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'demo' of Deployment 'demo' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/cicd-k8s-best-practice/app/manifests/demo/templates/deployment.yaml:26-40
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌       - name: demo
  27 │         image: "gcr.io/spinnaker-playground/demo"
  28 │         ports:
  29 │         - name: http
  30 │           containerPort: 80
  31 │           protocol: TCP
  32 │         readinessProbe:
  33 │           httpGet:
  34 └             path: /
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'demo' of Deployment 'demo' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/cicd-k8s-best-practice/app/manifests/demo/templates/deployment.yaml:26-40
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌       - name: demo
  27 │         image: "gcr.io/spinnaker-playground/demo"
  28 │         ports:
  29 │         - name: http
  30 │           containerPort: 80
  31 │           protocol: TCP
  32 │         readinessProbe:
  33 │           httpGet:
  34 └             path: /
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'demo' of Deployment 'demo' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/cicd-k8s-best-practice/app/manifests/demo/templates/deployment.yaml:26-40
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌       - name: demo
  27 │         image: "gcr.io/spinnaker-playground/demo"
  28 │         ports:
  29 │         - name: http
  30 │           containerPort: 80
  31 │           protocol: TCP
  32 │         readinessProbe:
  33 │           httpGet:
  34 └             path: /
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'demo' of Deployment 'demo' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/cicd-k8s-best-practice/app/manifests/demo/templates/deployment.yaml:26-40
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌       - name: demo
  27 │         image: "gcr.io/spinnaker-playground/demo"
  28 │         ports:
  29 │         - name: http
  30 │           containerPort: 80
  31 │           protocol: TCP
  32 │         readinessProbe:
  33 │           httpGet:
  34 └             path: /
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'demo' of Deployment 'demo' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/cicd-k8s-best-practice/app/manifests/demo/templates/deployment.yaml:26-40
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌       - name: demo
  27 │         image: "gcr.io/spinnaker-playground/demo"
  28 │         ports:
  29 │         - name: http
  30 │           containerPort: 80
  31 │           protocol: TCP
  32 │         readinessProbe:
  33 │           httpGet:
  34 └             path: /
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/cicd-k8s-best-practice/app/manifests/demo/templates/deployment.yaml:26-40
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌       - name: demo
  27 │         image: "gcr.io/spinnaker-playground/demo"
  28 │         ports:
  29 │         - name: http
  30 │           containerPort: 80
  31 │           protocol: TCP
  32 │         readinessProbe:
  33 │           httpGet:
  34 └             path: /
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/cicd-k8s-best-practice/app/manifests/demo/templates/deployment.yaml:26-40
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌       - name: demo
  27 │         image: "gcr.io/spinnaker-playground/demo"
  28 │         ports:
  29 │         - name: http
  30 │           containerPort: 80
  31 │           protocol: TCP
  32 │         readinessProbe:
  33 │           httpGet:
  34 └             path: /
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



codelabs/cicd-k8s-best-practice/app/src/Dockerfile (dockerfile)
===============================================================
Tests: 25 (SUCCESSES: 20, FAILURES: 5, EXCEPTIONS: 0)
Failures: 5 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

MEDIUM: Specify a tag in the 'FROM' statement for image 'golang'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When using a 'FROM' statement you should use a specific tag to avoid uncontrolled behavior when the image is updated.

See https://avd.aquasec.com/misconfig/ds001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/cicd-k8s-best-practice/app/src/Dockerfile:1
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   1 [ FROM golang
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Consider using 'COPY . /go/src/spinnaker.io/demo/demo' command instead of 'ADD . /go/src/spinnaker.io/demo/demo'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should use COPY instead of ADD unless you want to extract a tar file. Note that an ADD command will extract a tar file, which adds the risk of Zip-based vulnerabilities. Accordingly, it is advised to use a COPY command, which does not extract tar files.

See https://avd.aquasec.com/misconfig/ds005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/cicd-k8s-best-practice/app/src/Dockerfile:3
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   3 [ ADD . /go/src/spinnaker.io/demo/demo
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Consider using 'COPY ./content /content' command instead of 'ADD ./content /content'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should use COPY instead of ADD unless you want to extract a tar file. Note that an ADD command will extract a tar file, which adds the risk of Zip-based vulnerabilities. Accordingly, it is advised to use a COPY command, which does not extract tar files.

See https://avd.aquasec.com/misconfig/ds005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/cicd-k8s-best-practice/app/src/Dockerfile:7
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   7 [ ADD ./content /content
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



codelabs/gke-base/install/manifests.yml (kubernetes)
====================================================
Tests: 167 (SUCCESSES: 141, FAILURES: 26, EXCEPTIONS: 0)
Failures: 26 (UNKNOWN: 1, LOW: 20, MEDIUM: 5, HIGH: 0, CRITICAL: 0)

UNKNOWN: apiVersion 'apps/v1beta1' and kind ‘Deployment' should be replaced with the new API 'apps.v1.Deployment'
See https://github.com/kubernetes/kubernetes/tree/master/staging/src/k8s.io/api/extensions/v1beta1/zz_generated.prerelease-lifecycle.go
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Rego module: data.defsec.kubernetes.KSV107
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-base/install/manifests.yml:22-26
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌ 
  23 │ apiVersion: apps/v1beta1
  24 │ kind: Deployment
  25 │ metadata:
  26 └   name: spin-halyard
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'halyard-daemon' of Deployment 'spin-halyard' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-base/install/manifests.yml:44-77
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌       - name: halyard-daemon
  45 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
  46 │         imagePullPolicy: Always
  47 │         command:
  48 │         - /bin/sh
  49 │         args:
  50 │         - -c
  51 │         # when the configmap is mounted directly at /home/spinnaker/.hal the halyard daemon
  52 └         # isn't able to replace the contents of the mount with user modifications.
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'hal-deploy-apply' of Job 'hal-deploy-apply' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-base/install/manifests.yml:298-304
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 298 ┌       - name: hal-deploy-apply
 299 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
 300 │         command:
 301 │         - /bin/bash
 302 │         args:
 303 │         - -c
 304 └         - "hal config version edit --version {%SPINNAKER_VERSION%} --daemon-endpoint http://spin-halyard.spinnaker:8064 && hal deploy apply --no-validate --daemon-endpoint http://spin-halyard.spinnaker:8064"
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'halyard-daemon' of Deployment 'spin-halyard' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-base/install/manifests.yml:44-77
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌       - name: halyard-daemon
  45 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
  46 │         imagePullPolicy: Always
  47 │         command:
  48 │         - /bin/sh
  49 │         args:
  50 │         - -c
  51 │         # when the configmap is mounted directly at /home/spinnaker/.hal the halyard daemon
  52 └         # isn't able to replace the contents of the mount with user modifications.
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'hal-deploy-apply' of Job 'hal-deploy-apply' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-base/install/manifests.yml:298-304
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 298 ┌       - name: hal-deploy-apply
 299 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
 300 │         command:
 301 │         - /bin/bash
 302 │         args:
 303 │         - -c
 304 └         - "hal config version edit --version {%SPINNAKER_VERSION%} --daemon-endpoint http://spin-halyard.spinnaker:8064 && hal deploy apply --no-validate --daemon-endpoint http://spin-halyard.spinnaker:8064"
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'halyard-daemon' of Deployment 'spin-halyard' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-base/install/manifests.yml:44-77
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌       - name: halyard-daemon
  45 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
  46 │         imagePullPolicy: Always
  47 │         command:
  48 │         - /bin/sh
  49 │         args:
  50 │         - -c
  51 │         # when the configmap is mounted directly at /home/spinnaker/.hal the halyard daemon
  52 └         # isn't able to replace the contents of the mount with user modifications.
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'hal-deploy-apply' of Job 'hal-deploy-apply' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-base/install/manifests.yml:298-304
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 298 ┌       - name: hal-deploy-apply
 299 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
 300 │         command:
 301 │         - /bin/bash
 302 │         args:
 303 │         - -c
 304 └         - "hal config version edit --version {%SPINNAKER_VERSION%} --daemon-endpoint http://spin-halyard.spinnaker:8064 && hal deploy apply --no-validate --daemon-endpoint http://spin-halyard.spinnaker:8064"
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'halyard-daemon' of Deployment 'spin-halyard' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-base/install/manifests.yml:44-77
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌       - name: halyard-daemon
  45 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
  46 │         imagePullPolicy: Always
  47 │         command:
  48 │         - /bin/sh
  49 │         args:
  50 │         - -c
  51 │         # when the configmap is mounted directly at /home/spinnaker/.hal the halyard daemon
  52 └         # isn't able to replace the contents of the mount with user modifications.
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'hal-deploy-apply' of Job 'hal-deploy-apply' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-base/install/manifests.yml:298-304
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 298 ┌       - name: hal-deploy-apply
 299 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
 300 │         command:
 301 │         - /bin/bash
 302 │         args:
 303 │         - -c
 304 └         - "hal config version edit --version {%SPINNAKER_VERSION%} --daemon-endpoint http://spin-halyard.spinnaker:8064 && hal deploy apply --no-validate --daemon-endpoint http://spin-halyard.spinnaker:8064"
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'halyard-daemon' of Deployment 'spin-halyard' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-base/install/manifests.yml:44-77
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌       - name: halyard-daemon
  45 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
  46 │         imagePullPolicy: Always
  47 │         command:
  48 │         - /bin/sh
  49 │         args:
  50 │         - -c
  51 │         # when the configmap is mounted directly at /home/spinnaker/.hal the halyard daemon
  52 └         # isn't able to replace the contents of the mount with user modifications.
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'hal-deploy-apply' of Job 'hal-deploy-apply' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-base/install/manifests.yml:298-304
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 298 ┌       - name: hal-deploy-apply
 299 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
 300 │         command:
 301 │         - /bin/bash
 302 │         args:
 303 │         - -c
 304 └         - "hal config version edit --version {%SPINNAKER_VERSION%} --daemon-endpoint http://spin-halyard.spinnaker:8064 && hal deploy apply --no-validate --daemon-endpoint http://spin-halyard.spinnaker:8064"
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'halyard-daemon' of Deployment 'spin-halyard' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-base/install/manifests.yml:44-77
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌       - name: halyard-daemon
  45 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
  46 │         imagePullPolicy: Always
  47 │         command:
  48 │         - /bin/sh
  49 │         args:
  50 │         - -c
  51 │         # when the configmap is mounted directly at /home/spinnaker/.hal the halyard daemon
  52 └         # isn't able to replace the contents of the mount with user modifications.
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'hal-deploy-apply' of Job 'hal-deploy-apply' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-base/install/manifests.yml:298-304
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 298 ┌       - name: hal-deploy-apply
 299 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
 300 │         command:
 301 │         - /bin/bash
 302 │         args:
 303 │         - -c
 304 └         - "hal config version edit --version {%SPINNAKER_VERSION%} --daemon-endpoint http://spin-halyard.spinnaker:8064 && hal deploy apply --no-validate --daemon-endpoint http://spin-halyard.spinnaker:8064"
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'halyard-daemon' of Deployment 'spin-halyard' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-base/install/manifests.yml:44-77
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌       - name: halyard-daemon
  45 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
  46 │         imagePullPolicy: Always
  47 │         command:
  48 │         - /bin/sh
  49 │         args:
  50 │         - -c
  51 │         # when the configmap is mounted directly at /home/spinnaker/.hal the halyard daemon
  52 └         # isn't able to replace the contents of the mount with user modifications.
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'hal-deploy-apply' of Job 'hal-deploy-apply' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-base/install/manifests.yml:298-304
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 298 ┌       - name: hal-deploy-apply
 299 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
 300 │         command:
 301 │         - /bin/bash
 302 │         args:
 303 │         - -c
 304 └         - "hal config version edit --version {%SPINNAKER_VERSION%} --daemon-endpoint http://spin-halyard.spinnaker:8064 && hal deploy apply --no-validate --daemon-endpoint http://spin-halyard.spinnaker:8064"
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'halyard-daemon' of Deployment 'spin-halyard' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-base/install/manifests.yml:44-77
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌       - name: halyard-daemon
  45 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
  46 │         imagePullPolicy: Always
  47 │         command:
  48 │         - /bin/sh
  49 │         args:
  50 │         - -c
  51 │         # when the configmap is mounted directly at /home/spinnaker/.hal the halyard daemon
  52 └         # isn't able to replace the contents of the mount with user modifications.
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'hal-deploy-apply' of Job 'hal-deploy-apply' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-base/install/manifests.yml:298-304
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 298 ┌       - name: hal-deploy-apply
 299 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
 300 │         command:
 301 │         - /bin/bash
 302 │         args:
 303 │         - -c
 304 └         - "hal config version edit --version {%SPINNAKER_VERSION%} --daemon-endpoint http://spin-halyard.spinnaker:8064 && hal deploy apply --no-validate --daemon-endpoint http://spin-halyard.spinnaker:8064"
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'halyard-daemon' of Deployment 'spin-halyard' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-base/install/manifests.yml:44-77
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌       - name: halyard-daemon
  45 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
  46 │         imagePullPolicy: Always
  47 │         command:
  48 │         - /bin/sh
  49 │         args:
  50 │         - -c
  51 │         # when the configmap is mounted directly at /home/spinnaker/.hal the halyard daemon
  52 └         # isn't able to replace the contents of the mount with user modifications.
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'hal-deploy-apply' of Job 'hal-deploy-apply' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-base/install/manifests.yml:298-304
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 298 ┌       - name: hal-deploy-apply
 299 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
 300 │         command:
 301 │         - /bin/bash
 302 │         args:
 303 │         - -c
 304 └         - "hal config version edit --version {%SPINNAKER_VERSION%} --daemon-endpoint http://spin-halyard.spinnaker:8064 && hal deploy apply --no-validate --daemon-endpoint http://spin-halyard.spinnaker:8064"
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'halyard-daemon' of Deployment 'spin-halyard' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-base/install/manifests.yml:44-77
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌       - name: halyard-daemon
  45 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
  46 │         imagePullPolicy: Always
  47 │         command:
  48 │         - /bin/sh
  49 │         args:
  50 │         - -c
  51 │         # when the configmap is mounted directly at /home/spinnaker/.hal the halyard daemon
  52 └         # isn't able to replace the contents of the mount with user modifications.
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'hal-deploy-apply' of Job 'hal-deploy-apply' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-base/install/manifests.yml:298-304
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 298 ┌       - name: hal-deploy-apply
 299 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
 300 │         command:
 301 │         - /bin/bash
 302 │         args:
 303 │         - -c
 304 └         - "hal config version edit --version {%SPINNAKER_VERSION%} --daemon-endpoint http://spin-halyard.spinnaker:8064 && hal deploy apply --no-validate --daemon-endpoint http://spin-halyard.spinnaker:8064"
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-base/install/manifests.yml:44-77
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌       - name: halyard-daemon
  45 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
  46 │         imagePullPolicy: Always
  47 │         command:
  48 │         - /bin/sh
  49 │         args:
  50 │         - -c
  51 │         # when the configmap is mounted directly at /home/spinnaker/.hal the halyard daemon
  52 └         # isn't able to replace the contents of the mount with user modifications.
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-base/install/manifests.yml:298-304
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 298 ┌       - name: hal-deploy-apply
 299 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
 300 │         command:
 301 │         - /bin/bash
 302 │         args:
 303 │         - -c
 304 └         - "hal config version edit --version {%SPINNAKER_VERSION%} --daemon-endpoint http://spin-halyard.spinnaker:8064 && hal deploy apply --no-validate --daemon-endpoint http://spin-halyard.spinnaker:8064"
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-base/install/manifests.yml:44-77
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌       - name: halyard-daemon
  45 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
  46 │         imagePullPolicy: Always
  47 │         command:
  48 │         - /bin/sh
  49 │         args:
  50 │         - -c
  51 │         # when the configmap is mounted directly at /home/spinnaker/.hal the halyard daemon
  52 └         # isn't able to replace the contents of the mount with user modifications.
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-base/install/manifests.yml:298-304
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 298 ┌       - name: hal-deploy-apply
 299 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
 300 │         command:
 301 │         - /bin/bash
 302 │         args:
 303 │         - -c
 304 └         - "hal config version edit --version {%SPINNAKER_VERSION%} --daemon-endpoint http://spin-halyard.spinnaker:8064 && hal deploy apply --no-validate --daemon-endpoint http://spin-halyard.spinnaker:8064"
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: ClusterRoleBinding 'spinnaker-admin' with role 'cluster-admin' should be used only when required
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RBAC role cluster-admin provides wide-ranging powers over the environment and should be used only where and when needed.

See https://avd.aquasec.com/misconfig/ksv111
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-base/install/manifests.yml:11
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  11 [   name: spinnaker-admin
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



codelabs/gke-kayenta-workshop/services/backend/Dockerfile (dockerfile)
======================================================================
Tests: 24 (SUCCESSES: 20, FAILURES: 4, EXCEPTIONS: 0)
Failures: 4 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

MEDIUM: Specify a tag in the 'FROM' statement for image 'golang'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When using a 'FROM' statement you should use a specific tag to avoid uncontrolled behavior when the image is updated.

See https://avd.aquasec.com/misconfig/ds001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/backend/Dockerfile:1
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   1 [ FROM golang
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Consider using 'COPY . /go/src/spinnaker.io/demo/k8s-demo' command instead of 'ADD . /go/src/spinnaker.io/demo/k8s-demo'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should use COPY instead of ADD unless you want to extract a tar file. Note that an ADD command will extract a tar file, which adds the risk of Zip-based vulnerabilities. Accordingly, it is advised to use a COPY command, which does not extract tar files.

See https://avd.aquasec.com/misconfig/ds005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/backend/Dockerfile:3
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   3 [ ADD . /go/src/spinnaker.io/demo/k8s-demo
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



codelabs/gke-kayenta-workshop/services/frontend/Dockerfile (dockerfile)
=======================================================================
Tests: 25 (SUCCESSES: 20, FAILURES: 5, EXCEPTIONS: 0)
Failures: 5 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

MEDIUM: Specify a tag in the 'FROM' statement for image 'golang'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When using a 'FROM' statement you should use a specific tag to avoid uncontrolled behavior when the image is updated.

See https://avd.aquasec.com/misconfig/ds001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/frontend/Dockerfile:1
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   1 [ FROM golang
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Consider using 'COPY . /go/src/spinnaker.io/demo/k8s-demo' command instead of 'ADD . /go/src/spinnaker.io/demo/k8s-demo'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should use COPY instead of ADD unless you want to extract a tar file. Note that an ADD command will extract a tar file, which adds the risk of Zip-based vulnerabilities. Accordingly, it is advised to use a COPY command, which does not extract tar files.

See https://avd.aquasec.com/misconfig/ds005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/frontend/Dockerfile:3
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   3 [ ADD . /go/src/spinnaker.io/demo/k8s-demo
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Consider using 'COPY ./content /content' command instead of 'ADD ./content /content'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should use COPY instead of ADD unless you want to extract a tar file. Note that an ADD command will extract a tar file, which adds the risk of Zip-based vulnerabilities. Accordingly, it is advised to use a COPY command, which does not extract tar files.

See https://avd.aquasec.com/misconfig/ds005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/frontend/Dockerfile:7
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   7 [ ADD ./content /content
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



codelabs/gke-kayenta-workshop/services/manifests/backend.yml (kubernetes)
=========================================================================
Tests: 150 (SUCCESSES: 141, FAILURES: 9, EXCEPTIONS: 0)
Failures: 9 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'primary' of Deployment 'backend-${ canary ? "canary" : "primary" }' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/backend.yml:32-57
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  32 ┌       - name: primary
  33 │         image: gcr.io/{%PROJECT_ID%}/backend
  34 │         env:
  35 │         - name: POD_NAME
  36 │           valueFrom:
  37 │             fieldRef:
  38 │               fieldPath: metadata.name
  39 │         - name: NAMESPACE_NAME
  40 └           valueFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-${ canary ? "canary" : "primary" }' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/backend.yml:32-57
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  32 ┌       - name: primary
  33 │         image: gcr.io/{%PROJECT_ID%}/backend
  34 │         env:
  35 │         - name: POD_NAME
  36 │           valueFrom:
  37 │             fieldRef:
  38 │               fieldPath: metadata.name
  39 │         - name: NAMESPACE_NAME
  40 └           valueFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'backend-${ canary ? "canary" : "primary" }' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/backend.yml:32-57
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  32 ┌       - name: primary
  33 │         image: gcr.io/{%PROJECT_ID%}/backend
  34 │         env:
  35 │         - name: POD_NAME
  36 │           valueFrom:
  37 │             fieldRef:
  38 │               fieldPath: metadata.name
  39 │         - name: NAMESPACE_NAME
  40 └           valueFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'backend-${ canary ? "canary" : "primary" }' should specify an image tag
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/backend.yml:32-57
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  32 ┌       - name: primary
  33 │         image: gcr.io/{%PROJECT_ID%}/backend
  34 │         env:
  35 │         - name: POD_NAME
  36 │           valueFrom:
  37 │             fieldRef:
  38 │               fieldPath: metadata.name
  39 │         - name: NAMESPACE_NAME
  40 └           valueFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-${ canary ? "canary" : "primary" }' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/backend.yml:32-57
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  32 ┌       - name: primary
  33 │         image: gcr.io/{%PROJECT_ID%}/backend
  34 │         env:
  35 │         - name: POD_NAME
  36 │           valueFrom:
  37 │             fieldRef:
  38 │               fieldPath: metadata.name
  39 │         - name: NAMESPACE_NAME
  40 └           valueFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-${ canary ? "canary" : "primary" }' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/backend.yml:32-57
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  32 ┌       - name: primary
  33 │         image: gcr.io/{%PROJECT_ID%}/backend
  34 │         env:
  35 │         - name: POD_NAME
  36 │           valueFrom:
  37 │             fieldRef:
  38 │               fieldPath: metadata.name
  39 │         - name: NAMESPACE_NAME
  40 └           valueFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-${ canary ? "canary" : "primary" }' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/backend.yml:32-57
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  32 ┌       - name: primary
  33 │         image: gcr.io/{%PROJECT_ID%}/backend
  34 │         env:
  35 │         - name: POD_NAME
  36 │           valueFrom:
  37 │             fieldRef:
  38 │               fieldPath: metadata.name
  39 │         - name: NAMESPACE_NAME
  40 └           valueFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/backend.yml:32-57
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  32 ┌       - name: primary
  33 │         image: gcr.io/{%PROJECT_ID%}/backend
  34 │         env:
  35 │         - name: POD_NAME
  36 │           valueFrom:
  37 │             fieldRef:
  38 │               fieldPath: metadata.name
  39 │         - name: NAMESPACE_NAME
  40 └           valueFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/backend.yml:32-57
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  32 ┌       - name: primary
  33 │         image: gcr.io/{%PROJECT_ID%}/backend
  34 │         env:
  35 │         - name: POD_NAME
  36 │           valueFrom:
  37 │             fieldRef:
  38 │               fieldPath: metadata.name
  39 │         - name: NAMESPACE_NAME
  40 └           valueFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



codelabs/gke-kayenta-workshop/services/manifests/frontend.yml (kubernetes)
==========================================================================
Tests: 154 (SUCCESSES: 141, FAILURES: 13, EXCEPTIONS: 0)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'primary' of Deployment 'frontend-${ canary ? "canary" : "primary" }' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/frontend.yml:40-50
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  40 ┌       - name: primary
  41 │         image: gcr.io/{%PROJECT_ID%}/frontend
  42 │         ports:
  43 │         - containerPort: 8000
  44 │         readinessProbe:
  45 │           httpGet:
  46 │             path: /
  47 │             port: 8000
  48 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-${ canary ? "canary" : "primary" }' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/frontend.yml:40-50
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  40 ┌       - name: primary
  41 │         image: gcr.io/{%PROJECT_ID%}/frontend
  42 │         ports:
  43 │         - containerPort: 8000
  44 │         readinessProbe:
  45 │           httpGet:
  46 │             path: /
  47 │             port: 8000
  48 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-${ canary ? "canary" : "primary" }' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/frontend.yml:40-50
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  40 ┌       - name: primary
  41 │         image: gcr.io/{%PROJECT_ID%}/frontend
  42 │         ports:
  43 │         - containerPort: 8000
  44 │         readinessProbe:
  45 │           httpGet:
  46 │             path: /
  47 │             port: 8000
  48 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'frontend-${ canary ? "canary" : "primary" }' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/frontend.yml:40-50
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  40 ┌       - name: primary
  41 │         image: gcr.io/{%PROJECT_ID%}/frontend
  42 │         ports:
  43 │         - containerPort: 8000
  44 │         readinessProbe:
  45 │           httpGet:
  46 │             path: /
  47 │             port: 8000
  48 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'frontend-${ canary ? "canary" : "primary" }' should specify an image tag
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/frontend.yml:40-50
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  40 ┌       - name: primary
  41 │         image: gcr.io/{%PROJECT_ID%}/frontend
  42 │         ports:
  43 │         - containerPort: 8000
  44 │         readinessProbe:
  45 │           httpGet:
  46 │             path: /
  47 │             port: 8000
  48 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-${ canary ? "canary" : "primary" }' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/frontend.yml:40-50
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  40 ┌       - name: primary
  41 │         image: gcr.io/{%PROJECT_ID%}/frontend
  42 │         ports:
  43 │         - containerPort: 8000
  44 │         readinessProbe:
  45 │           httpGet:
  46 │             path: /
  47 │             port: 8000
  48 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-${ canary ? "canary" : "primary" }' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/frontend.yml:40-50
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  40 ┌       - name: primary
  41 │         image: gcr.io/{%PROJECT_ID%}/frontend
  42 │         ports:
  43 │         - containerPort: 8000
  44 │         readinessProbe:
  45 │           httpGet:
  46 │             path: /
  47 │             port: 8000
  48 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-${ canary ? "canary" : "primary" }' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/frontend.yml:40-50
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  40 ┌       - name: primary
  41 │         image: gcr.io/{%PROJECT_ID%}/frontend
  42 │         ports:
  43 │         - containerPort: 8000
  44 │         readinessProbe:
  45 │           httpGet:
  46 │             path: /
  47 │             port: 8000
  48 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-${ canary ? "canary" : "primary" }' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/frontend.yml:40-50
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  40 ┌       - name: primary
  41 │         image: gcr.io/{%PROJECT_ID%}/frontend
  42 │         ports:
  43 │         - containerPort: 8000
  44 │         readinessProbe:
  45 │           httpGet:
  46 │             path: /
  47 │             port: 8000
  48 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-${ canary ? "canary" : "primary" }' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/frontend.yml:40-50
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  40 ┌       - name: primary
  41 │         image: gcr.io/{%PROJECT_ID%}/frontend
  42 │         ports:
  43 │         - containerPort: 8000
  44 │         readinessProbe:
  45 │           httpGet:
  46 │             path: /
  47 │             port: 8000
  48 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-${ canary ? "canary" : "primary" }' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/frontend.yml:40-50
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  40 ┌       - name: primary
  41 │         image: gcr.io/{%PROJECT_ID%}/frontend
  42 │         ports:
  43 │         - containerPort: 8000
  44 │         readinessProbe:
  45 │           httpGet:
  46 │             path: /
  47 │             port: 8000
  48 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/frontend.yml:40-50
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  40 ┌       - name: primary
  41 │         image: gcr.io/{%PROJECT_ID%}/frontend
  42 │         ports:
  43 │         - containerPort: 8000
  44 │         readinessProbe:
  45 │           httpGet:
  46 │             path: /
  47 │             port: 8000
  48 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/frontend.yml:40-50
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  40 ┌       - name: primary
  41 │         image: gcr.io/{%PROJECT_ID%}/frontend
  42 │         ports:
  43 │         - containerPort: 8000
  44 │         readinessProbe:
  45 │           httpGet:
  46 │             path: /
  47 │             port: 8000
  48 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



codelabs/gke-kayenta-workshop/services/manifests/seeding.yml (kubernetes)
=========================================================================
Tests: 185 (SUCCESSES: 141, FAILURES: 44, EXCEPTIONS: 0)
Failures: 44 (UNKNOWN: 0, LOW: 32, MEDIUM: 12, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'primary' of Deployment 'frontend-primary' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:50-60
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  50 ┌       - name: primary
  51 │         image: gcr.io/{%PROJECT_ID%}/frontend
  52 │         ports:
  53 │         - containerPort: 8000
  54 │         readinessProbe:
  55 │           httpGet:
  56 │             path: /
  57 │             port: 8000
  58 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'backend-primary' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:111-136
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 111 ┌       - name: primary
 112 │         image: gcr.io/{%PROJECT_ID%}/backend
 113 │         env:
 114 │         - name: POD_NAME
 115 │           valueFrom:
 116 │             fieldRef:
 117 │               fieldPath: metadata.name
 118 │         - name: NAMESPACE_NAME
 119 └           valueFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'frontend-primary' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:203-213
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 203 ┌       - name: primary
 204 │         image: gcr.io/{%PROJECT_ID%}/frontend
 205 │         ports:
 206 │         - containerPort: 8000
 207 │         readinessProbe:
 208 │           httpGet:
 209 │             path: /
 210 │             port: 8000
 211 └         envFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'backend-primary' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:264-289
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 264 ┌       - name: primary
 265 │         image: gcr.io/{%PROJECT_ID%}/backend
 266 │         env:
 267 │         - name: POD_NAME
 268 │           valueFrom:
 269 │             fieldRef:
 270 │               fieldPath: metadata.name
 271 │         - name: NAMESPACE_NAME
 272 └           valueFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:50-60
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  50 ┌       - name: primary
  51 │         image: gcr.io/{%PROJECT_ID%}/frontend
  52 │         ports:
  53 │         - containerPort: 8000
  54 │         readinessProbe:
  55 │           httpGet:
  56 │             path: /
  57 │             port: 8000
  58 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-primary' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:111-136
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 111 ┌       - name: primary
 112 │         image: gcr.io/{%PROJECT_ID%}/backend
 113 │         env:
 114 │         - name: POD_NAME
 115 │           valueFrom:
 116 │             fieldRef:
 117 │               fieldPath: metadata.name
 118 │         - name: NAMESPACE_NAME
 119 └           valueFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:203-213
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 203 ┌       - name: primary
 204 │         image: gcr.io/{%PROJECT_ID%}/frontend
 205 │         ports:
 206 │         - containerPort: 8000
 207 │         readinessProbe:
 208 │           httpGet:
 209 │             path: /
 210 │             port: 8000
 211 └         envFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-primary' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:264-289
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 264 ┌       - name: primary
 265 │         image: gcr.io/{%PROJECT_ID%}/backend
 266 │         env:
 267 │         - name: POD_NAME
 268 │           valueFrom:
 269 │             fieldRef:
 270 │               fieldPath: metadata.name
 271 │         - name: NAMESPACE_NAME
 272 └           valueFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:50-60
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  50 ┌       - name: primary
  51 │         image: gcr.io/{%PROJECT_ID%}/frontend
  52 │         ports:
  53 │         - containerPort: 8000
  54 │         readinessProbe:
  55 │           httpGet:
  56 │             path: /
  57 │             port: 8000
  58 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:203-213
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 203 ┌       - name: primary
 204 │         image: gcr.io/{%PROJECT_ID%}/frontend
 205 │         ports:
 206 │         - containerPort: 8000
 207 │         readinessProbe:
 208 │           httpGet:
 209 │             path: /
 210 │             port: 8000
 211 └         envFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'frontend-primary' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:50-60
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  50 ┌       - name: primary
  51 │         image: gcr.io/{%PROJECT_ID%}/frontend
  52 │         ports:
  53 │         - containerPort: 8000
  54 │         readinessProbe:
  55 │           httpGet:
  56 │             path: /
  57 │             port: 8000
  58 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'backend-primary' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:111-136
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 111 ┌       - name: primary
 112 │         image: gcr.io/{%PROJECT_ID%}/backend
 113 │         env:
 114 │         - name: POD_NAME
 115 │           valueFrom:
 116 │             fieldRef:
 117 │               fieldPath: metadata.name
 118 │         - name: NAMESPACE_NAME
 119 └           valueFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'frontend-primary' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:203-213
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 203 ┌       - name: primary
 204 │         image: gcr.io/{%PROJECT_ID%}/frontend
 205 │         ports:
 206 │         - containerPort: 8000
 207 │         readinessProbe:
 208 │           httpGet:
 209 │             path: /
 210 │             port: 8000
 211 └         envFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'backend-primary' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:264-289
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 264 ┌       - name: primary
 265 │         image: gcr.io/{%PROJECT_ID%}/backend
 266 │         env:
 267 │         - name: POD_NAME
 268 │           valueFrom:
 269 │             fieldRef:
 270 │               fieldPath: metadata.name
 271 │         - name: NAMESPACE_NAME
 272 └           valueFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'frontend-primary' should specify an image tag
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:50-60
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  50 ┌       - name: primary
  51 │         image: gcr.io/{%PROJECT_ID%}/frontend
  52 │         ports:
  53 │         - containerPort: 8000
  54 │         readinessProbe:
  55 │           httpGet:
  56 │             path: /
  57 │             port: 8000
  58 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'backend-primary' should specify an image tag
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:111-136
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 111 ┌       - name: primary
 112 │         image: gcr.io/{%PROJECT_ID%}/backend
 113 │         env:
 114 │         - name: POD_NAME
 115 │           valueFrom:
 116 │             fieldRef:
 117 │               fieldPath: metadata.name
 118 │         - name: NAMESPACE_NAME
 119 └           valueFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'frontend-primary' should specify an image tag
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:203-213
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 203 ┌       - name: primary
 204 │         image: gcr.io/{%PROJECT_ID%}/frontend
 205 │         ports:
 206 │         - containerPort: 8000
 207 │         readinessProbe:
 208 │           httpGet:
 209 │             path: /
 210 │             port: 8000
 211 └         envFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'backend-primary' should specify an image tag
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:264-289
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 264 ┌       - name: primary
 265 │         image: gcr.io/{%PROJECT_ID%}/backend
 266 │         env:
 267 │         - name: POD_NAME
 268 │           valueFrom:
 269 │             fieldRef:
 270 │               fieldPath: metadata.name
 271 │         - name: NAMESPACE_NAME
 272 └           valueFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:50-60
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  50 ┌       - name: primary
  51 │         image: gcr.io/{%PROJECT_ID%}/frontend
  52 │         ports:
  53 │         - containerPort: 8000
  54 │         readinessProbe:
  55 │           httpGet:
  56 │             path: /
  57 │             port: 8000
  58 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-primary' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:111-136
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 111 ┌       - name: primary
 112 │         image: gcr.io/{%PROJECT_ID%}/backend
 113 │         env:
 114 │         - name: POD_NAME
 115 │           valueFrom:
 116 │             fieldRef:
 117 │               fieldPath: metadata.name
 118 │         - name: NAMESPACE_NAME
 119 └           valueFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:203-213
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 203 ┌       - name: primary
 204 │         image: gcr.io/{%PROJECT_ID%}/frontend
 205 │         ports:
 206 │         - containerPort: 8000
 207 │         readinessProbe:
 208 │           httpGet:
 209 │             path: /
 210 │             port: 8000
 211 └         envFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-primary' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:264-289
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 264 ┌       - name: primary
 265 │         image: gcr.io/{%PROJECT_ID%}/backend
 266 │         env:
 267 │         - name: POD_NAME
 268 │           valueFrom:
 269 │             fieldRef:
 270 │               fieldPath: metadata.name
 271 │         - name: NAMESPACE_NAME
 272 └           valueFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:50-60
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  50 ┌       - name: primary
  51 │         image: gcr.io/{%PROJECT_ID%}/frontend
  52 │         ports:
  53 │         - containerPort: 8000
  54 │         readinessProbe:
  55 │           httpGet:
  56 │             path: /
  57 │             port: 8000
  58 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:203-213
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 203 ┌       - name: primary
 204 │         image: gcr.io/{%PROJECT_ID%}/frontend
 205 │         ports:
 206 │         - containerPort: 8000
 207 │         readinessProbe:
 208 │           httpGet:
 209 │             path: /
 210 │             port: 8000
 211 └         envFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:50-60
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  50 ┌       - name: primary
  51 │         image: gcr.io/{%PROJECT_ID%}/frontend
  52 │         ports:
  53 │         - containerPort: 8000
  54 │         readinessProbe:
  55 │           httpGet:
  56 │             path: /
  57 │             port: 8000
  58 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:203-213
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 203 ┌       - name: primary
 204 │         image: gcr.io/{%PROJECT_ID%}/frontend
 205 │         ports:
 206 │         - containerPort: 8000
 207 │         readinessProbe:
 208 │           httpGet:
 209 │             path: /
 210 │             port: 8000
 211 └         envFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:50-60
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  50 ┌       - name: primary
  51 │         image: gcr.io/{%PROJECT_ID%}/frontend
  52 │         ports:
  53 │         - containerPort: 8000
  54 │         readinessProbe:
  55 │           httpGet:
  56 │             path: /
  57 │             port: 8000
  58 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:203-213
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 203 ┌       - name: primary
 204 │         image: gcr.io/{%PROJECT_ID%}/frontend
 205 │         ports:
 206 │         - containerPort: 8000
 207 │         readinessProbe:
 208 │           httpGet:
 209 │             path: /
 210 │             port: 8000
 211 └         envFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:50-60
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  50 ┌       - name: primary
  51 │         image: gcr.io/{%PROJECT_ID%}/frontend
  52 │         ports:
  53 │         - containerPort: 8000
  54 │         readinessProbe:
  55 │           httpGet:
  56 │             path: /
  57 │             port: 8000
  58 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-primary' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:111-136
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 111 ┌       - name: primary
 112 │         image: gcr.io/{%PROJECT_ID%}/backend
 113 │         env:
 114 │         - name: POD_NAME
 115 │           valueFrom:
 116 │             fieldRef:
 117 │               fieldPath: metadata.name
 118 │         - name: NAMESPACE_NAME
 119 └           valueFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:203-213
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 203 ┌       - name: primary
 204 │         image: gcr.io/{%PROJECT_ID%}/frontend
 205 │         ports:
 206 │         - containerPort: 8000
 207 │         readinessProbe:
 208 │           httpGet:
 209 │             path: /
 210 │             port: 8000
 211 └         envFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-primary' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:264-289
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 264 ┌       - name: primary
 265 │         image: gcr.io/{%PROJECT_ID%}/backend
 266 │         env:
 267 │         - name: POD_NAME
 268 │           valueFrom:
 269 │             fieldRef:
 270 │               fieldPath: metadata.name
 271 │         - name: NAMESPACE_NAME
 272 └           valueFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:50-60
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  50 ┌       - name: primary
  51 │         image: gcr.io/{%PROJECT_ID%}/frontend
  52 │         ports:
  53 │         - containerPort: 8000
  54 │         readinessProbe:
  55 │           httpGet:
  56 │             path: /
  57 │             port: 8000
  58 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-primary' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:111-136
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 111 ┌       - name: primary
 112 │         image: gcr.io/{%PROJECT_ID%}/backend
 113 │         env:
 114 │         - name: POD_NAME
 115 │           valueFrom:
 116 │             fieldRef:
 117 │               fieldPath: metadata.name
 118 │         - name: NAMESPACE_NAME
 119 └           valueFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:203-213
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 203 ┌       - name: primary
 204 │         image: gcr.io/{%PROJECT_ID%}/frontend
 205 │         ports:
 206 │         - containerPort: 8000
 207 │         readinessProbe:
 208 │           httpGet:
 209 │             path: /
 210 │             port: 8000
 211 └         envFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-primary' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:264-289
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 264 ┌       - name: primary
 265 │         image: gcr.io/{%PROJECT_ID%}/backend
 266 │         env:
 267 │         - name: POD_NAME
 268 │           valueFrom:
 269 │             fieldRef:
 270 │               fieldPath: metadata.name
 271 │         - name: NAMESPACE_NAME
 272 └           valueFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:50-60
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  50 ┌       - name: primary
  51 │         image: gcr.io/{%PROJECT_ID%}/frontend
  52 │         ports:
  53 │         - containerPort: 8000
  54 │         readinessProbe:
  55 │           httpGet:
  56 │             path: /
  57 │             port: 8000
  58 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:111-136
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 111 ┌       - name: primary
 112 │         image: gcr.io/{%PROJECT_ID%}/backend
 113 │         env:
 114 │         - name: POD_NAME
 115 │           valueFrom:
 116 │             fieldRef:
 117 │               fieldPath: metadata.name
 118 │         - name: NAMESPACE_NAME
 119 └           valueFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:203-213
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 203 ┌       - name: primary
 204 │         image: gcr.io/{%PROJECT_ID%}/frontend
 205 │         ports:
 206 │         - containerPort: 8000
 207 │         readinessProbe:
 208 │           httpGet:
 209 │             path: /
 210 │             port: 8000
 211 └         envFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:264-289
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 264 ┌       - name: primary
 265 │         image: gcr.io/{%PROJECT_ID%}/backend
 266 │         env:
 267 │         - name: POD_NAME
 268 │           valueFrom:
 269 │             fieldRef:
 270 │               fieldPath: metadata.name
 271 │         - name: NAMESPACE_NAME
 272 └           valueFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:50-60
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  50 ┌       - name: primary
  51 │         image: gcr.io/{%PROJECT_ID%}/frontend
  52 │         ports:
  53 │         - containerPort: 8000
  54 │         readinessProbe:
  55 │           httpGet:
  56 │             path: /
  57 │             port: 8000
  58 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:111-136
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 111 ┌       - name: primary
 112 │         image: gcr.io/{%PROJECT_ID%}/backend
 113 │         env:
 114 │         - name: POD_NAME
 115 │           valueFrom:
 116 │             fieldRef:
 117 │               fieldPath: metadata.name
 118 │         - name: NAMESPACE_NAME
 119 └           valueFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:203-213
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 203 ┌       - name: primary
 204 │         image: gcr.io/{%PROJECT_ID%}/frontend
 205 │         ports:
 206 │         - containerPort: 8000
 207 │         readinessProbe:
 208 │           httpGet:
 209 │             path: /
 210 │             port: 8000
 211 └         envFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-kayenta-workshop/services/manifests/seeding.yml:264-289
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 264 ┌       - name: primary
 265 │         image: gcr.io/{%PROJECT_ID%}/backend
 266 │         env:
 267 │         - name: POD_NAME
 268 │           valueFrom:
 269 │             fieldRef:
 270 │               fieldPath: metadata.name
 271 │         - name: NAMESPACE_NAME
 272 └           valueFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



codelabs/gke-source-to-prod/install/manifests.yml (kubernetes)
==============================================================
Tests: 167 (SUCCESSES: 141, FAILURES: 26, EXCEPTIONS: 0)
Failures: 26 (UNKNOWN: 1, LOW: 20, MEDIUM: 5, HIGH: 0, CRITICAL: 0)

UNKNOWN: apiVersion 'apps/v1beta1' and kind ‘Deployment' should be replaced with the new API 'apps.v1.Deployment'
See https://github.com/kubernetes/kubernetes/tree/master/staging/src/k8s.io/api/extensions/v1beta1/zz_generated.prerelease-lifecycle.go
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Rego module: data.defsec.kubernetes.KSV107
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/install/manifests.yml:22-26
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌ 
  23 │ apiVersion: apps/v1beta1
  24 │ kind: Deployment
  25 │ metadata:
  26 └   name: spin-halyard
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'halyard-daemon' of Deployment 'spin-halyard' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/install/manifests.yml:44-72
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌       - name: halyard-daemon
  45 │         # todo - make :stable or digest of :stable
  46 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:0.43.0-20180321134158
  47 │         imagePullPolicy: Always
  48 │         readinessProbe:
  49 │           exec:
  50 │             command:
  51 │             - wget
  52 └             - -q
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'hal-deploy-apply' of Job 'hal-deploy-apply' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/install/manifests.yml:297-304
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 297 ┌       - name: hal-deploy-apply
 298 │         # todo use a custom image
 299 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:0.43.0-20180321134158
 300 │         command:
 301 │         - /bin/sh
 302 │         args:
 303 │         - -c
 304 └         - "hal deploy apply --no-validate --daemon-endpoint http://spin-halyard.spinnaker:8064"
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'halyard-daemon' of Deployment 'spin-halyard' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/install/manifests.yml:44-72
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌       - name: halyard-daemon
  45 │         # todo - make :stable or digest of :stable
  46 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:0.43.0-20180321134158
  47 │         imagePullPolicy: Always
  48 │         readinessProbe:
  49 │           exec:
  50 │             command:
  51 │             - wget
  52 └             - -q
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'hal-deploy-apply' of Job 'hal-deploy-apply' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/install/manifests.yml:297-304
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 297 ┌       - name: hal-deploy-apply
 298 │         # todo use a custom image
 299 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:0.43.0-20180321134158
 300 │         command:
 301 │         - /bin/sh
 302 │         args:
 303 │         - -c
 304 └         - "hal deploy apply --no-validate --daemon-endpoint http://spin-halyard.spinnaker:8064"
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'halyard-daemon' of Deployment 'spin-halyard' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/install/manifests.yml:44-72
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌       - name: halyard-daemon
  45 │         # todo - make :stable or digest of :stable
  46 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:0.43.0-20180321134158
  47 │         imagePullPolicy: Always
  48 │         readinessProbe:
  49 │           exec:
  50 │             command:
  51 │             - wget
  52 └             - -q
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'hal-deploy-apply' of Job 'hal-deploy-apply' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/install/manifests.yml:297-304
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 297 ┌       - name: hal-deploy-apply
 298 │         # todo use a custom image
 299 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:0.43.0-20180321134158
 300 │         command:
 301 │         - /bin/sh
 302 │         args:
 303 │         - -c
 304 └         - "hal deploy apply --no-validate --daemon-endpoint http://spin-halyard.spinnaker:8064"
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'halyard-daemon' of Deployment 'spin-halyard' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/install/manifests.yml:44-72
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌       - name: halyard-daemon
  45 │         # todo - make :stable or digest of :stable
  46 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:0.43.0-20180321134158
  47 │         imagePullPolicy: Always
  48 │         readinessProbe:
  49 │           exec:
  50 │             command:
  51 │             - wget
  52 └             - -q
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'hal-deploy-apply' of Job 'hal-deploy-apply' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/install/manifests.yml:297-304
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 297 ┌       - name: hal-deploy-apply
 298 │         # todo use a custom image
 299 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:0.43.0-20180321134158
 300 │         command:
 301 │         - /bin/sh
 302 │         args:
 303 │         - -c
 304 └         - "hal deploy apply --no-validate --daemon-endpoint http://spin-halyard.spinnaker:8064"
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'halyard-daemon' of Deployment 'spin-halyard' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/install/manifests.yml:44-72
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌       - name: halyard-daemon
  45 │         # todo - make :stable or digest of :stable
  46 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:0.43.0-20180321134158
  47 │         imagePullPolicy: Always
  48 │         readinessProbe:
  49 │           exec:
  50 │             command:
  51 │             - wget
  52 └             - -q
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'hal-deploy-apply' of Job 'hal-deploy-apply' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/install/manifests.yml:297-304
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 297 ┌       - name: hal-deploy-apply
 298 │         # todo use a custom image
 299 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:0.43.0-20180321134158
 300 │         command:
 301 │         - /bin/sh
 302 │         args:
 303 │         - -c
 304 └         - "hal deploy apply --no-validate --daemon-endpoint http://spin-halyard.spinnaker:8064"
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'halyard-daemon' of Deployment 'spin-halyard' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/install/manifests.yml:44-72
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌       - name: halyard-daemon
  45 │         # todo - make :stable or digest of :stable
  46 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:0.43.0-20180321134158
  47 │         imagePullPolicy: Always
  48 │         readinessProbe:
  49 │           exec:
  50 │             command:
  51 │             - wget
  52 └             - -q
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'hal-deploy-apply' of Job 'hal-deploy-apply' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/install/manifests.yml:297-304
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 297 ┌       - name: hal-deploy-apply
 298 │         # todo use a custom image
 299 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:0.43.0-20180321134158
 300 │         command:
 301 │         - /bin/sh
 302 │         args:
 303 │         - -c
 304 └         - "hal deploy apply --no-validate --daemon-endpoint http://spin-halyard.spinnaker:8064"
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'halyard-daemon' of Deployment 'spin-halyard' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/install/manifests.yml:44-72
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌       - name: halyard-daemon
  45 │         # todo - make :stable or digest of :stable
  46 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:0.43.0-20180321134158
  47 │         imagePullPolicy: Always
  48 │         readinessProbe:
  49 │           exec:
  50 │             command:
  51 │             - wget
  52 └             - -q
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'hal-deploy-apply' of Job 'hal-deploy-apply' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/install/manifests.yml:297-304
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 297 ┌       - name: hal-deploy-apply
 298 │         # todo use a custom image
 299 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:0.43.0-20180321134158
 300 │         command:
 301 │         - /bin/sh
 302 │         args:
 303 │         - -c
 304 └         - "hal deploy apply --no-validate --daemon-endpoint http://spin-halyard.spinnaker:8064"
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'halyard-daemon' of Deployment 'spin-halyard' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/install/manifests.yml:44-72
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌       - name: halyard-daemon
  45 │         # todo - make :stable or digest of :stable
  46 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:0.43.0-20180321134158
  47 │         imagePullPolicy: Always
  48 │         readinessProbe:
  49 │           exec:
  50 │             command:
  51 │             - wget
  52 └             - -q
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'hal-deploy-apply' of Job 'hal-deploy-apply' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/install/manifests.yml:297-304
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 297 ┌       - name: hal-deploy-apply
 298 │         # todo use a custom image
 299 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:0.43.0-20180321134158
 300 │         command:
 301 │         - /bin/sh
 302 │         args:
 303 │         - -c
 304 └         - "hal deploy apply --no-validate --daemon-endpoint http://spin-halyard.spinnaker:8064"
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'halyard-daemon' of Deployment 'spin-halyard' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/install/manifests.yml:44-72
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌       - name: halyard-daemon
  45 │         # todo - make :stable or digest of :stable
  46 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:0.43.0-20180321134158
  47 │         imagePullPolicy: Always
  48 │         readinessProbe:
  49 │           exec:
  50 │             command:
  51 │             - wget
  52 └             - -q
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'hal-deploy-apply' of Job 'hal-deploy-apply' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/install/manifests.yml:297-304
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 297 ┌       - name: hal-deploy-apply
 298 │         # todo use a custom image
 299 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:0.43.0-20180321134158
 300 │         command:
 301 │         - /bin/sh
 302 │         args:
 303 │         - -c
 304 └         - "hal deploy apply --no-validate --daemon-endpoint http://spin-halyard.spinnaker:8064"
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'halyard-daemon' of Deployment 'spin-halyard' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/install/manifests.yml:44-72
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌       - name: halyard-daemon
  45 │         # todo - make :stable or digest of :stable
  46 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:0.43.0-20180321134158
  47 │         imagePullPolicy: Always
  48 │         readinessProbe:
  49 │           exec:
  50 │             command:
  51 │             - wget
  52 └             - -q
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'hal-deploy-apply' of Job 'hal-deploy-apply' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/install/manifests.yml:297-304
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 297 ┌       - name: hal-deploy-apply
 298 │         # todo use a custom image
 299 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:0.43.0-20180321134158
 300 │         command:
 301 │         - /bin/sh
 302 │         args:
 303 │         - -c
 304 └         - "hal deploy apply --no-validate --daemon-endpoint http://spin-halyard.spinnaker:8064"
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/install/manifests.yml:44-72
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌       - name: halyard-daemon
  45 │         # todo - make :stable or digest of :stable
  46 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:0.43.0-20180321134158
  47 │         imagePullPolicy: Always
  48 │         readinessProbe:
  49 │           exec:
  50 │             command:
  51 │             - wget
  52 └             - -q
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/install/manifests.yml:297-304
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 297 ┌       - name: hal-deploy-apply
 298 │         # todo use a custom image
 299 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:0.43.0-20180321134158
 300 │         command:
 301 │         - /bin/sh
 302 │         args:
 303 │         - -c
 304 └         - "hal deploy apply --no-validate --daemon-endpoint http://spin-halyard.spinnaker:8064"
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/install/manifests.yml:44-72
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌       - name: halyard-daemon
  45 │         # todo - make :stable or digest of :stable
  46 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:0.43.0-20180321134158
  47 │         imagePullPolicy: Always
  48 │         readinessProbe:
  49 │           exec:
  50 │             command:
  51 │             - wget
  52 └             - -q
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/install/manifests.yml:297-304
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 297 ┌       - name: hal-deploy-apply
 298 │         # todo use a custom image
 299 │         image: us-docker.pkg.dev/spinnaker-community/docker/halyard:0.43.0-20180321134158
 300 │         command:
 301 │         - /bin/sh
 302 │         args:
 303 │         - -c
 304 └         - "hal deploy apply --no-validate --daemon-endpoint http://spin-halyard.spinnaker:8064"
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: ClusterRoleBinding 'spinnaker-admin' with role 'cluster-admin' should be used only when required
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RBAC role cluster-admin provides wide-ranging powers over the environment and should be used only where and when needed.

See https://avd.aquasec.com/misconfig/ksv111
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/install/manifests.yml:11
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  11 [   name: spinnaker-admin
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



codelabs/gke-source-to-prod/services/backend/Dockerfile (dockerfile)
====================================================================
Tests: 24 (SUCCESSES: 20, FAILURES: 4, EXCEPTIONS: 0)
Failures: 4 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

MEDIUM: Specify a tag in the 'FROM' statement for image 'golang'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When using a 'FROM' statement you should use a specific tag to avoid uncontrolled behavior when the image is updated.

See https://avd.aquasec.com/misconfig/ds001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/backend/Dockerfile:1
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   1 [ FROM golang
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Consider using 'COPY . /go/src/spinnaker.io/demo/k8s-demo' command instead of 'ADD . /go/src/spinnaker.io/demo/k8s-demo'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should use COPY instead of ADD unless you want to extract a tar file. Note that an ADD command will extract a tar file, which adds the risk of Zip-based vulnerabilities. Accordingly, it is advised to use a COPY command, which does not extract tar files.

See https://avd.aquasec.com/misconfig/ds005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/backend/Dockerfile:3
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   3 [ ADD . /go/src/spinnaker.io/demo/k8s-demo
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



codelabs/gke-source-to-prod/services/frontend/Dockerfile (dockerfile)
=====================================================================
Tests: 25 (SUCCESSES: 20, FAILURES: 5, EXCEPTIONS: 0)
Failures: 5 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

MEDIUM: Specify a tag in the 'FROM' statement for image 'golang'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When using a 'FROM' statement you should use a specific tag to avoid uncontrolled behavior when the image is updated.

See https://avd.aquasec.com/misconfig/ds001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/frontend/Dockerfile:1
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   1 [ FROM golang
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Consider using 'COPY . /go/src/spinnaker.io/demo/k8s-demo' command instead of 'ADD . /go/src/spinnaker.io/demo/k8s-demo'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should use COPY instead of ADD unless you want to extract a tar file. Note that an ADD command will extract a tar file, which adds the risk of Zip-based vulnerabilities. Accordingly, it is advised to use a COPY command, which does not extract tar files.

See https://avd.aquasec.com/misconfig/ds005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/frontend/Dockerfile:3
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   3 [ ADD . /go/src/spinnaker.io/demo/k8s-demo
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Consider using 'COPY ./content /content' command instead of 'ADD ./content /content'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should use COPY instead of ADD unless you want to extract a tar file. Note that an ADD command will extract a tar file, which adds the risk of Zip-based vulnerabilities. Accordingly, it is advised to use a COPY command, which does not extract tar files.

See https://avd.aquasec.com/misconfig/ds005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/frontend/Dockerfile:7
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   7 [ ADD ./content /content
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



codelabs/gke-source-to-prod/services/manifests/backend.yml (kubernetes)
=======================================================================
Tests: 154 (SUCCESSES: 141, FAILURES: 13, EXCEPTIONS: 0)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'primary' of Deployment 'backend-${ canary ? "canary" : "primary" }' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/backend.yml:31-38
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  31 ┌       - name: primary
  32 │         image: gcr.io/{%PROJECT_ID%}/backend
  33 │         ports:
  34 │         - containerPort: 8000
  35 │         readinessProbe:
  36 │           httpGet:
  37 │             path: /
  38 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-${ canary ? "canary" : "primary" }' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/backend.yml:31-38
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  31 ┌       - name: primary
  32 │         image: gcr.io/{%PROJECT_ID%}/backend
  33 │         ports:
  34 │         - containerPort: 8000
  35 │         readinessProbe:
  36 │           httpGet:
  37 │             path: /
  38 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-${ canary ? "canary" : "primary" }' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/backend.yml:31-38
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  31 ┌       - name: primary
  32 │         image: gcr.io/{%PROJECT_ID%}/backend
  33 │         ports:
  34 │         - containerPort: 8000
  35 │         readinessProbe:
  36 │           httpGet:
  37 │             path: /
  38 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'backend-${ canary ? "canary" : "primary" }' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/backend.yml:31-38
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  31 ┌       - name: primary
  32 │         image: gcr.io/{%PROJECT_ID%}/backend
  33 │         ports:
  34 │         - containerPort: 8000
  35 │         readinessProbe:
  36 │           httpGet:
  37 │             path: /
  38 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'backend-${ canary ? "canary" : "primary" }' should specify an image tag
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/backend.yml:31-38
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  31 ┌       - name: primary
  32 │         image: gcr.io/{%PROJECT_ID%}/backend
  33 │         ports:
  34 │         - containerPort: 8000
  35 │         readinessProbe:
  36 │           httpGet:
  37 │             path: /
  38 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-${ canary ? "canary" : "primary" }' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/backend.yml:31-38
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  31 ┌       - name: primary
  32 │         image: gcr.io/{%PROJECT_ID%}/backend
  33 │         ports:
  34 │         - containerPort: 8000
  35 │         readinessProbe:
  36 │           httpGet:
  37 │             path: /
  38 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-${ canary ? "canary" : "primary" }' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/backend.yml:31-38
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  31 ┌       - name: primary
  32 │         image: gcr.io/{%PROJECT_ID%}/backend
  33 │         ports:
  34 │         - containerPort: 8000
  35 │         readinessProbe:
  36 │           httpGet:
  37 │             path: /
  38 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-${ canary ? "canary" : "primary" }' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/backend.yml:31-38
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  31 ┌       - name: primary
  32 │         image: gcr.io/{%PROJECT_ID%}/backend
  33 │         ports:
  34 │         - containerPort: 8000
  35 │         readinessProbe:
  36 │           httpGet:
  37 │             path: /
  38 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-${ canary ? "canary" : "primary" }' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/backend.yml:31-38
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  31 ┌       - name: primary
  32 │         image: gcr.io/{%PROJECT_ID%}/backend
  33 │         ports:
  34 │         - containerPort: 8000
  35 │         readinessProbe:
  36 │           httpGet:
  37 │             path: /
  38 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-${ canary ? "canary" : "primary" }' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/backend.yml:31-38
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  31 ┌       - name: primary
  32 │         image: gcr.io/{%PROJECT_ID%}/backend
  33 │         ports:
  34 │         - containerPort: 8000
  35 │         readinessProbe:
  36 │           httpGet:
  37 │             path: /
  38 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-${ canary ? "canary" : "primary" }' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/backend.yml:31-38
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  31 ┌       - name: primary
  32 │         image: gcr.io/{%PROJECT_ID%}/backend
  33 │         ports:
  34 │         - containerPort: 8000
  35 │         readinessProbe:
  36 │           httpGet:
  37 │             path: /
  38 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/backend.yml:31-38
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  31 ┌       - name: primary
  32 │         image: gcr.io/{%PROJECT_ID%}/backend
  33 │         ports:
  34 │         - containerPort: 8000
  35 │         readinessProbe:
  36 │           httpGet:
  37 │             path: /
  38 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/backend.yml:31-38
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  31 ┌       - name: primary
  32 │         image: gcr.io/{%PROJECT_ID%}/backend
  33 │         ports:
  34 │         - containerPort: 8000
  35 │         readinessProbe:
  36 │           httpGet:
  37 │             path: /
  38 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



codelabs/gke-source-to-prod/services/manifests/frontend.yml (kubernetes)
========================================================================
Tests: 154 (SUCCESSES: 141, FAILURES: 13, EXCEPTIONS: 0)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'primary' of Deployment 'frontend-${ canary ? "canary" : "primary" }' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/frontend.yml:39-49
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌       - name: primary
  40 │         image: gcr.io/{%PROJECT_ID%}/frontend
  41 │         ports:
  42 │         - containerPort: 8000
  43 │         readinessProbe:
  44 │           httpGet:
  45 │             path: /
  46 │             port: 8000
  47 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-${ canary ? "canary" : "primary" }' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/frontend.yml:39-49
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌       - name: primary
  40 │         image: gcr.io/{%PROJECT_ID%}/frontend
  41 │         ports:
  42 │         - containerPort: 8000
  43 │         readinessProbe:
  44 │           httpGet:
  45 │             path: /
  46 │             port: 8000
  47 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-${ canary ? "canary" : "primary" }' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/frontend.yml:39-49
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌       - name: primary
  40 │         image: gcr.io/{%PROJECT_ID%}/frontend
  41 │         ports:
  42 │         - containerPort: 8000
  43 │         readinessProbe:
  44 │           httpGet:
  45 │             path: /
  46 │             port: 8000
  47 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'frontend-${ canary ? "canary" : "primary" }' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/frontend.yml:39-49
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌       - name: primary
  40 │         image: gcr.io/{%PROJECT_ID%}/frontend
  41 │         ports:
  42 │         - containerPort: 8000
  43 │         readinessProbe:
  44 │           httpGet:
  45 │             path: /
  46 │             port: 8000
  47 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'frontend-${ canary ? "canary" : "primary" }' should specify an image tag
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/frontend.yml:39-49
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌       - name: primary
  40 │         image: gcr.io/{%PROJECT_ID%}/frontend
  41 │         ports:
  42 │         - containerPort: 8000
  43 │         readinessProbe:
  44 │           httpGet:
  45 │             path: /
  46 │             port: 8000
  47 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-${ canary ? "canary" : "primary" }' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/frontend.yml:39-49
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌       - name: primary
  40 │         image: gcr.io/{%PROJECT_ID%}/frontend
  41 │         ports:
  42 │         - containerPort: 8000
  43 │         readinessProbe:
  44 │           httpGet:
  45 │             path: /
  46 │             port: 8000
  47 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-${ canary ? "canary" : "primary" }' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/frontend.yml:39-49
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌       - name: primary
  40 │         image: gcr.io/{%PROJECT_ID%}/frontend
  41 │         ports:
  42 │         - containerPort: 8000
  43 │         readinessProbe:
  44 │           httpGet:
  45 │             path: /
  46 │             port: 8000
  47 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-${ canary ? "canary" : "primary" }' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/frontend.yml:39-49
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌       - name: primary
  40 │         image: gcr.io/{%PROJECT_ID%}/frontend
  41 │         ports:
  42 │         - containerPort: 8000
  43 │         readinessProbe:
  44 │           httpGet:
  45 │             path: /
  46 │             port: 8000
  47 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-${ canary ? "canary" : "primary" }' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/frontend.yml:39-49
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌       - name: primary
  40 │         image: gcr.io/{%PROJECT_ID%}/frontend
  41 │         ports:
  42 │         - containerPort: 8000
  43 │         readinessProbe:
  44 │           httpGet:
  45 │             path: /
  46 │             port: 8000
  47 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-${ canary ? "canary" : "primary" }' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/frontend.yml:39-49
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌       - name: primary
  40 │         image: gcr.io/{%PROJECT_ID%}/frontend
  41 │         ports:
  42 │         - containerPort: 8000
  43 │         readinessProbe:
  44 │           httpGet:
  45 │             path: /
  46 │             port: 8000
  47 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-${ canary ? "canary" : "primary" }' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/frontend.yml:39-49
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌       - name: primary
  40 │         image: gcr.io/{%PROJECT_ID%}/frontend
  41 │         ports:
  42 │         - containerPort: 8000
  43 │         readinessProbe:
  44 │           httpGet:
  45 │             path: /
  46 │             port: 8000
  47 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/frontend.yml:39-49
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌       - name: primary
  40 │         image: gcr.io/{%PROJECT_ID%}/frontend
  41 │         ports:
  42 │         - containerPort: 8000
  43 │         readinessProbe:
  44 │           httpGet:
  45 │             path: /
  46 │             port: 8000
  47 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/frontend.yml:39-49
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌       - name: primary
  40 │         image: gcr.io/{%PROJECT_ID%}/frontend
  41 │         ports:
  42 │         - containerPort: 8000
  43 │         readinessProbe:
  44 │           httpGet:
  45 │             path: /
  46 │             port: 8000
  47 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



codelabs/gke-source-to-prod/services/manifests/seeding.yml (kubernetes)
=======================================================================
Tests: 193 (SUCCESSES: 141, FAILURES: 52, EXCEPTIONS: 0)
Failures: 52 (UNKNOWN: 0, LOW: 40, MEDIUM: 12, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'primary' of Deployment 'frontend-primary' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:49-59
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  49 ┌       - name: primary
  50 │         image: gcr.io/{%PROJECT_ID%}/frontend
  51 │         ports:
  52 │         - containerPort: 8000
  53 │         readinessProbe:
  54 │           httpGet:
  55 │             path: /
  56 │             port: 8000
  57 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'backend-primary' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:108-115
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 108 ┌       - name: primary
 109 │         image: gcr.io/{%PROJECT_ID%}/backend
 110 │         ports:
 111 │         - containerPort: 8000
 112 │         readinessProbe:
 113 │           httpGet:
 114 │             path: /
 115 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'frontend-primary' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:181-191
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 181 ┌       - name: primary
 182 │         image: gcr.io/{%PROJECT_ID%}/frontend
 183 │         ports:
 184 │         - containerPort: 8000
 185 │         readinessProbe:
 186 │           httpGet:
 187 │             path: /
 188 │             port: 8000
 189 └         envFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'backend-primary' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:241-248
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 241 ┌       - name: primary
 242 │         image: gcr.io/{%PROJECT_ID%}/backend
 243 │         ports:
 244 │         - containerPort: 8000
 245 │         readinessProbe:
 246 │           httpGet:
 247 │             path: /
 248 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:49-59
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  49 ┌       - name: primary
  50 │         image: gcr.io/{%PROJECT_ID%}/frontend
  51 │         ports:
  52 │         - containerPort: 8000
  53 │         readinessProbe:
  54 │           httpGet:
  55 │             path: /
  56 │             port: 8000
  57 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-primary' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:108-115
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 108 ┌       - name: primary
 109 │         image: gcr.io/{%PROJECT_ID%}/backend
 110 │         ports:
 111 │         - containerPort: 8000
 112 │         readinessProbe:
 113 │           httpGet:
 114 │             path: /
 115 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:181-191
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 181 ┌       - name: primary
 182 │         image: gcr.io/{%PROJECT_ID%}/frontend
 183 │         ports:
 184 │         - containerPort: 8000
 185 │         readinessProbe:
 186 │           httpGet:
 187 │             path: /
 188 │             port: 8000
 189 └         envFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-primary' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:241-248
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 241 ┌       - name: primary
 242 │         image: gcr.io/{%PROJECT_ID%}/backend
 243 │         ports:
 244 │         - containerPort: 8000
 245 │         readinessProbe:
 246 │           httpGet:
 247 │             path: /
 248 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:49-59
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  49 ┌       - name: primary
  50 │         image: gcr.io/{%PROJECT_ID%}/frontend
  51 │         ports:
  52 │         - containerPort: 8000
  53 │         readinessProbe:
  54 │           httpGet:
  55 │             path: /
  56 │             port: 8000
  57 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-primary' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:108-115
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 108 ┌       - name: primary
 109 │         image: gcr.io/{%PROJECT_ID%}/backend
 110 │         ports:
 111 │         - containerPort: 8000
 112 │         readinessProbe:
 113 │           httpGet:
 114 │             path: /
 115 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:181-191
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 181 ┌       - name: primary
 182 │         image: gcr.io/{%PROJECT_ID%}/frontend
 183 │         ports:
 184 │         - containerPort: 8000
 185 │         readinessProbe:
 186 │           httpGet:
 187 │             path: /
 188 │             port: 8000
 189 └         envFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-primary' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:241-248
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 241 ┌       - name: primary
 242 │         image: gcr.io/{%PROJECT_ID%}/backend
 243 │         ports:
 244 │         - containerPort: 8000
 245 │         readinessProbe:
 246 │           httpGet:
 247 │             path: /
 248 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'frontend-primary' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:49-59
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  49 ┌       - name: primary
  50 │         image: gcr.io/{%PROJECT_ID%}/frontend
  51 │         ports:
  52 │         - containerPort: 8000
  53 │         readinessProbe:
  54 │           httpGet:
  55 │             path: /
  56 │             port: 8000
  57 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'backend-primary' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:108-115
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 108 ┌       - name: primary
 109 │         image: gcr.io/{%PROJECT_ID%}/backend
 110 │         ports:
 111 │         - containerPort: 8000
 112 │         readinessProbe:
 113 │           httpGet:
 114 │             path: /
 115 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'frontend-primary' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:181-191
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 181 ┌       - name: primary
 182 │         image: gcr.io/{%PROJECT_ID%}/frontend
 183 │         ports:
 184 │         - containerPort: 8000
 185 │         readinessProbe:
 186 │           httpGet:
 187 │             path: /
 188 │             port: 8000
 189 └         envFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'backend-primary' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:241-248
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 241 ┌       - name: primary
 242 │         image: gcr.io/{%PROJECT_ID%}/backend
 243 │         ports:
 244 │         - containerPort: 8000
 245 │         readinessProbe:
 246 │           httpGet:
 247 │             path: /
 248 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'frontend-primary' should specify an image tag
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:49-59
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  49 ┌       - name: primary
  50 │         image: gcr.io/{%PROJECT_ID%}/frontend
  51 │         ports:
  52 │         - containerPort: 8000
  53 │         readinessProbe:
  54 │           httpGet:
  55 │             path: /
  56 │             port: 8000
  57 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'backend-primary' should specify an image tag
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:108-115
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 108 ┌       - name: primary
 109 │         image: gcr.io/{%PROJECT_ID%}/backend
 110 │         ports:
 111 │         - containerPort: 8000
 112 │         readinessProbe:
 113 │           httpGet:
 114 │             path: /
 115 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'frontend-primary' should specify an image tag
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:181-191
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 181 ┌       - name: primary
 182 │         image: gcr.io/{%PROJECT_ID%}/frontend
 183 │         ports:
 184 │         - containerPort: 8000
 185 │         readinessProbe:
 186 │           httpGet:
 187 │             path: /
 188 │             port: 8000
 189 └         envFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'primary' of Deployment 'backend-primary' should specify an image tag
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:241-248
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 241 ┌       - name: primary
 242 │         image: gcr.io/{%PROJECT_ID%}/backend
 243 │         ports:
 244 │         - containerPort: 8000
 245 │         readinessProbe:
 246 │           httpGet:
 247 │             path: /
 248 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:49-59
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  49 ┌       - name: primary
  50 │         image: gcr.io/{%PROJECT_ID%}/frontend
  51 │         ports:
  52 │         - containerPort: 8000
  53 │         readinessProbe:
  54 │           httpGet:
  55 │             path: /
  56 │             port: 8000
  57 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-primary' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:108-115
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 108 ┌       - name: primary
 109 │         image: gcr.io/{%PROJECT_ID%}/backend
 110 │         ports:
 111 │         - containerPort: 8000
 112 │         readinessProbe:
 113 │           httpGet:
 114 │             path: /
 115 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:181-191
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 181 ┌       - name: primary
 182 │         image: gcr.io/{%PROJECT_ID%}/frontend
 183 │         ports:
 184 │         - containerPort: 8000
 185 │         readinessProbe:
 186 │           httpGet:
 187 │             path: /
 188 │             port: 8000
 189 └         envFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-primary' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:241-248
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 241 ┌       - name: primary
 242 │         image: gcr.io/{%PROJECT_ID%}/backend
 243 │         ports:
 244 │         - containerPort: 8000
 245 │         readinessProbe:
 246 │           httpGet:
 247 │             path: /
 248 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:49-59
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  49 ┌       - name: primary
  50 │         image: gcr.io/{%PROJECT_ID%}/frontend
  51 │         ports:
  52 │         - containerPort: 8000
  53 │         readinessProbe:
  54 │           httpGet:
  55 │             path: /
  56 │             port: 8000
  57 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-primary' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:108-115
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 108 ┌       - name: primary
 109 │         image: gcr.io/{%PROJECT_ID%}/backend
 110 │         ports:
 111 │         - containerPort: 8000
 112 │         readinessProbe:
 113 │           httpGet:
 114 │             path: /
 115 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:181-191
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 181 ┌       - name: primary
 182 │         image: gcr.io/{%PROJECT_ID%}/frontend
 183 │         ports:
 184 │         - containerPort: 8000
 185 │         readinessProbe:
 186 │           httpGet:
 187 │             path: /
 188 │             port: 8000
 189 └         envFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-primary' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:241-248
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 241 ┌       - name: primary
 242 │         image: gcr.io/{%PROJECT_ID%}/backend
 243 │         ports:
 244 │         - containerPort: 8000
 245 │         readinessProbe:
 246 │           httpGet:
 247 │             path: /
 248 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:49-59
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  49 ┌       - name: primary
  50 │         image: gcr.io/{%PROJECT_ID%}/frontend
  51 │         ports:
  52 │         - containerPort: 8000
  53 │         readinessProbe:
  54 │           httpGet:
  55 │             path: /
  56 │             port: 8000
  57 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-primary' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:108-115
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 108 ┌       - name: primary
 109 │         image: gcr.io/{%PROJECT_ID%}/backend
 110 │         ports:
 111 │         - containerPort: 8000
 112 │         readinessProbe:
 113 │           httpGet:
 114 │             path: /
 115 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:181-191
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 181 ┌       - name: primary
 182 │         image: gcr.io/{%PROJECT_ID%}/frontend
 183 │         ports:
 184 │         - containerPort: 8000
 185 │         readinessProbe:
 186 │           httpGet:
 187 │             path: /
 188 │             port: 8000
 189 └         envFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-primary' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:241-248
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 241 ┌       - name: primary
 242 │         image: gcr.io/{%PROJECT_ID%}/backend
 243 │         ports:
 244 │         - containerPort: 8000
 245 │         readinessProbe:
 246 │           httpGet:
 247 │             path: /
 248 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:49-59
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  49 ┌       - name: primary
  50 │         image: gcr.io/{%PROJECT_ID%}/frontend
  51 │         ports:
  52 │         - containerPort: 8000
  53 │         readinessProbe:
  54 │           httpGet:
  55 │             path: /
  56 │             port: 8000
  57 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-primary' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:108-115
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 108 ┌       - name: primary
 109 │         image: gcr.io/{%PROJECT_ID%}/backend
 110 │         ports:
 111 │         - containerPort: 8000
 112 │         readinessProbe:
 113 │           httpGet:
 114 │             path: /
 115 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:181-191
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 181 ┌       - name: primary
 182 │         image: gcr.io/{%PROJECT_ID%}/frontend
 183 │         ports:
 184 │         - containerPort: 8000
 185 │         readinessProbe:
 186 │           httpGet:
 187 │             path: /
 188 │             port: 8000
 189 └         envFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-primary' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:241-248
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 241 ┌       - name: primary
 242 │         image: gcr.io/{%PROJECT_ID%}/backend
 243 │         ports:
 244 │         - containerPort: 8000
 245 │         readinessProbe:
 246 │           httpGet:
 247 │             path: /
 248 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:49-59
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  49 ┌       - name: primary
  50 │         image: gcr.io/{%PROJECT_ID%}/frontend
  51 │         ports:
  52 │         - containerPort: 8000
  53 │         readinessProbe:
  54 │           httpGet:
  55 │             path: /
  56 │             port: 8000
  57 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-primary' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:108-115
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 108 ┌       - name: primary
 109 │         image: gcr.io/{%PROJECT_ID%}/backend
 110 │         ports:
 111 │         - containerPort: 8000
 112 │         readinessProbe:
 113 │           httpGet:
 114 │             path: /
 115 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:181-191
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 181 ┌       - name: primary
 182 │         image: gcr.io/{%PROJECT_ID%}/frontend
 183 │         ports:
 184 │         - containerPort: 8000
 185 │         readinessProbe:
 186 │           httpGet:
 187 │             path: /
 188 │             port: 8000
 189 └         envFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-primary' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:241-248
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 241 ┌       - name: primary
 242 │         image: gcr.io/{%PROJECT_ID%}/backend
 243 │         ports:
 244 │         - containerPort: 8000
 245 │         readinessProbe:
 246 │           httpGet:
 247 │             path: /
 248 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:49-59
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  49 ┌       - name: primary
  50 │         image: gcr.io/{%PROJECT_ID%}/frontend
  51 │         ports:
  52 │         - containerPort: 8000
  53 │         readinessProbe:
  54 │           httpGet:
  55 │             path: /
  56 │             port: 8000
  57 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-primary' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:108-115
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 108 ┌       - name: primary
 109 │         image: gcr.io/{%PROJECT_ID%}/backend
 110 │         ports:
 111 │         - containerPort: 8000
 112 │         readinessProbe:
 113 │           httpGet:
 114 │             path: /
 115 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'frontend-primary' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:181-191
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 181 ┌       - name: primary
 182 │         image: gcr.io/{%PROJECT_ID%}/frontend
 183 │         ports:
 184 │         - containerPort: 8000
 185 │         readinessProbe:
 186 │           httpGet:
 187 │             path: /
 188 │             port: 8000
 189 └         envFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'primary' of Deployment 'backend-primary' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:241-248
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 241 ┌       - name: primary
 242 │         image: gcr.io/{%PROJECT_ID%}/backend
 243 │         ports:
 244 │         - containerPort: 8000
 245 │         readinessProbe:
 246 │           httpGet:
 247 │             path: /
 248 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:49-59
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  49 ┌       - name: primary
  50 │         image: gcr.io/{%PROJECT_ID%}/frontend
  51 │         ports:
  52 │         - containerPort: 8000
  53 │         readinessProbe:
  54 │           httpGet:
  55 │             path: /
  56 │             port: 8000
  57 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:108-115
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 108 ┌       - name: primary
 109 │         image: gcr.io/{%PROJECT_ID%}/backend
 110 │         ports:
 111 │         - containerPort: 8000
 112 │         readinessProbe:
 113 │           httpGet:
 114 │             path: /
 115 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:181-191
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 181 ┌       - name: primary
 182 │         image: gcr.io/{%PROJECT_ID%}/frontend
 183 │         ports:
 184 │         - containerPort: 8000
 185 │         readinessProbe:
 186 │           httpGet:
 187 │             path: /
 188 │             port: 8000
 189 └         envFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:241-248
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 241 ┌       - name: primary
 242 │         image: gcr.io/{%PROJECT_ID%}/backend
 243 │         ports:
 244 │         - containerPort: 8000
 245 │         readinessProbe:
 246 │           httpGet:
 247 │             path: /
 248 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:49-59
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  49 ┌       - name: primary
  50 │         image: gcr.io/{%PROJECT_ID%}/frontend
  51 │         ports:
  52 │         - containerPort: 8000
  53 │         readinessProbe:
  54 │           httpGet:
  55 │             path: /
  56 │             port: 8000
  57 └         envFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:108-115
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 108 ┌       - name: primary
 109 │         image: gcr.io/{%PROJECT_ID%}/backend
 110 │         ports:
 111 │         - containerPort: 8000
 112 │         readinessProbe:
 113 │           httpGet:
 114 │             path: /
 115 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:181-191
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 181 ┌       - name: primary
 182 │         image: gcr.io/{%PROJECT_ID%}/frontend
 183 │         ports:
 184 │         - containerPort: 8000
 185 │         readinessProbe:
 186 │           httpGet:
 187 │             path: /
 188 │             port: 8000
 189 └         envFrom:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 codelabs/gke-source-to-prod/services/manifests/seeding.yml:241-248
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 241 ┌       - name: primary
 242 │         image: gcr.io/{%PROJECT_ID%}/backend
 243 │         ports:
 244 │         - containerPort: 8000
 245 │         readinessProbe:
 246 │           httpGet:
 247 │             path: /
 248 └             port: 8000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



solutions/bluegreen/app/Dockerfile (dockerfile)
===============================================
Tests: 24 (SUCCESSES: 21, FAILURES: 3, EXCEPTIONS: 0)
Failures: 3 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

MEDIUM: Specify a tag in the 'FROM' statement for image 'alpine'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When using a 'FROM' statement you should use a specific tag to avoid uncontrolled behavior when the image is updated.

See https://avd.aquasec.com/misconfig/ds001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 solutions/bluegreen/app/Dockerfile:6
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   6 [ FROM alpine:latest
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



solutions/bluegreen/manifests/replicaset-v1.yaml (kubernetes)
=============================================================
Tests: 141 (SUCCESSES: 129, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'helloworld' of ReplicaSet 'helloworld-v000' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 solutions/bluegreen/manifests/replicaset-v1.yaml:41-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  41 ┌         - image: 'us-docker.pkg.dev/spinnaker-community/codelabs/helloworld:v1'
  42 │           imagePullPolicy: IfNotPresent
  43 │           name: helloworld
  44 │           ports:
  45 └             - containerPort: 6000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'helloworld' of ReplicaSet 'helloworld-v000' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 solutions/bluegreen/manifests/replicaset-v1.yaml:41-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  41 ┌         - image: 'us-docker.pkg.dev/spinnaker-community/codelabs/helloworld:v1'
  42 │           imagePullPolicy: IfNotPresent
  43 │           name: helloworld
  44 │           ports:
  45 └             - containerPort: 6000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'helloworld' of ReplicaSet 'helloworld-v000' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 solutions/bluegreen/manifests/replicaset-v1.yaml:41-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  41 ┌         - image: 'us-docker.pkg.dev/spinnaker-community/codelabs/helloworld:v1'
  42 │           imagePullPolicy: IfNotPresent
  43 │           name: helloworld
  44 │           ports:
  45 └             - containerPort: 6000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'helloworld' of ReplicaSet 'helloworld-v000' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 solutions/bluegreen/manifests/replicaset-v1.yaml:41-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  41 ┌         - image: 'us-docker.pkg.dev/spinnaker-community/codelabs/helloworld:v1'
  42 │           imagePullPolicy: IfNotPresent
  43 │           name: helloworld
  44 │           ports:
  45 └             - containerPort: 6000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'helloworld' of ReplicaSet 'helloworld-v000' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 solutions/bluegreen/manifests/replicaset-v1.yaml:41-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  41 ┌         - image: 'us-docker.pkg.dev/spinnaker-community/codelabs/helloworld:v1'
  42 │           imagePullPolicy: IfNotPresent
  43 │           name: helloworld
  44 │           ports:
  45 └             - containerPort: 6000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'helloworld' of ReplicaSet 'helloworld-v000' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 solutions/bluegreen/manifests/replicaset-v1.yaml:41-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  41 ┌         - image: 'us-docker.pkg.dev/spinnaker-community/codelabs/helloworld:v1'
  42 │           imagePullPolicy: IfNotPresent
  43 │           name: helloworld
  44 │           ports:
  45 └             - containerPort: 6000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'helloworld' of ReplicaSet 'helloworld-v000' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 solutions/bluegreen/manifests/replicaset-v1.yaml:41-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  41 ┌         - image: 'us-docker.pkg.dev/spinnaker-community/codelabs/helloworld:v1'
  42 │           imagePullPolicy: IfNotPresent
  43 │           name: helloworld
  44 │           ports:
  45 └             - containerPort: 6000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'helloworld' of ReplicaSet 'helloworld-v000' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 solutions/bluegreen/manifests/replicaset-v1.yaml:41-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  41 ┌         - image: 'us-docker.pkg.dev/spinnaker-community/codelabs/helloworld:v1'
  42 │           imagePullPolicy: IfNotPresent
  43 │           name: helloworld
  44 │           ports:
  45 └             - containerPort: 6000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'helloworld' of ReplicaSet 'helloworld-v000' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 solutions/bluegreen/manifests/replicaset-v1.yaml:41-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  41 ┌         - image: 'us-docker.pkg.dev/spinnaker-community/codelabs/helloworld:v1'
  42 │           imagePullPolicy: IfNotPresent
  43 │           name: helloworld
  44 │           ports:
  45 └             - containerPort: 6000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'helloworld' of ReplicaSet 'helloworld-v000' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 solutions/bluegreen/manifests/replicaset-v1.yaml:41-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  41 ┌         - image: 'us-docker.pkg.dev/spinnaker-community/codelabs/helloworld:v1'
  42 │           imagePullPolicy: IfNotPresent
  43 │           name: helloworld
  44 │           ports:
  45 └             - containerPort: 6000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 solutions/bluegreen/manifests/replicaset-v1.yaml:41-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  41 ┌         - image: 'us-docker.pkg.dev/spinnaker-community/codelabs/helloworld:v1'
  42 │           imagePullPolicy: IfNotPresent
  43 │           name: helloworld
  44 │           ports:
  45 └             - containerPort: 6000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 solutions/bluegreen/manifests/replicaset-v1.yaml:41-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  41 ┌         - image: 'us-docker.pkg.dev/spinnaker-community/codelabs/helloworld:v1'
  42 │           imagePullPolicy: IfNotPresent
  43 │           name: helloworld
  44 │           ports:
  45 └             - containerPort: 6000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



solutions/kayenta/app/Dockerfile (dockerfile)
=============================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


