Enumerating objects: 1021, done.
Counting objects:   0% (1/1021)Counting objects:   1% (11/1021)Counting objects:   2% (21/1021)Counting objects:   3% (31/1021)Counting objects:   4% (41/1021)Counting objects:   5% (52/1021)Counting objects:   6% (62/1021)Counting objects:   7% (72/1021)Counting objects:   8% (82/1021)Counting objects:   9% (92/1021)Counting objects:  10% (103/1021)Counting objects:  11% (113/1021)Counting objects:  12% (123/1021)Counting objects:  13% (133/1021)Counting objects:  14% (143/1021)Counting objects:  15% (154/1021)Counting objects:  16% (164/1021)Counting objects:  17% (174/1021)Counting objects:  18% (184/1021)Counting objects:  19% (194/1021)Counting objects:  20% (205/1021)Counting objects:  21% (215/1021)Counting objects:  22% (225/1021)Counting objects:  23% (235/1021)Counting objects:  24% (246/1021)Counting objects:  25% (256/1021)Counting objects:  26% (266/1021)Counting objects:  27% (276/1021)Counting objects:  28% (286/1021)Counting objects:  29% (297/1021)Counting objects:  30% (307/1021)Counting objects:  31% (317/1021)Counting objects:  32% (327/1021)Counting objects:  33% (337/1021)Counting objects:  34% (348/1021)Counting objects:  35% (358/1021)Counting objects:  36% (368/1021)Counting objects:  37% (378/1021)Counting objects:  38% (388/1021)Counting objects:  39% (399/1021)Counting objects:  40% (409/1021)Counting objects:  41% (419/1021)Counting objects:  42% (429/1021)Counting objects:  43% (440/1021)Counting objects:  44% (450/1021)Counting objects:  45% (460/1021)Counting objects:  46% (470/1021)Counting objects:  47% (480/1021)Counting objects:  48% (491/1021)Counting objects:  49% (501/1021)Counting objects:  50% (511/1021)Counting objects:  51% (521/1021)Counting objects:  52% (531/1021)Counting objects:  53% (542/1021)Counting objects:  54% (552/1021)Counting objects:  55% (562/1021)Counting objects:  56% (572/1021)Counting objects:  57% (582/1021)Counting objects:  58% (593/1021)Counting objects:  59% (603/1021)Counting objects:  60% (613/1021)Counting objects:  61% (623/1021)Counting objects:  62% (634/1021)Counting objects:  63% (644/1021)Counting objects:  64% (654/1021)Counting objects:  65% (664/1021)Counting objects:  66% (674/1021)Counting objects:  67% (685/1021)Counting objects:  68% (695/1021)Counting objects:  69% (705/1021)Counting objects:  70% (715/1021)Counting objects:  71% (725/1021)Counting objects:  72% (736/1021)Counting objects:  73% (746/1021)Counting objects:  74% (756/1021)Counting objects:  75% (766/1021)Counting objects:  76% (776/1021)Counting objects:  77% (787/1021)Counting objects:  78% (797/1021)Counting objects:  79% (807/1021)Counting objects:  80% (817/1021)Counting objects:  81% (828/1021)Counting objects:  82% (838/1021)Counting objects:  83% (848/1021)Counting objects:  84% (858/1021)Counting objects:  85% (868/1021)Counting objects:  86% (879/1021)Counting objects:  87% (889/1021)Counting objects:  88% (899/1021)Counting objects:  89% (909/1021)Counting objects:  90% (919/1021)Counting objects:  91% (930/1021)Counting objects:  92% (940/1021)Counting objects:  93% (950/1021)Counting objects:  94% (960/1021)Counting objects:  95% (970/1021)Counting objects:  96% (981/1021)Counting objects:  97% (991/1021)Counting objects:  98% (1001/1021)Counting objects:  99% (1011/1021)Counting objects: 100% (1021/1021)Counting objects: 100% (1021/1021), done.
Compressing objects:   0% (1/787)Compressing objects:   1% (8/787)Compressing objects:   2% (16/787)Compressing objects:   3% (24/787)Compressing objects:   4% (32/787)Compressing objects:   5% (40/787)Compressing objects:   6% (48/787)Compressing objects:   7% (56/787)Compressing objects:   8% (63/787)Compressing objects:   9% (71/787)Compressing objects:  10% (79/787)Compressing objects:  11% (87/787)Compressing objects:  12% (95/787)Compressing objects:  13% (103/787)Compressing objects:  14% (111/787)Compressing objects:  15% (119/787)Compressing objects:  16% (126/787)Compressing objects:  17% (134/787)Compressing objects:  18% (142/787)Compressing objects:  19% (150/787)Compressing objects:  20% (158/787)Compressing objects:  21% (166/787)Compressing objects:  22% (174/787)Compressing objects:  23% (182/787)Compressing objects:  24% (189/787)Compressing objects:  25% (197/787)Compressing objects:  26% (205/787)Compressing objects:  27% (213/787)Compressing objects:  28% (221/787)Compressing objects:  29% (229/787)Compressing objects:  30% (237/787)Compressing objects:  31% (244/787)Compressing objects:  32% (252/787)Compressing objects:  33% (260/787)Compressing objects:  34% (268/787)Compressing objects:  35% (276/787)Compressing objects:  36% (284/787)Compressing objects:  37% (292/787)Compressing objects:  38% (300/787)Compressing objects:  39% (307/787)Compressing objects:  40% (315/787)Compressing objects:  41% (323/787)Compressing objects:  42% (331/787)Compressing objects:  43% (339/787)Compressing objects:  44% (347/787)Compressing objects:  45% (355/787)Compressing objects:  46% (363/787)Compressing objects:  47% (370/787)Compressing objects:  48% (378/787)Compressing objects:  49% (386/787)Compressing objects:  50% (394/787)Compressing objects:  51% (402/787)Compressing objects:  52% (410/787)Compressing objects:  53% (418/787)Compressing objects:  54% (425/787)Compressing objects:  55% (433/787)Compressing objects:  56% (441/787)Compressing objects:  57% (449/787)Compressing objects:  58% (457/787)Compressing objects:  59% (465/787)Compressing objects:  60% (473/787)Compressing objects:  61% (481/787)Compressing objects:  62% (488/787)Compressing objects:  63% (496/787)Compressing objects:  64% (504/787)Compressing objects:  65% (512/787)Compressing objects:  66% (520/787)Compressing objects:  67% (528/787)Compressing objects:  68% (536/787)Compressing objects:  69% (544/787)Compressing objects:  70% (551/787)Compressing objects:  71% (559/787)Compressing objects:  72% (567/787)Compressing objects:  73% (575/787)Compressing objects:  74% (583/787)Compressing objects:  75% (591/787)Compressing objects:  76% (599/787)Compressing objects:  77% (606/787)Compressing objects:  78% (614/787)Compressing objects:  79% (622/787)Compressing objects:  80% (630/787)Compressing objects:  81% (638/787)Compressing objects:  82% (646/787)Compressing objects:  83% (654/787)Compressing objects:  84% (662/787)Compressing objects:  85% (669/787)Compressing objects:  86% (677/787)Compressing objects:  87% (685/787)Compressing objects:  88% (693/787)Compressing objects:  89% (701/787)Compressing objects:  90% (709/787)Compressing objects:  91% (717/787)Compressing objects:  92% (725/787)Compressing objects:  93% (732/787)Compressing objects:  94% (740/787)Compressing objects:  95% (748/787)Compressing objects:  96% (756/787)Compressing objects:  97% (764/787)Compressing objects:  98% (772/787)Compressing objects:  99% (780/787)Compressing objects: 100% (787/787)Compressing objects: 100% (787/787), done.
Total 1021 (delta 254), reused 867 (delta 192), pack-reused 0

src/WebApp/wwwroot/lib/bootstrap/Gemfile.lock (bundler)
=======================================================
Total: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

┌──────────┬────────────────┬──────────┬───────────────────┬───────────────┬────────────────────────────────────────────────────────┐
│ Library  │ Vulnerability  │ Severity │ Installed Version │ Fixed Version │                         Title                          │
├──────────┼────────────────┼──────────┼───────────────────┼───────────────┼────────────────────────────────────────────────────────┤
│ kramdown │ CVE-2020-14001 │ CRITICAL │ 1.17.0            │ >= 2.3.0      │ rubygem-kramdown: processing template options inside   │
│          │                │          │                   │               │ documents allows unintended read access or embedded... │
│          │                │          │                   │               │ https://avd.aquasec.com/nvd/cve-2020-14001             │
│          ├────────────────┤          │                   ├───────────────┼────────────────────────────────────────────────────────┤
│          │ CVE-2021-28834 │          │                   │ >= 2.3.1      │ rubygem-kramdown: allows arbitrary classes to be       │
│          │                │          │                   │               │ instantiated                                           │
│          │                │          │                   │               │ https://avd.aquasec.com/nvd/cve-2021-28834             │
└──────────┴────────────────┴──────────┴───────────────────┴───────────────┴────────────────────────────────────────────────────────┘

src/AuditlogService/Dockerfile (dockerfile)
===========================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/CustomerManagementAPI/Dockerfile (dockerfile)
=================================================
Tests: 24 (SUCCESSES: 23, FAILURES: 1, EXCEPTIONS: 0)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/InvoiceService/Dockerfile (dockerfile)
==========================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/NotificationService/Dockerfile (dockerfile)
===============================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/TimeService/Dockerfile (dockerfile)
=======================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/VehicleManagementAPI/Dockerfile (dockerfile)
================================================
Tests: 24 (SUCCESSES: 23, FAILURES: 1, EXCEPTIONS: 0)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/WebApp/Dockerfile (dockerfile)
==================================
Tests: 24 (SUCCESSES: 23, FAILURES: 1, EXCEPTIONS: 0)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/WorkshopManagementAPI/Dockerfile (dockerfile)
=================================================
Tests: 24 (SUCCESSES: 23, FAILURES: 1, EXCEPTIONS: 0)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/WorkshopManagementEventHandler/Dockerfile (dockerfile)
==========================================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You should add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/k8s/auditlogservice.yaml (kubernetes)
=========================================
Tests: 141 (SUCCESSES: 129, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'auditlogservice' of Deployment 'auditlogservice' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/auditlogservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/auditlogservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: auditlogservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'auditlogservice' of Deployment 'auditlogservice' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/auditlogservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/auditlogservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: auditlogservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'auditlogservice' of Deployment 'auditlogservice' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/auditlogservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/auditlogservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: auditlogservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'auditlogservice' of Deployment 'auditlogservice' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/auditlogservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/auditlogservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: auditlogservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'auditlogservice' of Deployment 'auditlogservice' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/auditlogservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/auditlogservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: auditlogservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'auditlogservice' of Deployment 'auditlogservice' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/auditlogservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/auditlogservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: auditlogservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'auditlogservice' of Deployment 'auditlogservice' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/auditlogservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/auditlogservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: auditlogservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'auditlogservice' of Deployment 'auditlogservice' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/auditlogservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/auditlogservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: auditlogservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'auditlogservice' of Deployment 'auditlogservice' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/auditlogservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/auditlogservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: auditlogservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'auditlogservice' of Deployment 'auditlogservice' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/auditlogservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/auditlogservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: auditlogservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/auditlogservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/auditlogservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: auditlogservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/auditlogservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/auditlogservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: auditlogservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/k8s/customermanagementapi-v1-istio.yaml (kubernetes)
========================================================
Tests: 141 (SUCCESSES: 129, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/k8s/customermanagementapi-v1-linkerd.yaml (kubernetes)
==========================================================
Tests: 141 (SUCCESSES: 129, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/k8s/customermanagementapi-v1.yaml (kubernetes)
==================================================
Tests: 141 (SUCCESSES: 129, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/customermanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: customermanagementapi
  28 │         ports:
  29 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/customermanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: customermanagementapi
  28 │         ports:
  29 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/customermanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: customermanagementapi
  28 │         ports:
  29 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/customermanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: customermanagementapi
  28 │         ports:
  29 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/customermanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: customermanagementapi
  28 │         ports:
  29 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/customermanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: customermanagementapi
  28 │         ports:
  29 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/customermanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: customermanagementapi
  28 │         ports:
  29 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/customermanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: customermanagementapi
  28 │         ports:
  29 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/customermanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: customermanagementapi
  28 │         ports:
  29 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v1' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/customermanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: customermanagementapi
  28 │         ports:
  29 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/customermanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: customermanagementapi
  28 │         ports:
  29 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v1.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/customermanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: customermanagementapi
  28 │         ports:
  29 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/k8s/customermanagementapi-v2-istio.yaml (kubernetes)
========================================================
Tests: 141 (SUCCESSES: 129, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:2.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:2.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:2.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:2.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:2.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:2.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:2.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:2.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:2.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:2.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:2.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:2.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/k8s/customermanagementapi-v2-linkerd.yaml (kubernetes)
==========================================================
Tests: 141 (SUCCESSES: 129, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:2.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:2.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:2.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:2.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:2.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:2.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:2.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:2.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:2.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:2.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:2.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/customermanagementapi:2.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: customermanagementapi
  30 │         ports:
  31 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/k8s/customermanagementapi-v2.yaml (kubernetes)
==================================================
Tests: 141 (SUCCESSES: 129, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/customermanagementapi:2.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: customermanagementapi
  28 │         ports:
  29 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/customermanagementapi:2.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: customermanagementapi
  28 │         ports:
  29 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/customermanagementapi:2.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: customermanagementapi
  28 │         ports:
  29 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/customermanagementapi:2.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: customermanagementapi
  28 │         ports:
  29 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/customermanagementapi:2.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: customermanagementapi
  28 │         ports:
  29 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/customermanagementapi:2.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: customermanagementapi
  28 │         ports:
  29 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/customermanagementapi:2.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: customermanagementapi
  28 │         ports:
  29 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/customermanagementapi:2.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: customermanagementapi
  28 │         ports:
  29 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/customermanagementapi:2.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: customermanagementapi
  28 │         ports:
  29 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'customermanagementapi' of Deployment 'customermanagementapi-v2' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/customermanagementapi:2.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: customermanagementapi
  28 │         ports:
  29 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/customermanagementapi:2.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: customermanagementapi
  28 │         ports:
  29 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/customermanagementapi-v2.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/customermanagementapi:2.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: customermanagementapi
  28 │         ports:
  29 └         - containerPort: 5100
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/k8s/dashboard-adminuser.yaml (kubernetes)
=============================================
Tests: 142 (SUCCESSES: 141, FAILURES: 1, EXCEPTIONS: 0)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

MEDIUM: ClusterRoleBinding 'admin-user' with role 'cluster-admin' should be used only when required
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RBAC role cluster-admin provides wide-ranging powers over the environment and should be used only where and when needed.

See https://avd.aquasec.com/misconfig/ksv111
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/dashboard-adminuser.yaml:10
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  10 [   name: admin-user
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/k8s/invoiceservice.yaml (kubernetes)
========================================
Tests: 141 (SUCCESSES: 129, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'invoiceservice' of Deployment 'invoiceservice' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/invoiceservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/invoiceservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: invoiceservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'invoiceservice' of Deployment 'invoiceservice' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/invoiceservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/invoiceservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: invoiceservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'invoiceservice' of Deployment 'invoiceservice' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/invoiceservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/invoiceservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: invoiceservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'invoiceservice' of Deployment 'invoiceservice' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/invoiceservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/invoiceservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: invoiceservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'invoiceservice' of Deployment 'invoiceservice' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/invoiceservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/invoiceservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: invoiceservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'invoiceservice' of Deployment 'invoiceservice' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/invoiceservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/invoiceservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: invoiceservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'invoiceservice' of Deployment 'invoiceservice' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/invoiceservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/invoiceservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: invoiceservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'invoiceservice' of Deployment 'invoiceservice' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/invoiceservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/invoiceservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: invoiceservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'invoiceservice' of Deployment 'invoiceservice' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/invoiceservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/invoiceservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: invoiceservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'invoiceservice' of Deployment 'invoiceservice' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/invoiceservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/invoiceservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: invoiceservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/invoiceservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/invoiceservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: invoiceservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/invoiceservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/invoiceservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: invoiceservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/k8s/logserver.yaml (kubernetes)
===================================
Tests: 154 (SUCCESSES: 141, FAILURES: 13, EXCEPTIONS: 0)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'logserver' of Deployment 'logserver' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/logserver.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ACCEPT_EULA
  24 │           value: "Y"
  25 │         image: datalust/seq:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: logserver
  28 │         ports:
  29 └         - containerPort: 80
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'logserver' of Deployment 'logserver' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/logserver.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ACCEPT_EULA
  24 │           value: "Y"
  25 │         image: datalust/seq:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: logserver
  28 │         ports:
  29 └         - containerPort: 80
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'logserver' of Deployment 'logserver' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/logserver.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ACCEPT_EULA
  24 │           value: "Y"
  25 │         image: datalust/seq:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: logserver
  28 │         ports:
  29 └         - containerPort: 80
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'logserver' of Deployment 'logserver' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/logserver.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ACCEPT_EULA
  24 │           value: "Y"
  25 │         image: datalust/seq:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: logserver
  28 │         ports:
  29 └         - containerPort: 80
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'logserver' of Deployment 'logserver' should specify an image tag
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/logserver.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ACCEPT_EULA
  24 │           value: "Y"
  25 │         image: datalust/seq:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: logserver
  28 │         ports:
  29 └         - containerPort: 80
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'logserver' of Deployment 'logserver' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/logserver.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ACCEPT_EULA
  24 │           value: "Y"
  25 │         image: datalust/seq:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: logserver
  28 │         ports:
  29 └         - containerPort: 80
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'logserver' of Deployment 'logserver' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/logserver.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ACCEPT_EULA
  24 │           value: "Y"
  25 │         image: datalust/seq:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: logserver
  28 │         ports:
  29 └         - containerPort: 80
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'logserver' of Deployment 'logserver' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/logserver.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ACCEPT_EULA
  24 │           value: "Y"
  25 │         image: datalust/seq:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: logserver
  28 │         ports:
  29 └         - containerPort: 80
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'logserver' of Deployment 'logserver' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/logserver.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ACCEPT_EULA
  24 │           value: "Y"
  25 │         image: datalust/seq:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: logserver
  28 │         ports:
  29 └         - containerPort: 80
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'logserver' of Deployment 'logserver' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/logserver.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ACCEPT_EULA
  24 │           value: "Y"
  25 │         image: datalust/seq:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: logserver
  28 │         ports:
  29 └         - containerPort: 80
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'logserver' of Deployment 'logserver' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/logserver.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ACCEPT_EULA
  24 │           value: "Y"
  25 │         image: datalust/seq:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: logserver
  28 │         ports:
  29 └         - containerPort: 80
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/logserver.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ACCEPT_EULA
  24 │           value: "Y"
  25 │         image: datalust/seq:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: logserver
  28 │         ports:
  29 └         - containerPort: 80
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/logserver.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ACCEPT_EULA
  24 │           value: "Y"
  25 │         image: datalust/seq:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: logserver
  28 │         ports:
  29 └         - containerPort: 80
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/k8s/mailserver.yaml (kubernetes)
====================================
Tests: 153 (SUCCESSES: 141, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'mailserver' of Deployment 'mailserver' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/mailserver.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - image: maildev/maildev:1.1.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: mailserver
  25 │         ports:
  26 │         - containerPort: 25
  27 └         - containerPort: 80
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'mailserver' of Deployment 'mailserver' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/mailserver.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - image: maildev/maildev:1.1.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: mailserver
  25 │         ports:
  26 │         - containerPort: 25
  27 └         - containerPort: 80
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'mailserver' of Deployment 'mailserver' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/mailserver.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - image: maildev/maildev:1.1.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: mailserver
  25 │         ports:
  26 │         - containerPort: 25
  27 └         - containerPort: 80
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'mailserver' of Deployment 'mailserver' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/mailserver.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - image: maildev/maildev:1.1.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: mailserver
  25 │         ports:
  26 │         - containerPort: 25
  27 └         - containerPort: 80
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'mailserver' of Deployment 'mailserver' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/mailserver.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - image: maildev/maildev:1.1.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: mailserver
  25 │         ports:
  26 │         - containerPort: 25
  27 └         - containerPort: 80
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'mailserver' of Deployment 'mailserver' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/mailserver.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - image: maildev/maildev:1.1.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: mailserver
  25 │         ports:
  26 │         - containerPort: 25
  27 └         - containerPort: 80
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'mailserver' of Deployment 'mailserver' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/mailserver.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - image: maildev/maildev:1.1.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: mailserver
  25 │         ports:
  26 │         - containerPort: 25
  27 └         - containerPort: 80
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'mailserver' of Deployment 'mailserver' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/mailserver.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - image: maildev/maildev:1.1.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: mailserver
  25 │         ports:
  26 │         - containerPort: 25
  27 └         - containerPort: 80
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'mailserver' of Deployment 'mailserver' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/mailserver.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - image: maildev/maildev:1.1.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: mailserver
  25 │         ports:
  26 │         - containerPort: 25
  27 └         - containerPort: 80
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'mailserver' of Deployment 'mailserver' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/mailserver.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - image: maildev/maildev:1.1.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: mailserver
  25 │         ports:
  26 │         - containerPort: 25
  27 └         - containerPort: 80
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/mailserver.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - image: maildev/maildev:1.1.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: mailserver
  25 │         ports:
  26 │         - containerPort: 25
  27 └         - containerPort: 80
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/mailserver.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - image: maildev/maildev:1.1.0
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: mailserver
  25 │         ports:
  26 │         - containerPort: 25
  27 └         - containerPort: 80
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/k8s/notificationservice.yaml (kubernetes)
=============================================
Tests: 141 (SUCCESSES: 129, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'notificationservice' of Deployment 'notificationservice' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/notificationservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/notificationservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: notificationservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'notificationservice' of Deployment 'notificationservice' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/notificationservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/notificationservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: notificationservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'notificationservice' of Deployment 'notificationservice' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/notificationservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/notificationservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: notificationservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'notificationservice' of Deployment 'notificationservice' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/notificationservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/notificationservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: notificationservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'notificationservice' of Deployment 'notificationservice' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/notificationservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/notificationservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: notificationservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'notificationservice' of Deployment 'notificationservice' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/notificationservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/notificationservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: notificationservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'notificationservice' of Deployment 'notificationservice' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/notificationservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/notificationservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: notificationservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'notificationservice' of Deployment 'notificationservice' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/notificationservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/notificationservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: notificationservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'notificationservice' of Deployment 'notificationservice' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/notificationservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/notificationservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: notificationservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'notificationservice' of Deployment 'notificationservice' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/notificationservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/notificationservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: notificationservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/notificationservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/notificationservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: notificationservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/notificationservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/notificationservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: notificationservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/k8s/rabbitmq.yaml (kubernetes)
==================================
Tests: 154 (SUCCESSES: 141, FAILURES: 13, EXCEPTIONS: 0)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

MEDIUM: Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/rabbitmq.yaml:34-46
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  34 ┌       - env:
  35 │         - name: RABBITMQ_CONFIG_FILE
  36 │           value: /etc/pitstop/rabbitmq.conf
  37 │         image: rabbitmq:3-management-alpine
  38 │         imagePullPolicy: IfNotPresent
  39 │         name: rabbitmq
  40 │         ports:
  41 │         - containerPort: 15672
  42 └         - containerPort: 5672
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq' of Deployment 'rabbitmq' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/rabbitmq.yaml:34-46
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  34 ┌       - env:
  35 │         - name: RABBITMQ_CONFIG_FILE
  36 │           value: /etc/pitstop/rabbitmq.conf
  37 │         image: rabbitmq:3-management-alpine
  38 │         imagePullPolicy: IfNotPresent
  39 │         name: rabbitmq
  40 │         ports:
  41 │         - containerPort: 15672
  42 └         - containerPort: 5672
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/rabbitmq.yaml:34-46
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  34 ┌       - env:
  35 │         - name: RABBITMQ_CONFIG_FILE
  36 │           value: /etc/pitstop/rabbitmq.conf
  37 │         image: rabbitmq:3-management-alpine
  38 │         imagePullPolicy: IfNotPresent
  39 │         name: rabbitmq
  40 │         ports:
  41 │         - containerPort: 15672
  42 └         - containerPort: 5672
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/rabbitmq.yaml:34-46
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  34 ┌       - env:
  35 │         - name: RABBITMQ_CONFIG_FILE
  36 │           value: /etc/pitstop/rabbitmq.conf
  37 │         image: rabbitmq:3-management-alpine
  38 │         imagePullPolicy: IfNotPresent
  39 │         name: rabbitmq
  40 │         ports:
  41 │         - containerPort: 15672
  42 └         - containerPort: 5672
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/rabbitmq.yaml:34-46
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  34 ┌       - env:
  35 │         - name: RABBITMQ_CONFIG_FILE
  36 │           value: /etc/pitstop/rabbitmq.conf
  37 │         image: rabbitmq:3-management-alpine
  38 │         imagePullPolicy: IfNotPresent
  39 │         name: rabbitmq
  40 │         ports:
  41 │         - containerPort: 15672
  42 └         - containerPort: 5672
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/rabbitmq.yaml:34-46
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  34 ┌       - env:
  35 │         - name: RABBITMQ_CONFIG_FILE
  36 │           value: /etc/pitstop/rabbitmq.conf
  37 │         image: rabbitmq:3-management-alpine
  38 │         imagePullPolicy: IfNotPresent
  39 │         name: rabbitmq
  40 │         ports:
  41 │         - containerPort: 15672
  42 └         - containerPort: 5672
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/rabbitmq.yaml:34-46
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  34 ┌       - env:
  35 │         - name: RABBITMQ_CONFIG_FILE
  36 │           value: /etc/pitstop/rabbitmq.conf
  37 │         image: rabbitmq:3-management-alpine
  38 │         imagePullPolicy: IfNotPresent
  39 │         name: rabbitmq
  40 │         ports:
  41 │         - containerPort: 15672
  42 └         - containerPort: 5672
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/rabbitmq.yaml:34-46
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  34 ┌       - env:
  35 │         - name: RABBITMQ_CONFIG_FILE
  36 │           value: /etc/pitstop/rabbitmq.conf
  37 │         image: rabbitmq:3-management-alpine
  38 │         imagePullPolicy: IfNotPresent
  39 │         name: rabbitmq
  40 │         ports:
  41 │         - containerPort: 15672
  42 └         - containerPort: 5672
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/rabbitmq.yaml:34-46
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  34 ┌       - env:
  35 │         - name: RABBITMQ_CONFIG_FILE
  36 │           value: /etc/pitstop/rabbitmq.conf
  37 │         image: rabbitmq:3-management-alpine
  38 │         imagePullPolicy: IfNotPresent
  39 │         name: rabbitmq
  40 │         ports:
  41 │         - containerPort: 15672
  42 └         - containerPort: 5672
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/rabbitmq.yaml:34-46
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  34 ┌       - env:
  35 │         - name: RABBITMQ_CONFIG_FILE
  36 │           value: /etc/pitstop/rabbitmq.conf
  37 │         image: rabbitmq:3-management-alpine
  38 │         imagePullPolicy: IfNotPresent
  39 │         name: rabbitmq
  40 │         ports:
  41 │         - containerPort: 15672
  42 └         - containerPort: 5672
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/rabbitmq.yaml:34-46
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  34 ┌       - env:
  35 │         - name: RABBITMQ_CONFIG_FILE
  36 │           value: /etc/pitstop/rabbitmq.conf
  37 │         image: rabbitmq:3-management-alpine
  38 │         imagePullPolicy: IfNotPresent
  39 │         name: rabbitmq
  40 │         ports:
  41 │         - containerPort: 15672
  42 └         - containerPort: 5672
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/rabbitmq.yaml:34-46
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  34 ┌       - env:
  35 │         - name: RABBITMQ_CONFIG_FILE
  36 │           value: /etc/pitstop/rabbitmq.conf
  37 │         image: rabbitmq:3-management-alpine
  38 │         imagePullPolicy: IfNotPresent
  39 │         name: rabbitmq
  40 │         ports:
  41 │         - containerPort: 15672
  42 └         - containerPort: 5672
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


HIGH: ConfigMap 'rqconfigmap' in 'pitstop' namespace stores secrets in key(s) or value(s) '{"default_pass "}'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/k8s/sqlserver.yaml (kubernetes)
===================================
Tests: 154 (SUCCESSES: 141, FAILURES: 13, EXCEPTIONS: 0)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'sqlserver' of Deployment 'sqlserver' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/sqlserver.yaml:21-32
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - env:
  22 │         - name: ACCEPT_EULA
  23 │           value: "Y"
  24 │         - name: MSSQL_PID
  25 │           value: Developer
  26 │         - name: SA_PASSWORD
  27 │           value: 8jkGh47hnDw89Haq8LN2
  28 │         image: mcr.microsoft.com/azure-sql-edge
  29 └         imagePullPolicy: IfNotPresent
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'sqlserver' of Deployment 'sqlserver' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/sqlserver.yaml:21-32
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - env:
  22 │         - name: ACCEPT_EULA
  23 │           value: "Y"
  24 │         - name: MSSQL_PID
  25 │           value: Developer
  26 │         - name: SA_PASSWORD
  27 │           value: 8jkGh47hnDw89Haq8LN2
  28 │         image: mcr.microsoft.com/azure-sql-edge
  29 └         imagePullPolicy: IfNotPresent
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'sqlserver' of Deployment 'sqlserver' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/sqlserver.yaml:21-32
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - env:
  22 │         - name: ACCEPT_EULA
  23 │           value: "Y"
  24 │         - name: MSSQL_PID
  25 │           value: Developer
  26 │         - name: SA_PASSWORD
  27 │           value: 8jkGh47hnDw89Haq8LN2
  28 │         image: mcr.microsoft.com/azure-sql-edge
  29 └         imagePullPolicy: IfNotPresent
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'sqlserver' of Deployment 'sqlserver' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/sqlserver.yaml:21-32
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - env:
  22 │         - name: ACCEPT_EULA
  23 │           value: "Y"
  24 │         - name: MSSQL_PID
  25 │           value: Developer
  26 │         - name: SA_PASSWORD
  27 │           value: 8jkGh47hnDw89Haq8LN2
  28 │         image: mcr.microsoft.com/azure-sql-edge
  29 └         imagePullPolicy: IfNotPresent
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'sqlserver' of Deployment 'sqlserver' should specify an image tag
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/sqlserver.yaml:21-32
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - env:
  22 │         - name: ACCEPT_EULA
  23 │           value: "Y"
  24 │         - name: MSSQL_PID
  25 │           value: Developer
  26 │         - name: SA_PASSWORD
  27 │           value: 8jkGh47hnDw89Haq8LN2
  28 │         image: mcr.microsoft.com/azure-sql-edge
  29 └         imagePullPolicy: IfNotPresent
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'sqlserver' of Deployment 'sqlserver' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/sqlserver.yaml:21-32
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - env:
  22 │         - name: ACCEPT_EULA
  23 │           value: "Y"
  24 │         - name: MSSQL_PID
  25 │           value: Developer
  26 │         - name: SA_PASSWORD
  27 │           value: 8jkGh47hnDw89Haq8LN2
  28 │         image: mcr.microsoft.com/azure-sql-edge
  29 └         imagePullPolicy: IfNotPresent
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'sqlserver' of Deployment 'sqlserver' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/sqlserver.yaml:21-32
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - env:
  22 │         - name: ACCEPT_EULA
  23 │           value: "Y"
  24 │         - name: MSSQL_PID
  25 │           value: Developer
  26 │         - name: SA_PASSWORD
  27 │           value: 8jkGh47hnDw89Haq8LN2
  28 │         image: mcr.microsoft.com/azure-sql-edge
  29 └         imagePullPolicy: IfNotPresent
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'sqlserver' of Deployment 'sqlserver' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/sqlserver.yaml:21-32
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - env:
  22 │         - name: ACCEPT_EULA
  23 │           value: "Y"
  24 │         - name: MSSQL_PID
  25 │           value: Developer
  26 │         - name: SA_PASSWORD
  27 │           value: 8jkGh47hnDw89Haq8LN2
  28 │         image: mcr.microsoft.com/azure-sql-edge
  29 └         imagePullPolicy: IfNotPresent
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'sqlserver' of Deployment 'sqlserver' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/sqlserver.yaml:21-32
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - env:
  22 │         - name: ACCEPT_EULA
  23 │           value: "Y"
  24 │         - name: MSSQL_PID
  25 │           value: Developer
  26 │         - name: SA_PASSWORD
  27 │           value: 8jkGh47hnDw89Haq8LN2
  28 │         image: mcr.microsoft.com/azure-sql-edge
  29 └         imagePullPolicy: IfNotPresent
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'sqlserver' of Deployment 'sqlserver' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/sqlserver.yaml:21-32
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - env:
  22 │         - name: ACCEPT_EULA
  23 │           value: "Y"
  24 │         - name: MSSQL_PID
  25 │           value: Developer
  26 │         - name: SA_PASSWORD
  27 │           value: 8jkGh47hnDw89Haq8LN2
  28 │         image: mcr.microsoft.com/azure-sql-edge
  29 └         imagePullPolicy: IfNotPresent
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'sqlserver' of Deployment 'sqlserver' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/sqlserver.yaml:21-32
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - env:
  22 │         - name: ACCEPT_EULA
  23 │           value: "Y"
  24 │         - name: MSSQL_PID
  25 │           value: Developer
  26 │         - name: SA_PASSWORD
  27 │           value: 8jkGh47hnDw89Haq8LN2
  28 │         image: mcr.microsoft.com/azure-sql-edge
  29 └         imagePullPolicy: IfNotPresent
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/sqlserver.yaml:21-32
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - env:
  22 │         - name: ACCEPT_EULA
  23 │           value: "Y"
  24 │         - name: MSSQL_PID
  25 │           value: Developer
  26 │         - name: SA_PASSWORD
  27 │           value: 8jkGh47hnDw89Haq8LN2
  28 │         image: mcr.microsoft.com/azure-sql-edge
  29 └         imagePullPolicy: IfNotPresent
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/sqlserver.yaml:21-32
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌       - env:
  22 │         - name: ACCEPT_EULA
  23 │           value: "Y"
  24 │         - name: MSSQL_PID
  25 │           value: Developer
  26 │         - name: SA_PASSWORD
  27 │           value: 8jkGh47hnDw89Haq8LN2
  28 │         image: mcr.microsoft.com/azure-sql-edge
  29 └         imagePullPolicy: IfNotPresent
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/k8s/timeservice.yaml (kubernetes)
=====================================
Tests: 141 (SUCCESSES: 129, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'timeservice' of Deployment 'timeservice' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/timeservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/timeservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: timeservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'timeservice' of Deployment 'timeservice' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/timeservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/timeservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: timeservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'timeservice' of Deployment 'timeservice' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/timeservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/timeservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: timeservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'timeservice' of Deployment 'timeservice' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/timeservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/timeservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: timeservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'timeservice' of Deployment 'timeservice' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/timeservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/timeservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: timeservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'timeservice' of Deployment 'timeservice' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/timeservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/timeservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: timeservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'timeservice' of Deployment 'timeservice' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/timeservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/timeservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: timeservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'timeservice' of Deployment 'timeservice' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/timeservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/timeservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: timeservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'timeservice' of Deployment 'timeservice' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/timeservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/timeservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: timeservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'timeservice' of Deployment 'timeservice' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/timeservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/timeservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: timeservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/timeservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/timeservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: timeservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/timeservice.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/timeservice:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: timeservice
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/k8s/vehiclemanagementapi-istio.yaml (kubernetes)
====================================================
Tests: 153 (SUCCESSES: 141, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/vehiclemanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: vehiclemanagementapi
  30 │         ports:
  31 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/vehiclemanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: vehiclemanagementapi
  30 │         ports:
  31 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/vehiclemanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: vehiclemanagementapi
  30 │         ports:
  31 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/vehiclemanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: vehiclemanagementapi
  30 │         ports:
  31 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/vehiclemanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: vehiclemanagementapi
  30 │         ports:
  31 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/vehiclemanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: vehiclemanagementapi
  30 │         ports:
  31 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/vehiclemanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: vehiclemanagementapi
  30 │         ports:
  31 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/vehiclemanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: vehiclemanagementapi
  30 │         ports:
  31 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/vehiclemanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: vehiclemanagementapi
  30 │         ports:
  31 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/vehiclemanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: vehiclemanagementapi
  30 │         ports:
  31 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/vehiclemanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: vehiclemanagementapi
  30 │         ports:
  31 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/vehiclemanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: vehiclemanagementapi
  30 │         ports:
  31 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/k8s/vehiclemanagementapi-linkerd.yaml (kubernetes)
======================================================
Tests: 153 (SUCCESSES: 141, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/vehiclemanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: vehiclemanagementapi
  30 │         ports:
  31 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/vehiclemanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: vehiclemanagementapi
  30 │         ports:
  31 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/vehiclemanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: vehiclemanagementapi
  30 │         ports:
  31 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/vehiclemanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: vehiclemanagementapi
  30 │         ports:
  31 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/vehiclemanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: vehiclemanagementapi
  30 │         ports:
  31 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/vehiclemanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: vehiclemanagementapi
  30 │         ports:
  31 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/vehiclemanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: vehiclemanagementapi
  30 │         ports:
  31 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/vehiclemanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: vehiclemanagementapi
  30 │         ports:
  31 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/vehiclemanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: vehiclemanagementapi
  30 │         ports:
  31 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/vehiclemanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: vehiclemanagementapi
  30 │         ports:
  31 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/vehiclemanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: vehiclemanagementapi
  30 │         ports:
  31 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/vehiclemanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: vehiclemanagementapi
  30 │         ports:
  31 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/k8s/vehiclemanagementapi.yaml (kubernetes)
==============================================
Tests: 153 (SUCCESSES: 141, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/vehiclemanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: vehiclemanagementapi
  28 │         ports:
  29 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/vehiclemanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: vehiclemanagementapi
  28 │         ports:
  29 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/vehiclemanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: vehiclemanagementapi
  28 │         ports:
  29 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/vehiclemanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: vehiclemanagementapi
  28 │         ports:
  29 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/vehiclemanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: vehiclemanagementapi
  28 │         ports:
  29 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/vehiclemanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: vehiclemanagementapi
  28 │         ports:
  29 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/vehiclemanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: vehiclemanagementapi
  28 │         ports:
  29 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/vehiclemanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: vehiclemanagementapi
  28 │         ports:
  29 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/vehiclemanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: vehiclemanagementapi
  28 │         ports:
  29 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'vehiclemanagementapi' of Deployment 'vehiclemanagementapi' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/vehiclemanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: vehiclemanagementapi
  28 │         ports:
  29 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/vehiclemanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: vehiclemanagementapi
  28 │         ports:
  29 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/vehiclemanagementapi.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/vehiclemanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: vehiclemanagementapi
  28 │         ports:
  29 └         - containerPort: 5000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/k8s/webapp-istio.yaml (kubernetes)
======================================
Tests: 153 (SUCCESSES: 141, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'webapp' of Deployment 'webapp' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/webapp:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: webapp
  30 │         ports:
  31 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'webapp' of Deployment 'webapp' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/webapp:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: webapp
  30 │         ports:
  31 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'webapp' of Deployment 'webapp' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/webapp:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: webapp
  30 │         ports:
  31 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'webapp' of Deployment 'webapp' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/webapp:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: webapp
  30 │         ports:
  31 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'webapp' of Deployment 'webapp' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/webapp:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: webapp
  30 │         ports:
  31 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'webapp' of Deployment 'webapp' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/webapp:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: webapp
  30 │         ports:
  31 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'webapp' of Deployment 'webapp' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/webapp:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: webapp
  30 │         ports:
  31 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'webapp' of Deployment 'webapp' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/webapp:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: webapp
  30 │         ports:
  31 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'webapp' of Deployment 'webapp' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/webapp:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: webapp
  30 │         ports:
  31 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'webapp' of Deployment 'webapp' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/webapp:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: webapp
  30 │         ports:
  31 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/webapp:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: webapp
  30 │         ports:
  31 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/webapp:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: webapp
  30 │         ports:
  31 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/k8s/webapp-linkerd.yaml (kubernetes)
========================================
Tests: 153 (SUCCESSES: 141, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'webapp' of Deployment 'webapp' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/webapp:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: webapp
  30 │         ports:
  31 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'webapp' of Deployment 'webapp' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/webapp:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: webapp
  30 │         ports:
  31 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'webapp' of Deployment 'webapp' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/webapp:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: webapp
  30 │         ports:
  31 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'webapp' of Deployment 'webapp' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/webapp:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: webapp
  30 │         ports:
  31 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'webapp' of Deployment 'webapp' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/webapp:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: webapp
  30 │         ports:
  31 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'webapp' of Deployment 'webapp' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/webapp:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: webapp
  30 │         ports:
  31 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'webapp' of Deployment 'webapp' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/webapp:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: webapp
  30 │         ports:
  31 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'webapp' of Deployment 'webapp' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/webapp:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: webapp
  30 │         ports:
  31 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'webapp' of Deployment 'webapp' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/webapp:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: webapp
  30 │         ports:
  31 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'webapp' of Deployment 'webapp' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/webapp:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: webapp
  30 │         ports:
  31 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/webapp:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: webapp
  30 │         ports:
  31 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/webapp:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: webapp
  30 │         ports:
  31 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/k8s/webapp.yaml (kubernetes)
================================
Tests: 153 (SUCCESSES: 141, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'webapp' of Deployment 'webapp' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/webapp:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: webapp
  28 │         ports:
  29 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'webapp' of Deployment 'webapp' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/webapp:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: webapp
  28 │         ports:
  29 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'webapp' of Deployment 'webapp' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/webapp:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: webapp
  28 │         ports:
  29 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'webapp' of Deployment 'webapp' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/webapp:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: webapp
  28 │         ports:
  29 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'webapp' of Deployment 'webapp' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/webapp:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: webapp
  28 │         ports:
  29 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'webapp' of Deployment 'webapp' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/webapp:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: webapp
  28 │         ports:
  29 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'webapp' of Deployment 'webapp' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/webapp:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: webapp
  28 │         ports:
  29 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'webapp' of Deployment 'webapp' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/webapp:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: webapp
  28 │         ports:
  29 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'webapp' of Deployment 'webapp' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/webapp:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: webapp
  28 │         ports:
  29 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'webapp' of Deployment 'webapp' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/webapp:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: webapp
  28 │         ports:
  29 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/webapp:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: webapp
  28 │         ports:
  29 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/webapp.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/webapp:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: webapp
  28 │         ports:
  29 └         - containerPort: 7005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/k8s/workshopmanagementapi-istio.yaml (kubernetes)
=====================================================
Tests: 153 (SUCCESSES: 141, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/workshopmanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: workshopmanagementapi
  30 │         ports:
  31 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/workshopmanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: workshopmanagementapi
  30 │         ports:
  31 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/workshopmanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: workshopmanagementapi
  30 │         ports:
  31 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/workshopmanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: workshopmanagementapi
  30 │         ports:
  31 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/workshopmanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: workshopmanagementapi
  30 │         ports:
  31 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/workshopmanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: workshopmanagementapi
  30 │         ports:
  31 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/workshopmanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: workshopmanagementapi
  30 │         ports:
  31 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/workshopmanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: workshopmanagementapi
  30 │         ports:
  31 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/workshopmanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: workshopmanagementapi
  30 │         ports:
  31 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/workshopmanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: workshopmanagementapi
  30 │         ports:
  31 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/workshopmanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: workshopmanagementapi
  30 │         ports:
  31 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi-istio.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/workshopmanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: workshopmanagementapi
  30 │         ports:
  31 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/k8s/workshopmanagementapi-linkerd.yaml (kubernetes)
=======================================================
Tests: 153 (SUCCESSES: 141, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/workshopmanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: workshopmanagementapi
  30 │         ports:
  31 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/workshopmanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: workshopmanagementapi
  30 │         ports:
  31 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/workshopmanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: workshopmanagementapi
  30 │         ports:
  31 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/workshopmanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: workshopmanagementapi
  30 │         ports:
  31 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/workshopmanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: workshopmanagementapi
  30 │         ports:
  31 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/workshopmanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: workshopmanagementapi
  30 │         ports:
  31 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/workshopmanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: workshopmanagementapi
  30 │         ports:
  31 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/workshopmanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: workshopmanagementapi
  30 │         ports:
  31 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/workshopmanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: workshopmanagementapi
  30 │         ports:
  31 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/workshopmanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: workshopmanagementapi
  30 │         ports:
  31 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/workshopmanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: workshopmanagementapi
  30 │         ports:
  31 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi-linkerd.yaml:24-31
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌       - env:
  25 │         - name: ASPNETCORE_ENVIRONMENT
  26 │           value: Production
  27 │         image: pitstop/workshopmanagementapi:1.0
  28 │         imagePullPolicy: IfNotPresent
  29 │         name: workshopmanagementapi
  30 │         ports:
  31 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/k8s/workshopmanagementapi.yaml (kubernetes)
===============================================
Tests: 153 (SUCCESSES: 141, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/workshopmanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: workshopmanagementapi
  28 │         ports:
  29 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/workshopmanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: workshopmanagementapi
  28 │         ports:
  29 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/workshopmanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: workshopmanagementapi
  28 │         ports:
  29 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/workshopmanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: workshopmanagementapi
  28 │         ports:
  29 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/workshopmanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: workshopmanagementapi
  28 │         ports:
  29 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/workshopmanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: workshopmanagementapi
  28 │         ports:
  29 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/workshopmanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: workshopmanagementapi
  28 │         ports:
  29 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/workshopmanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: workshopmanagementapi
  28 │         ports:
  29 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/workshopmanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: workshopmanagementapi
  28 │         ports:
  29 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementapi' of Deployment 'workshopmanagementapi' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/workshopmanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: workshopmanagementapi
  28 │         ports:
  29 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/workshopmanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: workshopmanagementapi
  28 │         ports:
  29 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementapi.yaml:22-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: ASPNETCORE_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/workshopmanagementapi:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         name: workshopmanagementapi
  28 │         ports:
  29 └         - containerPort: 5200
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/k8s/workshopmanagementeventhandler.yaml (kubernetes)
========================================================
Tests: 141 (SUCCESSES: 129, FAILURES: 12, EXCEPTIONS: 0)
Failures: 12 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

MEDIUM: Container 'workshopmanagementeventhandler' of Deployment 'workshopmanagementeventhandler' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementeventhandler.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/workshopmanagementeventhandler:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: workshopmanagementeventhandler
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementeventhandler' of Deployment 'workshopmanagementeventhandler' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementeventhandler.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/workshopmanagementeventhandler:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: workshopmanagementeventhandler
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementeventhandler' of Deployment 'workshopmanagementeventhandler' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementeventhandler.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/workshopmanagementeventhandler:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: workshopmanagementeventhandler
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'workshopmanagementeventhandler' of Deployment 'workshopmanagementeventhandler' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementeventhandler.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/workshopmanagementeventhandler:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: workshopmanagementeventhandler
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementeventhandler' of Deployment 'workshopmanagementeventhandler' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementeventhandler.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/workshopmanagementeventhandler:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: workshopmanagementeventhandler
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementeventhandler' of Deployment 'workshopmanagementeventhandler' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementeventhandler.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/workshopmanagementeventhandler:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: workshopmanagementeventhandler
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementeventhandler' of Deployment 'workshopmanagementeventhandler' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementeventhandler.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/workshopmanagementeventhandler:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: workshopmanagementeventhandler
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementeventhandler' of Deployment 'workshopmanagementeventhandler' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementeventhandler.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/workshopmanagementeventhandler:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: workshopmanagementeventhandler
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementeventhandler' of Deployment 'workshopmanagementeventhandler' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementeventhandler.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/workshopmanagementeventhandler:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: workshopmanagementeventhandler
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'workshopmanagementeventhandler' of Deployment 'workshopmanagementeventhandler' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementeventhandler.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/workshopmanagementeventhandler:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: workshopmanagementeventhandler
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementeventhandler.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/workshopmanagementeventhandler:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: workshopmanagementeventhandler
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: container should drop all
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 src/k8s/workshopmanagementeventhandler.yaml:22-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  22 ┌       - env:
  23 │         - name: DOTNET_ENVIRONMENT
  24 │           value: Production
  25 │         image: pitstop/workshopmanagementeventhandler:1.0
  26 │         imagePullPolicy: IfNotPresent
  27 └         name: workshopmanagementeventhandler
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


