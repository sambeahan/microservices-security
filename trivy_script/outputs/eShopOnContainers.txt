Enumerating objects: 12152, done.
Counting objects:   0% (1/12152)Counting objects:   1% (122/12152)Counting objects:   2% (244/12152)Counting objects:   3% (365/12152)Counting objects:   4% (487/12152)Counting objects:   5% (608/12152)Counting objects:   6% (730/12152)Counting objects:   7% (851/12152)Counting objects:   8% (973/12152)Counting objects:   9% (1094/12152)Counting objects:  10% (1216/12152)Counting objects:  11% (1337/12152)Counting objects:  12% (1459/12152)Counting objects:  13% (1580/12152)Counting objects:  14% (1702/12152)Counting objects:  15% (1823/12152)Counting objects:  16% (1945/12152)Counting objects:  17% (2066/12152)Counting objects:  18% (2188/12152)Counting objects:  19% (2309/12152)Counting objects:  20% (2431/12152)Counting objects:  21% (2552/12152)Counting objects:  22% (2674/12152)Counting objects:  23% (2795/12152)Counting objects:  24% (2917/12152)Counting objects:  25% (3038/12152)Counting objects:  26% (3160/12152)Counting objects:  27% (3282/12152)Counting objects:  28% (3403/12152)Counting objects:  29% (3525/12152)Counting objects:  30% (3646/12152)Counting objects:  31% (3768/12152)Counting objects:  32% (3889/12152)Counting objects:  33% (4011/12152)Counting objects:  34% (4132/12152)Counting objects:  35% (4254/12152)Counting objects:  36% (4375/12152)Counting objects:  37% (4497/12152)Counting objects:  38% (4618/12152)Counting objects:  39% (4740/12152)Counting objects:  40% (4861/12152)Counting objects:  41% (4983/12152)Counting objects:  42% (5104/12152)Counting objects:  43% (5226/12152)Counting objects:  44% (5347/12152)Counting objects:  45% (5469/12152)Counting objects:  46% (5590/12152)Counting objects:  47% (5712/12152)Counting objects:  48% (5833/12152)Counting objects:  49% (5955/12152)Counting objects:  50% (6076/12152)Counting objects:  51% (6198/12152)Counting objects:  52% (6320/12152)Counting objects:  53% (6441/12152)Counting objects:  54% (6563/12152)Counting objects:  55% (6684/12152)Counting objects:  56% (6806/12152)Counting objects:  57% (6927/12152)Counting objects:  58% (7049/12152)Counting objects:  59% (7170/12152)Counting objects:  60% (7292/12152)Counting objects:  61% (7413/12152)Counting objects:  62% (7535/12152)Counting objects:  63% (7656/12152)Counting objects:  64% (7778/12152)Counting objects:  65% (7899/12152)Counting objects:  66% (8021/12152)Counting objects:  67% (8142/12152)Counting objects:  68% (8264/12152)Counting objects:  69% (8385/12152)Counting objects:  70% (8507/12152)Counting objects:  71% (8628/12152)Counting objects:  72% (8750/12152)Counting objects:  73% (8871/12152)Counting objects:  74% (8993/12152)Counting objects:  75% (9114/12152)Counting objects:  76% (9236/12152)Counting objects:  77% (9358/12152)Counting objects:  78% (9479/12152)Counting objects:  79% (9601/12152)Counting objects:  80% (9722/12152)Counting objects:  81% (9844/12152)Counting objects:  82% (9965/12152)Counting objects:  83% (10087/12152)Counting objects:  84% (10208/12152)Counting objects:  85% (10330/12152)Counting objects:  86% (10451/12152)Counting objects:  87% (10573/12152)Counting objects:  88% (10694/12152)Counting objects:  89% (10816/12152)Counting objects:  90% (10937/12152)Counting objects:  91% (11059/12152)Counting objects:  92% (11180/12152)Counting objects:  93% (11302/12152)Counting objects:  94% (11423/12152)Counting objects:  95% (11545/12152)Counting objects:  96% (11666/12152)Counting objects:  97% (11788/12152)Counting objects:  98% (11909/12152)Counting objects:  99% (12031/12152)Counting objects: 100% (12152/12152)Counting objects: 100% (12152/12152), done.
Compressing objects:   0% (1/6737)Compressing objects:   1% (68/6737)Compressing objects:   2% (135/6737)Compressing objects:   3% (203/6737)Compressing objects:   4% (270/6737)Compressing objects:   5% (337/6737)Compressing objects:   6% (405/6737)Compressing objects:   7% (472/6737)Compressing objects:   8% (539/6737)Compressing objects:   9% (607/6737)Compressing objects:  10% (674/6737)Compressing objects:  11% (742/6737)Compressing objects:  12% (809/6737)Compressing objects:  13% (876/6737)Compressing objects:  14% (944/6737)Compressing objects:  15% (1011/6737)Compressing objects:  16% (1078/6737)Compressing objects:  17% (1146/6737)Compressing objects:  18% (1213/6737)Compressing objects:  19% (1281/6737)Compressing objects:  20% (1348/6737)Compressing objects:  21% (1415/6737)Compressing objects:  22% (1483/6737)Compressing objects:  23% (1550/6737)Compressing objects:  24% (1617/6737)Compressing objects:  25% (1685/6737)Compressing objects:  26% (1752/6737)Compressing objects:  27% (1819/6737)Compressing objects:  28% (1887/6737)Compressing objects:  29% (1954/6737)Compressing objects:  30% (2022/6737)Compressing objects:  31% (2089/6737)Compressing objects:  32% (2156/6737)Compressing objects:  33% (2224/6737)Compressing objects:  34% (2291/6737)Compressing objects:  35% (2358/6737)Compressing objects:  36% (2426/6737)Compressing objects:  37% (2493/6737)Compressing objects:  38% (2561/6737)Compressing objects:  39% (2628/6737)Compressing objects:  40% (2695/6737)Compressing objects:  41% (2763/6737)Compressing objects:  42% (2830/6737)Compressing objects:  43% (2897/6737)Compressing objects:  44% (2965/6737)Compressing objects:  45% (3032/6737)Compressing objects:  46% (3100/6737)Compressing objects:  47% (3167/6737)Compressing objects:  48% (3234/6737)Compressing objects:  49% (3302/6737)Compressing objects:  50% (3369/6737)Compressing objects:  51% (3436/6737)Compressing objects:  52% (3504/6737)Compressing objects:  52% (3516/6737)Compressing objects:  52% (3519/6737)Compressing objects:  52% (3525/6737)Compressing objects:  52% (3528/6737)Compressing objects:  52% (3533/6737)Compressing objects:  53% (3571/6737)Compressing objects:  54% (3638/6737)Compressing objects:  55% (3706/6737)Compressing objects:  56% (3773/6737)Compressing objects:  57% (3841/6737)Compressing objects:  58% (3908/6737)Compressing objects:  59% (3975/6737)Compressing objects:  60% (4043/6737)Compressing objects:  61% (4110/6737)Compressing objects:  62% (4177/6737)Compressing objects:  63% (4245/6737)Compressing objects:  64% (4312/6737)Compressing objects:  65% (4380/6737)Compressing objects:  66% (4447/6737)Compressing objects:  67% (4514/6737)Compressing objects:  68% (4582/6737)Compressing objects:  69% (4649/6737)Compressing objects:  70% (4716/6737)Compressing objects:  71% (4784/6737)Compressing objects:  72% (4851/6737)Compressing objects:  73% (4919/6737)Compressing objects:  74% (4986/6737)Compressing objects:  75% (5053/6737)Compressing objects:  76% (5121/6737)Compressing objects:  77% (5188/6737)Compressing objects:  78% (5255/6737)Compressing objects:  79% (5323/6737)Compressing objects:  80% (5390/6737)Compressing objects:  81% (5457/6737)Compressing objects:  82% (5525/6737)Compressing objects:  83% (5592/6737)Compressing objects:  84% (5660/6737)Compressing objects:  85% (5727/6737)Compressing objects:  86% (5794/6737)Compressing objects:  87% (5862/6737)Compressing objects:  88% (5929/6737)Compressing objects:  89% (5996/6737)Compressing objects:  90% (6064/6737)Compressing objects:  91% (6131/6737)Compressing objects:  92% (6199/6737)Compressing objects:  93% (6266/6737)Compressing objects:  94% (6333/6737)Compressing objects:  95% (6401/6737)Compressing objects:  96% (6468/6737)Compressing objects:  97% (6535/6737)Compressing objects:  98% (6603/6737)Compressing objects:  99% (6670/6737)Compressing objects: 100% (6737/6737)Compressing objects: 100% (6737/6737), done.
Total 12152 (delta 7155), reused 8892 (delta 4797), pack-reused 0

 (azure-arm)
============
Tests: 2 (SUCCESSES: 0, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 1)

HIGH: Account does not enforce HTTPS.
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You can configure your storage account to accept requests from secure connections only by setting the Secure transfer required property for the storage account. 

When you require secure transfer, any requests originating from an insecure connection are rejected. 

Microsoft recommends that you always require secure transfer for all of your storage accounts.

See https://avd.aquasec.com/misconfig/avd-azu-0008
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


CRITICAL: Storage account uses an insecure TLS version.
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Azure Storage currently supports three versions of the TLS protocol: 1.0, 1.1, and 1.2. 

Azure Storage uses TLS 1.2 on public HTTPS endpoints, but TLS 1.0 and TLS 1.1 are still supported for backward compatibility.

This check will warn if the minimum TLS is not set to TLS1_2.

See https://avd.aquasec.com/misconfig/avd-azu-0011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/elk/elasticsearch/Dockerfile (dockerfile)
================================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You shoud add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/elk/kibana/Dockerfile (dockerfile)
=========================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You shoud add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/elk/logstash/Dockerfile (dockerfile)
===========================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You shoud add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/k8s/dashboard-adminuser.yaml (kubernetes)
================================================
Tests: 142 (SUCCESSES: 141, FAILURES: 1, EXCEPTIONS: 0)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

MEDIUM: ClusterRoleBinding 'admin-user' with role 'cluster-admin' should be used only when required
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RBAC role cluster-admin provides wide-ranging powers over the environment and should be used only where and when needed.

See https://avd.aquasec.com/misconfig/ksv111
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/k8s/dashboard-adminuser.yaml:10
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  10 [   name: admin-user
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/k8s/helm-rbac.yaml (kubernetes)
======================================
Tests: 142 (SUCCESSES: 141, FAILURES: 1, EXCEPTIONS: 0)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

MEDIUM: ClusterRoleBinding 'tiller' with role 'cluster-admin' should be used only when required
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RBAC role cluster-admin provides wide-ranging powers over the environment and should be used only where and when needed.

See https://avd.aquasec.com/misconfig/ksv111
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/k8s/helm-rbac.yaml:10
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  10 [   name: tiller
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



deploy/k8s/nginx-ingress/mandatory.yaml (kubernetes)
====================================================
Tests: 156 (SUCCESSES: 141, FAILURES: 15, EXCEPTIONS: 0)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 0, CRITICAL: 2)

MEDIUM: Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/k8s/nginx-ingress/mandatory.yaml:191-238
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 191 ┌         - name: nginx-ingress-controller
 192 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.20.0
 193 │           args:
 194 │             - /nginx-ingress-controller
 195 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
 196 │             - --publish-service=$(POD_NAMESPACE)/ingress-nginx
 197 │             - --annotations-prefix=nginx.ingress.kubernetes.io
 198 │           securityContext:
 199 └             capabilities:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'resources.limits.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/k8s/nginx-ingress/mandatory.yaml:191-238
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 191 ┌         - name: nginx-ingress-controller
 192 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.20.0
 193 │           args:
 194 │             - /nginx-ingress-controller
 195 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
 196 │             - --publish-service=$(POD_NAMESPACE)/ingress-nginx
 197 │             - --annotations-prefix=nginx.ingress.kubernetes.io
 198 │           securityContext:
 199 └             capabilities:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/k8s/nginx-ingress/mandatory.yaml:191-238
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 191 ┌         - name: nginx-ingress-controller
 192 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.20.0
 193 │           args:
 194 │             - /nginx-ingress-controller
 195 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
 196 │             - --publish-service=$(POD_NAMESPACE)/ingress-nginx
 197 │             - --annotations-prefix=nginx.ingress.kubernetes.io
 198 │           securityContext:
 199 └             capabilities:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'securityContext.readOnlyRootFilesystem' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/k8s/nginx-ingress/mandatory.yaml:191-238
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 191 ┌         - name: nginx-ingress-controller
 192 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.20.0
 193 │           args:
 194 │             - /nginx-ingress-controller
 195 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
 196 │             - --publish-service=$(POD_NAMESPACE)/ingress-nginx
 197 │             - --annotations-prefix=nginx.ingress.kubernetes.io
 198 │           securityContext:
 199 └             capabilities:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'resources.requests.cpu'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/k8s/nginx-ingress/mandatory.yaml:191-238
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 191 ┌         - name: nginx-ingress-controller
 192 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.20.0
 193 │           args:
 194 │             - /nginx-ingress-controller
 195 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
 196 │             - --publish-service=$(POD_NAMESPACE)/ingress-nginx
 197 │             - --annotations-prefix=nginx.ingress.kubernetes.io
 198 │           securityContext:
 199 └             capabilities:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'resources.requests.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/k8s/nginx-ingress/mandatory.yaml:191-238
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 191 ┌         - name: nginx-ingress-controller
 192 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.20.0
 193 │           args:
 194 │             - /nginx-ingress-controller
 195 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
 196 │             - --publish-service=$(POD_NAMESPACE)/ingress-nginx
 197 │             - --annotations-prefix=nginx.ingress.kubernetes.io
 198 │           securityContext:
 199 └             capabilities:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'resources.limits.memory'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/k8s/nginx-ingress/mandatory.yaml:191-238
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 191 ┌         - name: nginx-ingress-controller
 192 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.20.0
 193 │           args:
 194 │             - /nginx-ingress-controller
 195 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
 196 │             - --publish-service=$(POD_NAMESPACE)/ingress-nginx
 197 │             - --annotations-prefix=nginx.ingress.kubernetes.io
 198 │           securityContext:
 199 └             capabilities:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/k8s/nginx-ingress/mandatory.yaml:191-238
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 191 ┌         - name: nginx-ingress-controller
 192 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.20.0
 193 │           args:
 194 │             - /nginx-ingress-controller
 195 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
 196 │             - --publish-service=$(POD_NAMESPACE)/ingress-nginx
 197 │             - --annotations-prefix=nginx.ingress.kubernetes.io
 198 │           securityContext:
 199 └             capabilities:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/k8s/nginx-ingress/mandatory.yaml:191-238
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 191 ┌         - name: nginx-ingress-controller
 192 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.20.0
 193 │           args:
 194 │             - /nginx-ingress-controller
 195 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
 196 │             - --publish-service=$(POD_NAMESPACE)/ingress-nginx
 197 │             - --annotations-prefix=nginx.ingress.kubernetes.io
 198 │           securityContext:
 199 └             capabilities:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Adding NET_RAW or capabilities beyond the default set must be disallowed.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/k8s/nginx-ingress/mandatory.yaml:191-238
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 191 ┌         - name: nginx-ingress-controller
 192 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.20.0
 193 │           args:
 194 │             - /nginx-ingress-controller
 195 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
 196 │             - --publish-service=$(POD_NAMESPACE)/ingress-nginx
 197 │             - --annotations-prefix=nginx.ingress.kubernetes.io
 198 │           securityContext:
 199 └             capabilities:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The RuntimeDefault/Localhost seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/k8s/nginx-ingress/mandatory.yaml:191-238
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 191 ┌         - name: nginx-ingress-controller
 192 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.20.0
 193 │           args:
 194 │             - /nginx-ingress-controller
 195 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
 196 │             - --publish-service=$(POD_NAMESPACE)/ingress-nginx
 197 │             - --annotations-prefix=nginx.ingress.kubernetes.io
 198 │           securityContext:
 199 └             capabilities:
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


CRITICAL: Role permits management of secret(s)
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Check whether role permits managing secrets

See https://avd.aquasec.com/misconfig/ksv041
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/k8s/nginx-ingress/mandatory.yaml:37-47
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  37 ┌   - apiGroups:
  38 │       - ""
  39 │     resources:
  40 │       - configmaps
  41 │       - endpoints
  42 │       - nodes
  43 │       - pods
  44 │       - secrets
  45 └     verbs:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


CRITICAL: Role permits management of secret(s)
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Check whether role permits managing secrets

See https://avd.aquasec.com/misconfig/ksv041
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/k8s/nginx-ingress/mandatory.yaml:94-102
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  94 ┌   - apiGroups:
  95 │       - ""
  96 │     resources:
  97 │       - configmaps
  98 │       - pods
  99 │       - secrets
 100 │       - namespaces
 101 │     verbs:
 102 └       - get
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Role 'nginx-ingress-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/k8s/nginx-ingress/mandatory.yaml:103-115
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 103 ┌   - apiGroups:
 104 │       - ""
 105 │     resources:
 106 │       - configmaps
 107 │     resourceNames:
 108 │       # Defaults to "<election-id>-<ingress-class>"
 109 │       # Here: "<ingress-controller-leader>-<nginx>"
 110 │       # This has to be adapted if you change either parameter
 111 └       # when launching the nginx-ingress-controller.
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


MEDIUM: Role 'nginx-ingress-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 deploy/k8s/nginx-ingress/mandatory.yaml:116-121
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 116 ┌   - apiGroups:
 117 │       - ""
 118 │     resources:
 119 │       - configmaps
 120 │     verbs:
 121 └       - create
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/ApiGateways/Mobile.Bff.Shopping/aggregator/Dockerfile (dockerfile)
======================================================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You shoud add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/ApiGateways/Mobile.Bff.Shopping/aggregator/Dockerfile.develop (dockerfile)
==============================================================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You shoud add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/ApiGateways/Web.Bff.Shopping/aggregator/Dockerfile (dockerfile)
===================================================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You shoud add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/ApiGateways/Web.Bff.Shopping/aggregator/Dockerfile.develop (dockerfile)
===========================================================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You shoud add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/Services/Basket/Basket.API/Dockerfile (dockerfile)
======================================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You shoud add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/Services/Basket/Basket.API/Dockerfile.develop (dockerfile)
==============================================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You shoud add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/Services/Catalog/Catalog.API/Dockerfile (dockerfile)
========================================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You shoud add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/Services/Catalog/Catalog.API/Dockerfile.develop (dockerfile)
================================================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You shoud add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/Services/Identity/Identity.API/Dockerfile (dockerfile)
==========================================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You shoud add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/Services/Identity/Identity.API/Dockerfile.develop (dockerfile)
==================================================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You shoud add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/Services/Ordering/Ordering.API/Dockerfile (dockerfile)
==========================================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You shoud add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/Services/Ordering/Ordering.API/Dockerfile.develop (dockerfile)
==================================================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You shoud add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/Services/Ordering/Ordering.BackgroundTasks/Dockerfile (dockerfile)
======================================================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You shoud add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/Services/Ordering/Ordering.SignalrHub/Dockerfile (dockerfile)
=================================================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You shoud add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/Services/Ordering/Ordering.SignalrHub/Dockerfile.develop (dockerfile)
=========================================================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You shoud add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/Services/Payment/Payment.API/Dockerfile (dockerfile)
========================================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You shoud add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/Services/Payment/Payment.API/Dockerfile.develop (dockerfile)
================================================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You shoud add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/Services/Webhooks/Webhooks.API/Dockerfile (dockerfile)
==========================================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You shoud add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/Services/Webhooks/Webhooks.API/Dockerfile.develop (dockerfile)
==================================================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You shoud add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/Web/WebMVC/Dockerfile (dockerfile)
======================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You shoud add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/Web/WebMVC/Dockerfile.develop (dockerfile)
==============================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You shoud add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/Web/WebSPA/Dockerfile (dockerfile)
======================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You shoud add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/Web/WebStatus/Dockerfile (dockerfile)
=========================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You shoud add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



src/Web/WebhookClient/Dockerfile (dockerfile)
=============================================
Tests: 24 (SUCCESSES: 22, FAILURES: 2, EXCEPTIONS: 0)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

HIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Running containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.

See https://avd.aquasec.com/misconfig/ds002
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


LOW: Add HEALTHCHECK instruction in your Dockerfile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
You shoud add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.

See https://avd.aquasec.com/misconfig/ds026
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


